&НаКлиенте
Перем СоответствиеСтраницаТаблица;

&НаКлиенте
Перем ПравоОткрыватьЗавершенные;

&НаКлиенте
Перем СтруктураПоискКС;

#Область События_Формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураПоискКС = Новый Структура("КлючСтроки", "");
	
	ПрочитатьНастройкиОтборСервер();
	
	ПроектПриИзменении(Элементы.Проект);
	НачалоПериодаПриИзменении(Элементы.НачалоПериода);
	
	СоответствиеСтраницаТаблица = Новый Соответствие;
	Для Каждого Страница Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
		мТаблицы = Новый Массив;
		Для Каждого ПодчЭлемент Из Страница.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ПодчЭлемент) = Тип("ТаблицаФормы") И ПодчЭлемент.Доступность Тогда
				мТаблицы.Добавить(ПодчЭлемент.Имя);
			КонецЕсли;
		КонецЦикла;
		СоответствиеСтраницаТаблица.Вставить(Страница, мТаблицы);
	КонецЦикла;
	
	ПравоОткрыватьЗавершенные = ПроверитьВозможностьОткрыватьЗавершенныеРаботыСервер();
	
	УстановитьОтображениеКнопкиОтбораПоПериоду();
	УстановитьОтображениеКнопкиОтбораПоСтроке();
	УстановитьОтображениеПодсказкиКонструктив();
	
	УстановитьРежимПоСменам();
	
	УстановитьРазмерыЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ЗаписатьНастройкиОтборСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ВывестиСообщениеМодифицированность("ПередЗакрытием", "Внесенные изменения не записаны.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ПолучитьРеквизитСервер(Объект.Проект, "ПлановаяДатаНачала"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если Не НачалоМесяца(Объект.НачалоПериода) = Объект.НачалоПериода Тогда
		Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода);
	КонецЕсли;
	
	Если Не НачалоДня(КонецМесяца(Объект.НачалоПериода)) = Объект.КонецПериода Тогда
		Объект.КонецПериода = НачалоДня(КонецМесяца(Объект.НачалоПериода));
	КонецЕсли;
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Если Объект.НачалоПериода > Объект.КонецПериода Тогда
			Объект.НачалоПериода = НачалоМесяца(Объект.КонецПериода);
		КонецЕсли;
	КонецЕсли;
	//Если ЗначениеЗаполнено(Объект.Периодичность) Тогда
	//	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
	//		Объект.КонецПериода = ПолучитьРеквизитПроектаСервер(Объект.Проект, "ПлановаяДатаОкончания");
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(Объект.КонецПериода) Тогда
	//		Объект.КонецПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(Объект.КонецПериода, Объект.Периодичность);
	//		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Или Объект.КонецПериода < Объект.НачалоПериода Тогда
	//			Объект.НачалоПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(Объект.КонецПериода, Объект.Периодичность);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Объект.Версия = ПолучитьВерсиюПроектаНаСервере(Объект.Проект);
		Объект.Периодичность = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_ГоризонтПланирования");
		Объект.Организация = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_Организация");
	Иначе
		Объект.Версия = Неопределено;
		Объект.Периодичность = Неопределено;
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	ОтборИсполнитель.ЗагрузитьЗначения(ПолучитьМассивЗадействованныхИсполнителейСервер(Объект.Проект));
	ОтборСклад.ЗагрузитьЗначения(ПолучитьМассивЗадействованныхСкладовСервер(Объект.Проект));
	
	ОтборПриИзменении();
	
	УстановитьРежимПоСменам();
	
КонецПроцедуры

&НаКлиенте
Процедура СубподрядПриИзменении(Элемент)
	
	Если Объект.Субподряд = 1 И Не ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Объект.Исполнитель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ИначеЕсли Объект.Субподряд = 2 И Не ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивПриИзменении(Элемент)
	
	УстановитьОтображениеПодсказкиКонструктив();
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
 	СтандартнаяОбработка = ложь;
	
	ДопПараметры = новый Структура;
 	ДопПараметры.Вставить("Проект", Объект.Проект);
	ДопПараметры.Вставить("ВерсияИсточника", Неопределено);
 	ДопПараметры.Вставить("Версия", Объект.Версия);
 	ДопПараметры.Вставить("ТолькоWBS", Истина);
 	
 	JJ = Новый ОписаниеОповещения("КонструктивЗавершениеВыбора", ЭтаФорма, 0);
	
	ОткрытьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаВыбораЭлементаWBS", ДопПараметры, ЭтаФорма,,,,JJ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивЗавершениеВыбора(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
 	
	Изменение = Ложь;
	Для Каждого СтрокаМассива Из Результат Цикл
						
		Объект.Конструктив = СтрокаМассива.ВидРаботыСоответствия;
		//Объект.КлючСтрокиКонструктив = СтрокаМассива.КлючСтрокиСоответствия;
		//ОчиститьТЧ();
		Изменение = Истина;
		
	КонецЦикла;
	
	Если Изменение Тогда
		КонструктивПриИзменении(Элементы.Конструктив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивИерархияПриИзменении(Элемент)
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивИерархияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
 	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("Проект, ВерсияИсточника, Версия, ТолькоWBS", Объект.Проект, Неопределено, Объект.Версия, Истина);
	Оповещение = Новый ОписаниеОповещения("КонструктивИерархияЗавершениеВыбора", ЭтаФорма, 0);
	ОткрытьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаВыбораЭлементаWBS", ДопПараметры, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструктивИерархияЗавершениеВыбора(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ЕстьИзменение = Ложь;
		
		Для Каждого Стр Из Результат Цикл
			Объект.КонструктивИерархия = Стр.ВидРаботыСоответствия;
			ЕстьИзменение = Истина;
		КонецЦикла;
		
		Если ЕстьИзменение Тогда
			ОтборПриИзменении();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныйОтборПоСтрокеСтолбцуПриИзменении(Элемент)
	
	ПериодКолонкиКэширование(Элементы.РаботыПланФакт.ТекущийЭлемент.Имя);
	УстановитьДетальныйОтборАктивнойТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФактПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = Элементы.РаботыПланФакт.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		ИмяКолонки = Элементы.РаботыПланФакт.ТекущийЭлемент.Имя;
		
		Если (Лев(ИмяКолонки, 1) = "_" И Не Лев(ИмяКолонки, 3) = "_КП") Или ИмяКолонки = "РаботыЗавершена" Тогда
			
			ТолькоЧтение = Ложь;
			
			Если Лев(ИмяКолонки, 3) = "_ОП" Тогда
				
				СтрДатаСмена = Сред(ИмяКолонки, 5, 10);
				
				Если ТекДанные["_ФД1" + СтрДатаСмена] <> 0 Или ЗначениеЗаполнено(ТекДанные["_ПО1" + СтрДатаСмена]) Тогда
					ТолькоЧтение = Истина;
				Иначе
					СтруктураПоискКС.КлючСтроки = ТекДанные.КлючСтроки;
					мПоиск = РаботыНачало.НайтиСтроки(СтруктураПоискКС);
					Если мПоиск.Количество() > 0 И (мПоиск[0]["_ФД0" + СтрДатаСмена] <> 0 Или ЗначениеЗаполнено(мПоиск[0]["_ПО0" + СтрДатаСмена])) Тогда
						ТолькоЧтение = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не Элементы.РаботыПланФакт.ТекущийЭлемент.ТолькоПросмотр = ТолькоЧтение Тогда
				Элементы.РаботыПланФакт.ТекущийЭлемент.ТолькоПросмотр = ТолькоЧтение;
			КонецЕсли;
			
		КонецЕсли;
		
		ПериодКолонкиКэширование(ИмяКолонки);
		УстановитьДетальныйОтборАктивнойТаблицы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФактПередНачаломИзменения(Элемент, Отказ)
	
	Если Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		ТекДанные = Элементы.РаботыПланФакт.ТекущиеДанные;
		Если ТекДанные.Завершена И Не Элементы.РаботыПланФакт.ТекущийЭлемент.Имя = "РаботыЗавершена" Тогда
			Отказ = Истина;
		ИначеЕсли Не ПравоОткрыватьЗавершенные Тогда
			СтруктураПоискКС.КлючСтроки = ТекДанные.КлючСтроки;
			мПоиск = РаботыНачало.НайтиСтроки(СтруктураПоискКС);
			Если мПоиск.Количество() > 0 И мПоиск[0].Завершена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФактПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда

		ТекЭлемент = Элементы.РаботыПланФакт.ТекущийЭлемент;
		ТекПлан = Лев(ТекЭлемент.Имя, 4);
		ТекПериодСмена = Сред(ТекЭлемент.Имя, 5);
		
		Если ТекПлан = "_ФД1" И ЗначениеЗаполнено(ТекДанные["_ПО1" + Сред(ТекЭлемент.Имя, 5)]) Тогда
			ТекДанные["_ПО1" + Сред(ТекЭлемент.Имя, 5)] = ПредопределенноеЗначение("Справочник.ИНАГРО_ПричиныОтклонений.ПустаяСсылка");
		КонецЕсли;
		
		Если ТекПлан = "_ОП1" Или ТекПлан = "_ФД1" Или ТекПлан = "_ПО1" Тогда
			ПроверитьРасчитатьКолонкиИтоговВСтроке(ТекДанные, ТекПлан, ТекПериодСмена);
		КонецЕсли;
		
		Если ТекПлан = "_ФД1" Тогда
			
			ТекПериод = Дата(Лев(ТекПериодСмена, 8) + "000000");
			
			СтруктураПоискКС.КлючСтроки = ТекДанные.КлючСтроки;
			мДанныеНачало = РаботыНачало.НайтиСтроки(СтруктураПоискКС);
			
			мСообщения = РаботыПланФактПроверитьОграниченияСервер(ТекДанные.КлючСтроки, ТекПериод, ТекДанные[ТекЭлемент.Имя], мДанныеНачало[0]["_ФД0" + ТекПериодСмена]);
			
			Для Каждого ТекстСообщения Из мСообщения Цикл
				ПоказатьПредупреждение(, ТекстСообщения);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДетальныйОтборАктивнойТаблицы();
	УстановитьОтображениеКнопкиОтбораПоПериоду();
	УстановитьОтображениеКнопкиОтбораПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеМодифицированность(ПараметрЗапуска = Неопределено, ТекстВопроса = Неопределено, РежимДиалога = Неопределено)
	
	Если ПараметрЗапуска = Неопределено Тогда
		ТекстВопроса = "Существуют не записанные данные. ";
	ИначеЕсли ТекстВопроса = Неопределено Тогда
		ТекстВопроса = "Для выполнения операции с детальными данными необходимо сохранить изменения. ";
	КонецЕсли;
	
	Если РежимДиалога = Неопределено Тогда
		РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СообщениеМодифицированностьЗавершениеВыбора", ЭтаФорма, ПараметрЗапуска),
		ТекстВопроса + " Записать?", РежимДиалога,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеМодифицированностьЗавершениеВыбора(Результат, Параметр2) Экспорт
	
	ТекКлючСтроки = ?(Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено, Неопределено, Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
	ТекКолонкаИмя = ?(Элементы.РаботыПланФакт.ТекущийЭлемент = Неопределено, Неопределено, Элементы.РаботыПланФакт.ТекущийЭлемент.Имя);
	
	ВыполнятьКомандуИсточник = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботыПланФактЗаписатьИзменения();
		ВыполнятьКомандуИсточник = Не Модифицированность;

	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		РаботыПланФактЗагрузить();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		
		ВыполнятьКомандуИсточник = Ложь; // ничего не делать
		
	КонецЕсли;
	
	Если Не ВыполнятьКомандуИсточник Тогда
		Возврат;
	КонецЕсли;
		
	КомандаИсточник = ЭтаФорма.Команды.Найти(Параметр2);
	
	Если Параметр2 = "Отбор_КнопкаПрименить" Тогда
		Отбор_КнопкаПрименить(КомандаИсточник);
		
	ИначеЕсли Параметр2 = "РаботыПланФакт_Загрузить" Тогда
		РаботыПланФакт_Загрузить(КомандаИсточник);
		
	ИначеЕсли Параметр2 = "ОтборПриИзменении" Тогда
		ОтборПриИзменении();
		
	ИначеЕсли Параметр2 = "ПередЗакрытием" Тогда
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Параметр2 = "РаботыПланФакт_ЗаписатьИзменения" Тогда
		РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя);
		
	ИначеЕсли Параметр2 = "РаботыПланФакт_СформироватьОП_ПоВидуРабот" Тогда
		Если РаботыПланФактВосстановитьТекущуюСтроку(ТекКлючСтроки) Тогда
			РаботыПланФакт_СформироватьОП_ПоВидуРабот(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "РаботыПланФакт_СформироватьОП_ПоОтбору" Тогда
		РаботыПланФакт_СформироватьОП_ПоОтбору(КомандаИсточник);
		РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя);
		
	ИначеЕсли Параметр2 = "ПланированиеРесурсовСформироватьПоОП" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			ПланированиеРесурсовСформироватьПоОП(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "ПланированиеРесурсовДобавить_ТР_ММ" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			ПланированиеРесурсовДобавить_ТР_ММ(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "РасходМатериаловСформировать" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			РасходМатериаловСформировать(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "РасходМатериаловДобавить" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			РасходМатериаловДобавить(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "УчетТРЗаполнить" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			УчетТРЗаполнить(КомандаИсточник);
		КонецЕсли;
		
	ИначеЕсли Параметр2 = "УчетММЗаполнить" Тогда
		Если РаботыПланФактВосстановитьТекущуюЯчейку(ТекКлючСтроки, ТекКолонкаИмя) Тогда
			УчетММЗаполнить(КомандаИсточник);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Команды_Формы

&НаКлиенте
Процедура Отбор_КнопкаПрименить(Команда)
	
	РезультатПроверки = "";
	
	Если ПроверитьРеквизитыОтбора(РезультатПроверки) Тогда
		
		Если Модифицированность Тогда
			ВывестиСообщениеМодифицированность("Отбор_КнопкаПрименить", "Внесенные изменения не записаны.");
		Иначе
			РаботыПланФактЗагрузить();
			УстановитьОсновнойОтбор();
			Элементы.Отбор.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Сообщить(РезультатПроверки + Символы.ПС + "Заполнение невозможно!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_КнопкаЗакрыть(Команда)
	
	РезультатПроверки = "";
	Если ПроверитьРеквизитыОтбора(РезультатПроверки) Тогда
		Элементы.Отбор.Видимость = Ложь;
	Иначе
		Сообщить(РезультатПроверки + Символы.ПС + "Отбор не заполнен!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ДетализацияПоПериоду(Команда)
	
	ДетальныйОтборПоСтолбцу = Не ДетальныйОтборПоСтолбцу;
	УстановитьОтображениеКнопкиОтбораПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ДетализацияПоСтроке(Команда)
	
	ДетальныйОтборПоСтроке = Не ДетальныйОтборПоСтроке;
	УстановитьОтображениеКнопкиОтбораПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФакт_Загрузить(Команда)
	
	РезультатПроверки = "";
	Если ПроверитьРеквизитыОтбора(РезультатПроверки) Тогда
		Если Модифицированность Тогда
			ВывестиСообщениеМодифицированность("РаботыПланФакт_Загрузить", "Внесенные изменения не записаны.");
		Иначе
			РаботыПланФактЗагрузить();
			УстановитьОсновнойОтбор();
		КонецЕсли;
	Иначе
		Сообщить(РезультатПроверки + Символы.ПС + "Заполнение невозможно!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФакт_ПоказатьОтбор(Команда)
	
	// ++ Ситис: p.virich   2018-07-26
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("", "Внесенные изменения не записаны.");
 	Иначе
		Элементы.Отбор.Видимость = Истина;
	КонецЕсли;
	
	// -- Ситис: p.virich   2018-07-26 

КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФакт_ЗаписатьИзменения(Команда)
	
	Если Модифицированность И ПроверитьПередЗаписью() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СообщениеМодифицированностьЗавершениеВыбора", ЭтаФорма, "РаботыПланФакт_ЗаписатьИзменения"),
			"Вы уверены, что хотите изменить данные оперативного учета?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПередЗаписью()
	
	ТекстОшибки = "";
	ПроверитьПередЗаписьюФД(ТекстОшибки);
	
	Если Не ТекстОшибки = "" Тогда
		Сообщить("Запись данных не выполнена! Выявлены следующие ошибки:" + ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки = "";

КонецФункции

&НаКлиенте
Процедура ПроверитьПередЗаписьюФД(ТекстОшибки = "")
	
	Для Каждого Стр Из Работы Цикл
		
		Для Каждого Период Из тзВсеПериоды Цикл
			
			Сч = 0;
			
			Для Каждого Смена Из СменыПроекта Цикл
				
				СтрДатаСмена = Период.Суффикс + "_" + Сч;
				
				ТекПлан = Стр["_ОП1" + СтрДатаСмена];
				ТекФакт = Стр["_ФД1" + СтрДатаСмена];
				ТекПричина = Стр["_ПО1" + СтрДатаСмена];
				
				Если ТекФакт <> 0 И ТекПлан <> ТекФакт И Не ЗначениеЗаполнено(ТекПричина) Тогда
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + "Не указана причина отклонения для "
						+ Стр.ВидРаботы + ", период: " + Формат(Период.Период, "ДЛФ=Д")
						+ ?(ЭтаФорма.ПоСменам, ", смена: " + СменыПроекта.Получить(Сч).Значение, "");
					
				КонецЕсли;
					
				Сч = Сч + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФакт_СформироватьОП_ПоВидуРабот(Команда)
	
	Если Работы.Количество() > 0 И Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		Если Модифицированность Тогда
			ВывестиСообщениеМодифицированность("РаботыПланФакт_СформироватьОП_ПоВидуРабот", "Внесенные изменения не записаны.");
		Иначе
			РаботыПланФактСформироватьДокументОП(Элементы.РаботыПланФакт.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФакт_СформироватьОП_ПоОтбору(Команда)
	
	Если Работы.Количество() > 0 Тогда
		Если Модифицированность Тогда
			ВывестиСообщениеМодифицированность("РаботыПланФакт_СформироватьОП_ПоОтбору", "Внесенные изменения не записаны.");
		Иначе
			РаботыПланФактСформироватьДокументОП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеРесурсовСформироватьПоОП(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("ПланированиеРесурсовСформироватьПоОП");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("Проект, Версия, НачалоПериода, КонецПериода, Исполнитель, Конструктив, КонструктивИерархия",
			Объект.Проект, Объект.Версия, ТекКолонкаПериодНачало, ТекКолонкаПериодКонец, Объект.Исполнитель, Объект.Конструктив, Объект.КонструктивИерархия);
			
		ТекКлючСтроки = ?(ДетальныйОтборПоСтроке, Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки, Неопределено);
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПланированиеТР Тогда
			ПланированиеРесурсовСформироватьДокументСервер(ПараметрыОтбора, ТекКлючСтроки, "ТР");
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПланированиеММ Тогда
			ПланированиеРесурсовСформироватьДокументСервер(ПараметрыОтбора, ТекКлючСтроки, "ММ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеРесурсовДобавить_ТР_ММ(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("ПланированиеРесурсовДобавить_ТР_ММ");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_НазначениеИсполнителейНаРаботы.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("НИ",, Ложь,, ДанныеФормы);
		
		Если ДанныеФормы.Ссылка.Пустая() Тогда
			КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
			ФормаДокумента.Открыть();
		Иначе
			ФормаДокумента = Неопределено;
			ФормаДокумента = ОткрытьФорму("Документ.ИНАГРО_НазначениеИсполнителейНаРаботы.ФормаОбъекта", Новый Структура("Ключ", ДанныеФормы.Ссылка));
			ДанныеФормы = Неопределено;
		КонецЕсли;
		
		ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.ГруппаТЧ;
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПланированиеТР Тогда
			ФормаДокумента.Элементы.Страницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаТрудовыеРесурсы;
		Иначе
			ФормаДокумента.Элементы.Страницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаМашиныИМеханизмы;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		Если ДетальныйОтборПоСтроке Тогда
			ПараметрыФормы.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		Если ДетальныйОтборПоСтолбцу Тогда
			ПараметрыФормы.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
			ПараметрыФормы.Вставить("КонецПериода", ТекКолонкаПериодКонец);
		КонецЕсли;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПланированиеТР Тогда
			ФормаПодбораРабот = ПолучитьФорму("Документ.ИНАГРО_НазначениеИсполнителейНаРаботы.Форма.ФормаПодбораТР", ПараметрыФормы, ФормаДокумента);
		Иначе
			ФормаПодбораРабот = ПолучитьФорму("Документ.ИНАГРО_НазначениеИсполнителейНаРаботы.Форма.ФормаПодбораММ", ПараметрыФормы, ФормаДокумента);
		КонецЕсли;
		
		ФормаПодбораРабот.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловСформировать(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("РасходМатериаловСформировать");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ДопПараметры = Новый Структура("ПереданныеМатериалы, Склад", Объект.Субподряд = 1, Объект.Склад);
		Если ДетальныйОтборПоСтроке Тогда
			ДопПараметры.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		Если ДетальныйОтборПоСтолбцу Тогда
			ДопПараметры.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
			ДопПараметры.Вставить("КонецПериода", ТекКолонкаПериодКонец);
		КонецЕсли;
		ДопПараметры.Вставить("ЗаполнятьФакт", Ложь);
		
		Если ДопПараметры.Склад.Пустая() Тогда
			мСклады = ПолучитьМассивЗадействованныхСкладовСервер(Объект.Проект); //ОтборИсполнитель.ВыгрузитьЗначения()
			Если мСклады.Количество() = 1 Тогда
				ДопПараметры.Склад = мСклады[0];
			Иначе
				Сообщить("Не указан склад по-умолчанию в настройках.");
				//ФормаВыбораСклады = ОткрытьФорму("Справочник.Склады.ФормаВыбора",, ЭтаФорма,,,,
				//	Новый ОписаниеОповещения("РасходМатериаловВыборСкладаЗакрытие", ЭтотОбъект, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				////ИдНастройки = ФормаВыбораСклады.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
				//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбораСклады.Список, "Ссылка", мСклады,
				//	ВидСравненияКомпоновкиДанных.ВСписке,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
			КонецЕсли;
		КонецЕсли;
			
		//ПараметрыОтбор = Новый Структура("Проект, Версия, НачалоПериода, КонецПериода, Исполнитель, Конструктив",
		//	Объект.Проект, Объект.Версия, ТекКолонкаПериодНачало, ТекКолонкаПериодКонец, Объект.Исполнитель, Объект.Конструктив);
		//ПараметрыОтбор.Вставить("Периодичность", Объект.Периодичность);
		//ПараметрыОтбор.Вставить("ПереданныеМатериалы", Объект.Субподряд = 1);
		//ПараметрыОтбор.Вставить("КлючСтроки", ?(ДетальныйОтборПоСтроке, Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки, Неопределено));
		
		Если Не ДопПараметры.Склад.Пустая() Тогда
			
			ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_РасходМатериалов.ФормаОбъекта",,, Истина);
			ДанныеФормы = ФормаДокумента.Объект;
			
			РасходМатериаловСформироватьДокументСервер(ДопПараметры, ДанныеФормы);
			
			Если Не ДанныеФормы = Неопределено И ЗначениеЗаполнено(ДанныеФормы.Проект) Тогда
				КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
				ДанныеФормы = Неопределено;
				ФормаДокумента.Открыть();
				ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаМатериалы;
			Иначе
				Сообщить("По указанному отбору нет планируемого расхода материалов.");
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловДобавить(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("РасходМатериаловДобавить");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ДопПараметры = Новый Структура("ПереданныеМатериалы, Склад", Объект.Субподряд = 1, Объект.Склад);
		ДопПараметры.Вставить("ЗаполнятьФакт", Ложь);
		
		Если ДопПараметры.Склад.Пустая() Тогда
			мСклады = ПолучитьМассивЗадействованныхСкладовСервер(Объект.Проект); //ОтборИсполнитель.ВыгрузитьЗначения()
			Если мСклады.Количество() = 1 Тогда
				ДопПараметры.Склад = мСклады[0];
			Иначе
				Сообщить("Не указан склад по-умолчанию в настройках.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_РасходМатериалов.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("РМ",, Ложь, ДопПараметры, ДанныеФормы);
		
		Если ДанныеФормы.Ссылка.Пустая() Тогда
			КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
			ФормаДокумента.Открыть();
		Иначе
			ФормаДокумента = ОткрытьФорму("Документ.ИНАГРО_РасходМатериалов.ФормаОбъекта", Новый Структура("Ключ", ДанныеФормы.Ссылка));
			ДанныеФормы = Неопределено;
		КонецЕсли;
		
		ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаМатериалы;
		
		ПараметрыФормы = Новый Структура;
		Если ДетальныйОтборПоСтроке Тогда
			ПараметрыФормы.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		Если ДетальныйОтборПоСтолбцу Тогда
			ПараметрыФормы.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
			ПараметрыФормы.Вставить("КонецПериода", ТекКолонкаПериодКонец);
		КонецЕсли;
		
		ФормаПодбораМатериалов = ПолучитьФорму("Документ.ИНАГРО_РасходМатериалов.Форма.ФормаПодбораУГПР", ПараметрыФормы, ФормаДокумента);
		ФормаПодбораМатериалов.Открыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчетТРВыбрать(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("УчетТРВыбрать");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		
		Отказ = Ложь;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ДТ",, Отказ,, ДанныеФормы);
		
		Если Отказ Тогда
			
			Сообщить("Не удалось найти или сформировать документ для добавления записи. Возможно недостаточно прав.");
			
		Иначе
			
			Если ДанныеФормы.Ссылка.Пустая() Тогда
				КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
				ФормаДокумента.Открыть();
			Иначе
				ФормаДокумента = ОткрытьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта", Новый Структура("Ключ", ДанныеФормы.Ссылка));
				ДанныеФормы = Неопределено;
			КонецЕсли;
			
			ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаГруппаТЧ;
			ФормаДокумента.Элементы.СтраницыТЧ.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаДолжности;
			
			ПараметрыФормы = Новый Структура;
			Если ДетальныйОтборПоСтроке Тогда
				ПараметрыФормы.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
			КонецЕсли;
			Если ДетальныйОтборПоСтолбцу Тогда
				ПараметрыФормы.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
				ПараметрыФормы.Вставить("КонецПериода", ТекКолонкаПериодКонец);
			КонецЕсли;
			
			ФормаПодбораДолжности = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.Форма.ФормаПодбораДолжностиИзНазначений", ПараметрыФормы, ФормаДокумента);
			ФормаПодбораДолжности.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетТРЗаполнить(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("УчетТРЗаполнить");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		Если ДетальныйОтборПоСтроке Тогда
			ДопПараметры.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		Если ДетальныйОтборПоСтолбцу Тогда
			ДопПараметры.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
			ДопПараметры.Вставить("КонецПериода", ТекКолонкаПериодКонец);
		КонецЕсли;
		ДопПараметры.Вставить("ЗаполнятьФакт", Ложь);
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		
		УчетТРСформироватьДокументСервер(ДопПараметры, ДанныеФормы);
		
		Если Не ДанныеФормы = Неопределено И ЗначениеЗаполнено(ДанныеФормы.Проект) Тогда
			КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
			ДанныеФормы = Неопределено;
			ФормаДокумента.Открыть();
			ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаГруппаТЧ;
			ФормаДокумента.Элементы.СтраницыТЧ.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаДолжности;
		Иначе
			Сообщить("По указанному отбору нет запланированных трудовых ресурсов для учета расхода, либо они уже учтены.");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетММВыбрать(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("УчетММВыбрать");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		
		Отказ = Ложь;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ДТ",, Отказ,, ДанныеФормы);
		
		Если Отказ Тогда
			
			Сообщить("Не удалось найти или сформировать документ для добавления записи. Возможно недостаточно прав.");
			
		Иначе
			
			Если ДанныеФормы.Ссылка.Пустая() Тогда
				КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
				ФормаДокумента.Открыть();
			Иначе
				ФормаДокумента = ОткрытьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта", Новый Структура("Ключ", ДанныеФормы.Ссылка));
				ДанныеФормы = Неопределено;
			КонецЕсли;
			
			ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаГруппаТЧ;
			ФормаДокумента.Элементы.СтраницыТЧ.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаМашиныМеханизмы;
			
			ПараметрыФормы = Новый Структура;
			Если ДетальныйОтборПоСтроке Тогда
				ПараметрыФормы.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
			КонецЕсли;
			Если ДетальныйОтборПоСтолбцу Тогда
				ПараметрыФормы.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
				ПараметрыФормы.Вставить("КонецПериода", ТекКолонкаПериодКонец);
			КонецЕсли;
			
			ФормаПодбораМашины = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.Форма.ФормаПодбораМашиныПоНазначению", ПараметрыФормы, ФормаДокумента);
			ФормаПодбораМашины.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетММЗаполнить(Команда)
	
	Если Модифицированность Тогда
		
		ВывестиСообщениеМодифицированность("УчетММЗаполнить");
		
	ИначеЕсли Не Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		Если ДетальныйОтборПоСтроке Тогда
			ДопПараметры.Вставить("КлючСтроки", Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		Если ДетальныйОтборПоСтолбцу Тогда
			ДопПараметры.Вставить("НачалоПериода", ТекКолонкаПериодНачало);
			ДопПараметры.Вставить("КонецПериода", ТекКолонкаПериодКонец);
		КонецЕсли;
		ДопПараметры.Вставить("ЗаполнятьФакт", Ложь);
		
		ФормаДокумента = ПолучитьФорму("Документ.ИНАГРО_УчетРаботыСотрудниковИТехники.ФормаОбъекта",,, Истина);
		ДанныеФормы = ФормаДокумента.Объект;
		
		УчетММСформироватьДокументСервер(ДопПараметры, ДанныеФормы);
		
		Если Не ДанныеФормы = Неопределено И ЗначениеЗаполнено(ДанныеФормы.Проект) Тогда
			КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
			ДанныеФормы = Неопределено;
			ФормаДокумента.Открыть();
			ФормаДокумента.Элементы.ГруппаСтраницы.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаГруппаТЧ;
			ФормаДокумента.Элементы.СтраницыТЧ.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаМашиныМеханизмы;
		Иначе
			Сообщить("По указанному отбору нет запланированных машинных ресурсов для учета расхода, либо они уже учтены.");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистыДобавить(Команда)
	
	ТекДанные = Элементы.РаботыПланФакт.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		
		Сообщить("Необходимо выбрать ВидРабот, для которой создается запись.");
		
	Иначе
		
		ФормаЗаписи = ОткрытьФорму("РегистрСведений.ИНАГРО_ЛистДляНачалаРабот.ФормаЗаписи",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ФормаЗаписи.Запись.Организация = Объект.Организация;
		ФормаЗаписи.Запись.Проект = Объект.Проект;
		ФормаЗаписи.Запись.Периодичность = Объект.Периодичность;
		ФормаЗаписи.Запись.КлючСтроки = ТекДанные.КлючСтроки;
		ФормаЗаписи.Запись.Конструктив = ТекДанные.Конструктив;
		ФормаЗаписи.Запись.ВидРабот = ТекДанные.ВидРаботы;
		ФормаЗаписи.Запись.ДатаНачала = ТекКолонкаПериодНачало;
		ФормаЗаписи.Запись.МестоРаботыВУГПР = ТекДанные.НомерВСтруктуре + ", " + ТекДанные.ШифрПозицииНорматива;
		ФормаЗаписи.Запись.ИмяПользователя = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		ФормаЗаписи.Элементы.КлючСтроки.ТолькоПросмотр = Истина;
		ФормаЗаписи.Элементы.ИмяПользователя.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки_по_умолчанию

&НаСервере
Процедура ПрочитатьНастройкиОтборСервер()
	
	НастройкиОтбор = ХранилищеНастроекДанныхФорм.Загрузить("ВРКП", "Отбор");
	Если Не НастройкиОтбор = Неопределено И ТипЗнч(НастройкиОтбор) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиОтбор);
		Если Не НастройкиОтбор.Свойство("ДетальныйОтборПоСтолбцу", ДетальныйОтборПоСтолбцу) Тогда
			ДетальныйОтборПоСтолбцу = Истина;
		КонецЕсли;
		Если Не НастройкиОтбор.Свойство("ДетальныйОтборПоСтроке", ДетальныйОтборПоСтроке) Тогда
			ДетальныйОтборПоСтроке = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиОтборСервер()
	
	НастройкиОтбор = Новый Структура("Проект, НачалоПериода, КонецПериода, Субподряд, Исполнитель, Конструктив, ПоказыватьЗавершенные, Склад, Сценарий, КонструктивИерархия");
	ЗаполнитьЗначенияСвойств(НастройкиОтбор, Объект);
	НастройкиОтбор.Вставить("ДетальныйОтборПоСтолбцу", ДетальныйОтборПоСтолбцу);
	НастройкиОтбор.Вставить("ДетальныйОтборПоСтроке", ДетальныйОтборПоСтроке);
	ХранилищеНастроекДанныхФорм.Сохранить("ВРКП", "Отбор", НастройкиОтбор);
	
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаКлиенте
Процедура УстановитьРазмерыЭлементовУправления()
	
	Для Каждого Кол Из Элементы.тчЧекЛисты.ПодчиненныеЭлементы Цикл
		
		Если Кол.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Кол.ШиринаЭлемента = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", ТекущаяДата());
	СтруктураПараметров.Вставить("Ссылка", Неопределено);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Проект", Объект.Проект);
	СтруктураПараметров.Вставить("Версия", Объект.Версия);
	СтруктураПараметров.Вставить("Конструктив", Объект.Конструктив);
	СтруктураПараметров.Вставить("КонструктивИерархия", Объект.КонструктивИерархия);
	СтруктураПараметров.Вставить("Исполнитель", Объект.Исполнитель);
	СтруктураПараметров.Вставить("НачалоПериода", Объект.НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода", НачалоДня(КонецМесяца(Объект.НачалоПериода)));
	СтруктураПараметров.Вставить("Периодичность", Объект.Периодичность);
	СтруктураПараметров.Вставить("Субподряд", Объект.Субподряд);
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ПроверитьРеквизитыОтбора(Результат)
	
	мРезультат = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ГрафикПроекта = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_ГрафикРаботы");
		Если Не ЗначениеЗаполнено(ГрафикПроекта) Тогда
			мРезультат.Добавить("График работы (реквизит Проекта)");
		КонецЕсли;
		ПроектПериодичность = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_ГоризонтПланирования");
		Если Не ЗначениеЗаполнено(ПроектПериодичность) Тогда
			мРезультат.Добавить("Горизонт планирования (реквизит Проекта)");
		КонецЕсли;
		ПроектОрганизация = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_Организация");
		Если Не ЗначениеЗаполнено(ПроектОрганизация) Тогда
			мРезультат.Добавить("Организация (реквизит Проекта)");
		КонецЕсли;
	Иначе
		мРезультат.Добавить("Проект");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		мРезультат.Добавить("Начало периода");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		мРезультат.Добавить("Конец периода");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Версия) Тогда
		мРезультат.Добавить("Версия проекта");
	КонецЕсли;
	
	Результат = "";
	Если мРезультат.Количество() > 0 Тогда
		Для Каждого Поле Из мРезультат Цикл
			Результат = Результат + ?(Результат = "", "", ", ") + Поле;
		КонецЦикла;
		Результат = "Не заполнены обязательные реквизиты документа: " + Результат;
	КонецЕсли;
	
	Возврат мРезультат.Количество() = 0;
	
КонецФункции

&НаКлиенте
Процедура ОтборПриИзменении()
	
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("ОтборПриИзменении", "Внесенные изменения не записаны.");
	Иначе
		Работы.Очистить();
		РаботыНачало.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеКнопкиОтбораПоПериоду()
	
	Для Каждого Элемент Из Элементы.ГруппаСтраницы.ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			Для Каждого ЭлементПанели Из Элемент.КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если Прав(ЭлементПанели.Имя, 11) = "ОтборПериод" Тогда
					ЭлементПанели.Отображение = ?(ДетальныйОтборПоСтолбцу, ОтображениеКнопки.КартинкаИТекст, ОтображениеКнопки.Текст);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеКнопкиОтбораПоСтроке()
	
	Для Каждого Элемент Из Элементы.ГруппаСтраницы.ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			Для Каждого ЭлементПанели Из Элемент.КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если Прав(ЭлементПанели.Имя, 11) = "ОтборСтрока" Тогда
					ЭлементПанели.Отображение = ?(ДетальныйОтборПоСтроке, ОтображениеКнопки.КартинкаИТекст, ОтображениеКнопки.Текст);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеПодсказкиКонструктив()

	КонструктивВыбран = ЗначениеЗаполнено(Объект.Конструктив);
	
	Если КонструктивВыбран Тогда
		
		Классификатор = ПолучитьКлассификаторКонструктиваСервер(Объект.Конструктив);
		
		Если Классификатор = Неопределено Тогда
			Элементы.КонструктивКлассификатор.Заголовок = "Классификатор в выбранном элементе WBS не указан.";
		Иначе
			Элементы.КонструктивКлассификатор.Заголовок = "Отбор по: " + Классификатор + " (" + ТипЗнч(Классификатор) + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.КонструктивКлассификатор.Видимость = КонструктивВыбран;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнойОтбор()
	
	// Проект, Конструктив, Исполнитель
	Если Элементы.ГруппаСтраницы.Видимость Тогда
		Для Каждого КЗ Из СоответствиеСтраницаТаблица Цикл
			Для Каждого ИмяТаблицы Из КЗ.Значение Цикл
				ИдентификаторНастройки = ЭтаФорма[ИмяТаблицы].КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
				ОтборКомпоновки = ЭтаФорма[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
				Если ОтборКомпоновки = Неопределено Тогда
					Сообщить("Ошибка автоматической установки отбора для ТЧ " + ИмяТаблицы);
				Иначе
					УстановитьОтбор(ОтборКомпоновки.Элементы, Объект.Проект, Объект.Конструктив, Объект.Исполнитель);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДетальныйОтборАктивнойТаблицы()
	
	Если Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено
		Или Элементы.РаботыПланФакт.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	ТекКлюч = ?(ДетальныйОтборПоСтроке, Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки, Неопределено);
	
	Для Каждого ИмяТаблицы Из СоответствиеСтраницаТаблица[ТекСтраница] Цикл
		ИдентификаторНастройки = ЭтаФорма[ИмяТаблицы].КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
		ОтборКомпоновки = ЭтаФорма[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		Если Не ОтборКомпоновки = Неопределено Тогда
			УстановитьОтбор(ОтборКомпоновки.Элементы,,,, ТекКолонкаПериодНачало, ТекКолонкаПериодКонец, ТекКлюч);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(ЭлементыОтбора, Проект = Неопределено, Конструктив = Неопределено, Исполнитель = Неопределено,
	Дата1 = Неопределено, Дата2 = Неопределено, КлючСтроки = Неопределено)
	
	Если Проект = Неопределено Тогда
		
		// дата
		Если Не ЭлементыОтбора[4].ПравоеЗначение = Дата1 Тогда
			ЭлементыОтбора[4].ПравоеЗначение = Дата1;
		КонецЕсли;
		
		Если Не ЭлементыОтбора[5].ПравоеЗначение = Дата2 Тогда
			ЭлементыОтбора[5].ПравоеЗначение = Дата2;
		КонецЕсли;
		
		// ключ
		Если КлючСтроки = Неопределено И ЭлементыОтбора[6].Использование Тогда
			ЭлементыОтбора[6].Использование = Ложь;
		ИначеЕсли Не КлючСтроки = Неопределено Тогда
			Если Не ЭлементыОтбора[6].ПравоеЗначение = КлючСтроки Тогда
				ЭлементыОтбора[6].ПравоеЗначение = КлючСтроки;
			КонецЕсли;
			Если Не ЭлементыОтбора[6].Использование Тогда
				ЭлементыОтбора[6].Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		// только общий отбор
		Если Не ЭлементыОтбора[1].ПравоеЗначение = Проект Тогда
			ЭлементыОтбора[1].ПравоеЗначение = Проект;
		КонецЕсли;
		//todo
		//Если Не ЭлементыОтбора[2].ПравоеЗначение = Конструктив Тогда
		//	ЭлементыОтбора[2].ПравоеЗначение = Конструктив;
		//КонецЕсли;
		//Если Не ЭлементыОтбора[2].Использование = ЗначениеЗаполнено(Конструктив) Тогда
		//	ЭлементыОтбора[2].Использование = ЗначениеЗаполнено(Конструктив);
		//КонецЕсли;
		Если Не ЭлементыОтбора[3].ПравоеЗначение = Исполнитель Тогда
			ЭлементыОтбора[3].ПравоеЗначение = Исполнитель;
		КонецЕсли;
		Если Не ЭлементыОтбора[3].Использование = ЗначениеЗаполнено(Исполнитель) Тогда
			ЭлементыОтбора[3].Использование = ЗначениеЗаполнено(Исполнитель);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РаботыПланФактВосстановитьТекущуюЯчейку(КлючСтроки, ИмяКолонки)
	
	Возврат РаботыПланФактВосстановитьТекущуюКолонку(ИмяКолонки) И РаботыПланФактВосстановитьТекущуюСтроку(КлючСтроки);
	
КонецФункции

// восстановление строки, которая была активна до записи/чтения
&НаКлиенте
Функция РаботыПланФактВосстановитьТекущуюСтроку(КлючСтроки)
	
	Если КлючСтроки = Неопределено Тогда
		Возврат Истина;
		
	ИначеЕсли Элементы.РаботыПланФакт.ТекущаяСтрока = Неопределено
		Или Не Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки = КлючСтроки Тогда
		
		СтруктураПоискКС.КлючСтроки = КлючСтроки;
		мСтроки = Работы.НайтиСтроки(СтруктураПоискКС);
		
		Если мСтроки.Количество() > 0 Тогда
			Элементы.РаботыПланФакт.ТекущаяСтрока = мСтроки[0].ПолучитьИдентификатор();
			Если Элементы.РаботыПланФакт.ТекущиеДанные.КлючСтроки = КлючСтроки Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("После операции записи/чтения не удалось восстановить активную строку. Операция отменена.");
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// восстановление колонки, которая была активна до записи
&НаКлиенте
Функция РаботыПланФактВосстановитьТекущуюКолонку(ИмяКолонки)
	
	Если ИмяКолонки = Неопределено Тогда
		Возврат Истина;
		
	ИначеЕсли Элементы.РаботыПланФакт.ТекущийЭлемент = Неопределено
		Или Не Элементы.РаботыПланФакт.ТекущийЭлемент.Имя = ИмяКолонки Тогда
		
		ПолеФормы = Элементы.Найти(ИмяКолонки);
		Если Не ПолеФормы = Неопределено Тогда
			Элементы.РаботыПланФакт.ТекущийЭлемент = ПолеФормы;
			Если Элементы.РаботыПланФакт.ТекущийЭлемент.Имя = ИмяКолонки Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("После операции записи/чтения не удалось восстановить активную колонку. Операция отменена.");
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПериодКолонкиКэширование(ИмяКолонки)
	
	Если ДетальныйОтборПоСтолбцу И Лев(ИмяКолонки, 1) = "_" Тогда
		Попытка
			ТекКолонкаПериодНачало = Макс(Объект.НачалоПериода, Дата(Сред(ИмяКолонки, 5, 8) + "000000"));
		Исключение
			ТекКолонкаПериодНачало = Объект.НачалоПериода;
		КонецПопытки;
		ТекКолонкаПериодКонец = Мин(Объект.КонецПериода,
			НачалоДня(ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ТекКолонкаПериодНачало, Объект.Периодичность)));
	Иначе
		ТекКолонкаПериодНачало = Объект.НачалоПериода;
		ТекКолонкаПериодКонец = Объект.КонецПериода;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПоСменам()
	
	ЭтаФорма.ПоСменам = ПолучитьРеквизитСервер(Объект.Проект, "ИНАГРО_ПланированиеПоСменам");
	
	Если ЭтаФорма.ПоСменам Тогда
		ЭтаФорма.СменыПроекта.ЗагрузитьЗначения(ПолучитьСменыПроекта(Объект.Проект));
	Иначе
		ЭтаФорма.СменыПроекта.Очистить();
		ЭтаФорма.СменыПроекта.Добавить(ПредопределенноеЗначение("Справочник.ИНАГРО_Смены.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСервер(СпрСсылка, РеквизитИмя)
	
	Значение = Неопределено;
	
	Попытка
		Значение = СпрСсылка[РеквизитИмя];
	Исключение
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВерсиюПроектаНаСервере(ПроектСсылка)
	
	Возврат Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(ПроектСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивЗадействованныхИсполнителейСервер(ПроектСсылка)
	
	ЗапросЗадействованных = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаспределениеРабот.Контрагент КАК Ссылка
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаспределениеРабот КАК РаспределениеРабот
	|ГДЕ
	|	РаспределениеРабот.Проект = &Проект
	|	И РаспределениеРабот.ОбъемСубподряда > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаспределениеРабот КАК РаспределениеРабот
	|		ПО (РаспределениеРабот.Подразделение.Ссылка = СтруктураПредприятия.Ссылка
	|				ИЛИ РаспределениеРабот.Подразделение.Родитель = СтруктураПредприятия.Ссылка
	|				ИЛИ РаспределениеРабот.Подразделение.Родитель.Родитель = СтруктураПредприятия.Ссылка)
	|ГДЕ
	|	РаспределениеРабот.Проект = &Проект
	|	И РаспределениеРабот.ОбъемСобственный > 0");
	ЗапросЗадействованных.УстановитьПараметр("Проект", ПроектСсылка);
	Возврат ЗапросЗадействованных.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивЗадействованныхКонструктивовСервер(ПроектСсылка)
	
	ЗапросЗадействованных = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УГПРРаботы.Конструктив КАК Ссылка
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК УГПРРаботы
	|ГДЕ
	|	УГПРРаботы.ЭтоРабота
	|	И УГПРРаботы.Проект = &Проект");
	ЗапросЗадействованных.УстановитьПараметр("Проект", ПроектСсылка);
	
	Возврат ЗапросЗадействованных.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивЗадействованныхСкладовСервер(ПроектСсылка) //было мПодразделение
	
	ЗапросСклады = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ИНАГРО_Проект = &Проект");
	//ЗапросСклады.УстановитьПараметр("мПодразделение", мПодразделение);
	ЗапросСклады.УстановитьПараметр("Проект", ПроектСсылка);
	Возврат ЗапросСклады.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОткрыватьЗавершенныеРаботыСервер()
	
	Возврат ПравоДоступа("ОтменаПроведения", Метаданные.Документы.ИНАГРО_УчетВыполненныхОбъемовРабот);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидРаботСтрокойИерархияСервер(ВерсияПроекта, КлючСтроки, ЗапросУГПР = Неопределено, Путь = Неопределено)
	
	Если ЗапросУГПР = Неопределено Тогда
		ЗапросУГПР = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИНАГРО_УГПРРаботы.ВидРаботы,
		|	ИНАГРО_УГПРРаботы.КлючСвязи
		|ИЗ
		|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
		|ГДЕ
		|	ИНАГРО_УГПРРаботы.Версия = &Версия
		|	И ИНАГРО_УГПРРаботы.КлючСтроки = &КлючСтроки");
		ЗапросУГПР.УстановитьПараметр("Версия", ВерсияПроекта);
	КонецЕсли;
	
	Если Путь = Неопределено Тогда
		Путь = "";
	КонецЕсли;
	
	ЗапросУГПР.УстановитьПараметр("КлючСтроки", КлючСтроки);
	
	ВыборкаУГПР = ЗапросУГПР.Выполнить().Выбрать();
	
	Если ВыборкаУГПР.Следующий() Тогда
		Путь = Строка(ВыборкаУГПР.ВидРаботы) + ?(Путь = "", "", " / ") + Путь;
		ПолучитьВидРаботСтрокойИерархияСервер(ВерсияПроекта, ВыборкаУГПР.КлючСвязи, ЗапросУГПР, Путь);
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСменыПроекта(ПроектСсылка)
	
	Возврат ПроектСсылка.ИНАГРО_СменыПланирования.ВыгрузитьКолонку("Смена");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлассификаторКонструктиваСервер(КонструктивСсылка)
	
	Если ЗначениеЗаполнено(КонструктивСсылка) Тогда
		
		Если ЗначениеЗаполнено(КонструктивСсылка.ОбъектПроекта) Тогда
			Возврат КонструктивСсылка.ОбъектПроекта;
		ИначеЕсли ЗначениеЗаполнено(КонструктивСсылка.Конструктив) Тогда
			Возврат КонструктивСсылка.Конструктив;
		ИначеЕсли ЗначениеЗаполнено(КонструктивСсылка.ЭлементОбъекта) Тогда
			Возврат КонструктивСсылка.ЭлементОбъекта;
		ИначеЕсли ЗначениеЗаполнено(КонструктивСсылка.ЭлементОбъекта2) Тогда
			Возврат КонструктивСсылка.ЭлементОбъекта2;
		ИначеЕсли ЗначениеЗаполнено(КонструктивСсылка.ПодКонструктив) Тогда
			Возврат КонструктивСсылка.ПодКонструктив;
		ИначеЕсли ЗначениеЗаполнено(КонструктивСсылка.ПодКонструктив2) Тогда
			Возврат КонструктивСсылка.ПодКонструктив2;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РаботыПланФактСформироватьДокументОПСервер(Параметры, идТекСтрока = Неопределено, РезультатЗаполнения = "")
	
	КлючСтрокиВидРабот = Неопределено;
	Если Не идТекСтрока = Неопределено Тогда
		ТекСтрока = Работы.НайтиПоИдентификатору(идТекСтрока);
		Если Не ТекСтрока = Неопределено Тогда
			КлючСтрокиВидРабот = ТекСтрока.КлючСтроки;
		КонецЕсли;
	КонецЕсли;
	
	тзРаботыОП = Документы.ИНАГРО_ОперативноеПланированиеРабот.ПолучитьТаблицуДляЗаполнения(Параметры, РезультатЗаполнения, КлючСтрокиВидРабот);
	ДокПроведен = Ложь;
	
	Если тзРаботыОП.Количество() > 0 Тогда
		
		ДокЗаписать = Документы.ИНАГРО_ОперативноеПланированиеРабот.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект);
		ДокЗаписать.Ответственный = Пользователи.ТекущийПользователь();
		ДокЗаписать.Конструктив = Объект.Конструктив;
		ДокЗаписать.Комментарий = "АРМ";
		ДокЗаписать.Работы.Загрузить(тзРаботыОП);
		ДокЗаписать.Дата = ТекущаяДатаСеанса();
		ДокЗаписать.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		ДокПроведен = ДокЗаписать.Проведен;
		
	КонецЕсли;
	
	Возврат ДокПроведен;
	
КонецФункции

&НаСервере
Процедура ПланированиеРесурсовСформироватьДокументСервер(ПараметрыОтбора, КлючСтроки, ГруппаРесурсов)
	
	тзРесурсы = Неопределено;
	
	ОтборАРМ = Новый Структура;
	Если Не КлючСтроки = Неопределено Тогда
		ОтборАРМ.Вставить("КлючСтроки", КлючСтроки);
	КонецЕсли;
	
	Если ГруппаРесурсов = "ТР" Тогда
		тзРесурсы = Документы.ИНАГРО_НазначениеИсполнителейНаРаботы.ПолучитьТаблицуДляЗаполненияРесурсов(ПараметрыОтбора,, ОтборАРМ);
	ИначеЕсли ГруппаРесурсов = "ММ" Тогда
		тзРесурсы = Документы.ИНАГРО_НазначениеИсполнителейНаРаботы.ПолучитьТаблицуДляЗаполненияРесурсов(ПараметрыОтбора,, ОтборАРМ, "МашиныИМеханизмы");
	КонецЕсли;
	Если Не тзРесурсы = Неопределено И тзРесурсы.Количество() > 0 Тогда
		Ошибка = Ложь;
		ДокЗаписать = РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("НИ",, Ошибка);
		Если Не Ошибка И Не ДокЗаписать = Неопределено Тогда
			Для Каждого Стр Из тзРесурсы Цикл
				НС = Неопределено;
				Если ГруппаРесурсов = "ТР" Тогда
					НС = ДокЗаписать.ТрудовыеРесурсы.Добавить();
				ИначеЕсли ГруппаРесурсов = "ММ" Тогда
					НС = ДокЗаписать.МашиныИМеханизмы.Добавить();
				КонецЕсли;
				Если Не НС = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НС, Стр);
				КонецЕсли;
			КонецЦикла;
			ДокЗаписать.Дата = ТекущаяДатаСеанса();
			ДокЗаписать.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Если ГруппаРесурсов = "ТР" Тогда
				Элементы.тчПланированиеТР.Обновить();
			ИначеЕсли ГруппаРесурсов = "ММ" Тогда
				Элементы.тчПланированиеММ.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасходМатериаловСформироватьДокументСервер(ДопПараметры, ДанныеФормы, ТекстОшибки = "")
	
	тзМатериалы = Документы.ИНАГРО_РасходМатериалов.ПолучитьТаблицуРесурсыМатериалы(Объект, ДопПараметры, ТекстОшибки);
	
	Если тзМатериалы.Количество() > 0 Тогда
		
		Ошибка = Ложь;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("РМ",, Ошибка, ДопПараметры, ДанныеФормы, Истина);
		
		Если Не Ошибка И Не ДанныеФормы = Неопределено Тогда
			
			Для Каждого Стр Из тзМатериалы Цикл
				ЗаполнитьЗначенияСвойств(ДанныеФормы.РесурсыМатериалы.Добавить(), Стр);
			КонецЦикла;
			
			ДанныеФормы.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчетТРСформироватьДокументСервер(ДопПараметры, ДанныеФормы, ТекстОшибки = "")
	
	тзДолжности = Документы.ИНАГРО_УчетРаботыСотрудниковИТехники.ПолучитьТаблицуДолжностиПоНазначению(Объект, ДопПараметры, ТекстОшибки);
	
	Если тзДолжности.Количество() > 0 Тогда
		
		Ошибка = Ложь;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ДТ",, Ошибка,, ДанныеФормы, Истина);
		
		Если Не Ошибка И Не ДанныеФормы = Неопределено Тогда
			
			Для Каждого Стр Из тзДолжности Цикл
				ЗаполнитьЗначенияСвойств(ДанныеФормы.Должности.Добавить(), Стр);
			КонецЦикла;
			
			ДанныеФормы.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчетММСформироватьДокументСервер(ДопПараметры, ДанныеФормы, ТекстОшибки = "")
	
	тзМашины = Документы.ИНАГРО_УчетРаботыСотрудниковИТехники.ПолучитьТаблицуМашиныПоНазначению(Объект, ДопПараметры, ТекстОшибки);
	
	Если тзМашины.Количество() > 0 Тогда
		
		Ошибка = Ложь;
		РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ДТ",, Ошибка, ДопПараметры, ДанныеФормы, Истина);
		
		Если Не Ошибка И Не ДанныеФормы = Неопределено Тогда
			
			Для Каждого Стр Из тзМашины Цикл
				Сч = 0;
				Пока Сч < Стр.Количество Цикл
					Сч = Сч + 1;
					ЗаполнитьЗначенияСвойств(ДанныеФормы.МашиныМеханизмы.Добавить(), Стр);
				КонецЦикла;
			КонецЦикла;
			
			ДанныеФормы.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РаботыПланФактПроверитьОграниченияСервер(КлючСтроки, ТекПериод, ОбъемФД1, ОбъемФД0)
	
	мСообщения = Новый Массив;
	
	ОбъемыДоСейчас = Документы.ИНАГРО_УчетВыполненныхОбъемовРабот.ПолучитьОбъемыПоВидуРабот(Объект.Версия, КлючСтроки,, ТекПериод);
	
	Если ОбъемыДоСейчас.Свойство("ОбъемУГПР") Тогда
		
		Если ОбъемФД1 - ОбъемФД0 > ОбъемыДоСейчас.ОбъемУГПР - ОбъемыДоСейчас.ОбъемВыполнено Тогда
			мСообщения.Добавить("Введенный объем: " + ОбъемФД1 + " превышает объем по ЖЦП! Общий объем работ: " + ОбъемыДоСейчас.ОбъемУГПР + ", уже выполнено: " + ОбъемыДоСейчас.ОбъемВыполнено
			+ Символы.ПС + "Укажите причину отклонения!");
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не Объект.Сценарий.Пустая() Тогда
		
		ОбъемыТекГод = Документы.ИНАГРО_УчетВыполненныхОбъемовРабот.ПолучитьОбъемыПоВидуРабот(Объект.Версия, КлючСтроки, НачалоГода(ТекПериод), КонецГода(ТекПериод),, Объект.Сценарий);
		
		Если ОбъемыДоСейчас.Свойство("ОбъемУГПР") И ОбъемыТекГод.Свойство("ОбъемРасценка") Тогда
			
			Если ОбъемФД1 - ОбъемФД0 > ОбъемыТекГод.ОбъемРасценка - ОбъемыТекГод.ОбъемВыполнено Тогда
				мСообщения.Добавить("Введенный объем: " + ОбъемФД1 + " превышает объем на текущий год (по расценке)! План: " + ОбъемыТекГод.ОбъемРасценка + ", уже выполнено: " + ОбъемыТекГод.ОбъемВыполнено
				+ Символы.ПС + "Укажите причину отклонения!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат мСообщения;
	
КонецФункции

#КонецОбласти

#Область Загрузка_Основной_Таблицы

&НаКлиенте
Процедура РаботыПланФактЗагрузить()
	
	РаботыПланФакт_ЗагрузитьСервер();
	РасчитатьКолонкиИтоговВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКолонкиИтоговВТаблице()
	
	Для Каждого Стр Из Работы Цикл
		ПроверитьРасчитатьКолонкиИтоговВСтроке(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРасчитатьКолонкиИтоговВСтроке(ТекСтрока, ТекПлан = Неопределено, ТекПериод = Неопределено)
	
	//ТекСтрока = Работы.НайтиПоИдентификатору(ИдСтроки);
	
	//ОП_Итого = 0;
	ФД_Итого = 0;
	ОПФД_Итого = 0;
	ИмяОП = "_ОП1";
	ИмяФД = "_ФД1";
	ИмяПО = "_ПО1";
	Для Каждого Период Из тзВсеПериоды Цикл
		Сч = 0;
		Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
			СтрДатаСмена = Период.Суффикс + "_" + Сч;
			Если Не ТекПериод = СтрДатаСмена Тогда
				ОП = ТекСтрока[ИмяОП + СтрДатаСмена];
				ФД = ТекСтрока[ИмяФД + СтрДатаСмена];
				ЕстьПричина = ЗначениеЗаполнено(ТекСтрока[ИмяПО + СтрДатаСмена]);
				//ОП_Итого = ОП_Итого + ОП;
				ФД_Итого = ФД_Итого + ФД;
				ОПФД_Итого = ОПФД_Итого + ?(ФД > 0 Или ЕстьПричина, ФД, ОП);
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
	Если ТекПлан = ИмяОП Тогда
		ОП = ТекСтрока[ИмяОП + ТекПериод];
		ФД = ТекСтрока[ИмяФД + ТекПериод];
		ЕстьПричина = ЗначениеЗаполнено(ТекСтрока[ИмяПО + ТекПериод]);
		ОПФД_Итого = ОПФД_Итого + ФД;
		ФД_Итого = ФД_Итого + ФД;
		ОП = Мин(ОП, ТекСтрока.ОПОбщий - ОПФД_Итого);
		//ОП_Итого = ОП_Итого + ОП;
		ОПФД_Итого = ОПФД_Итого + ?(ФД = 0 И Не ЕстьПричина, ОП, 0);
		ТекСтрока[ИмяОП + ТекПериод] = ОП;
	ИначеЕсли ТекПлан = ИмяФД Или ТекПлан = ИмяПО Тогда
		ОП = ТекСтрока[ИмяОП + ТекПериод];
		ФД = ТекСтрока[ИмяФД + ТекПериод];
		ЕстьПричина = ЗначениеЗаполнено(ТекСтрока[ИмяПО + ТекПериод]);
		//ОП_Итого = ОП_Итого + ОП;
		ФД_Итого = ФД_Итого + ФД;
		ОПФД_Итого = ОПФД_Итого + ?(ФД > 0 Или ЕстьПричина, ФД, ОП);
		ТекСтрока[ИмяОП + ТекПериод] = ОП;
		ТекСтрока[ИмяФД + ТекПериод] = ФД;
	КонецЕсли;
	
//	ТекСтрока.ОПОбщий = ОП_Итого;
	ТекСтрока.ОППланФакт = ОПФД_Итого;
	ТекСтрока.ФДОбщий = ФД_Итого + ТекСтрока.КПФактНачало;
	ТекСтрока.ФДПланФакт = ФД_Итого;
	ТекСтрока.ОПОстаток = ТекСтрока.ОПОбщий - ОПФД_Итого;
	ТекСтрока.ФДОстаток = ТекСтрока.ОПОбщий - ФД_Итого;
	
КонецПроцедуры

&НаСервере
Процедура РаботыПланФакт_ЗагрузитьСервер()
	
	НачалоПериодаПериодичность = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(Объект.НачалоПериода, Объект.Периодичность);
	КонецПериодаПериодичность = НачалоДня(ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(Объект.КонецПериода, Объект.Периодичность));
	//ДатаСрезаРаспределение = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(Объект.НачалоПериода, Объект.Периодичность);
	
	ЗапросОперПлан = Новый Запрос("ВЫБРАТЬ
	                              |	УГПР_Работы.Проект КАК Проект,
	                              |	УГПР_Работы.Версия КАК Версия,
	                              |	УГПР_Работы.КлючСтроки КАК КлючСтроки,
	                              |	СУММА(УГПР_Работы.Объем) КАК Объем,
	                              |	МИНИМУМ(УГПР_Работы.НомерВСтруктуре) КАК НомерВСтруктуре,
	                              |	УГПР_Работы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                              |	УГПР_Работы.Конструктив КАК Конструктив,
	                              |	УГПР_Работы.ВидРаботы КАК ВидРаботы,
	                              |	УГПР_Работы.КлючСвязи КАК КлючСвязи,
	                              |	ВЫБОР
	                              |		КОГДА УГПР_Работы.Регистратор ССЫЛКА Документ.ИНАГРО_РаспределительнаяВедомость
	                              |				И УГПР_Работы.Объем > 0
	                              |			ТОГДА УГПР_Работы.КлючИсходнойРаботы
	                              |		ИНАЧЕ УГПР_Работы.КлючСтроки
	                              |	КОНЕЦ КАК КлючСвязиПериодВыполнения
	                              |ПОМЕСТИТЬ втУГПР_Работы
	                              |ИЗ
	                              |	РегистрСведений.ИНАГРО_УГПРРаботы КАК УГПР_Работы
	                              |ГДЕ
	                              |	УГПР_Работы.Версия = &Версия
	                              |	И УГПР_Работы.ЭтоРабота
	                              |	И (&ВсеКонструктивы
	                              |			ИЛИ УГПР_Работы.КлючСвязи В (&мКлючСвязи))
	                              |	И (&ВсеКонструктивы2
	                              |			ИЛИ УГПР_Работы.КлючСвязи В (&мКлючСвязи2))
	                              |	И УГПР_Работы.Проект = &Проект
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	УГПР_Работы.КлючСтроки,
	                              |	УГПР_Работы.ЕдиницаИзмерения,
	                              |	УГПР_Работы.Конструктив,
	                              |	УГПР_Работы.ВидРаботы,
	                              |	УГПР_Работы.КлючСвязи,
	                              |	УГПР_Работы.Проект,
	                              |	УГПР_Работы.Версия,
	                              |	ВЫБОР
	                              |		КОГДА УГПР_Работы.Регистратор ССЫЛКА Документ.ИНАГРО_РаспределительнаяВедомость
	                              |				И УГПР_Работы.Объем > 0
	                              |			ТОГДА УГПР_Работы.КлючИсходнойРаботы
	                              |		ИНАЧЕ УГПР_Работы.КлючСтроки
	                              |	КОНЕЦ
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	УГПР_Работы.КлючСтроки КАК КлючСтроки,
	                              |	УГПР_Работы.НомерВСтруктуре КАК НомерВСтруктуре,
	                              |	УГПР_Работы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                              |	УГПР_Работы.Конструктив КАК Конструктив,
	                              |	УГПР_Работы.Проект КАК Проект,
	                              |	УГПР_Работы.ВидРаботы КАК ВидРаботы,
	                              |	УГПР_Работы.КлючСвязи КАК КлючСвязи,
	                              |	УГПР_Работы.Объем КАК ОбъемОбщий,
	                              |	ВЫБОР
	                              |		КОГДА РаспределениеРаботСП.ОбъемСобственный > 0
	                              |			ТОГДА РаспределениеРаботСП.Подразделение
	                              |		ИНАЧЕ РаспределениеРаботСП.Контрагент
	                              |	КОНЕЦ КАК Исполнитель,
	                              |	УГПР_Работы.КлючСвязиПериодВыполнения КАК КлючСвязиПериодВыполнения,
	                              |	РаспределениеРаботСП.ТипСубподряда КАК ТипСубподряда
	                              |ПОМЕСТИТЬ втРаботыРаспределение
	                              |ИЗ
	                              |	втУГПР_Работы КАК УГПР_Работы
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаспределениеРабот.СрезПоследних(
	                              |				,
	                              |				&Исполнитель = НЕОПРЕДЕЛЕНО
	                              |					ИЛИ Подразделение В ИЕРАРХИИ (&Исполнитель)
	                              |					ИЛИ Контрагент = &Исполнитель) КАК РаспределениеРаботСП
	                              |		ПО УГПР_Работы.Проект = РаспределениеРаботСП.Проект
	                              |			И УГПР_Работы.КлючСтроки = РаспределениеРаботСП.КлючСтроки
	                              |			И УГПР_Работы.Версия = РаспределениеРаботСП.Версия
	                              |ГДЕ
	                              |	(&Субподряд = 0
	                              |			ИЛИ &Субподряд = 1
	                              |				И РаспределениеРаботСП.ОбъемСубподряда > 0
	                              |			ИЛИ &Субподряд = 2
	                              |				И РаспределениеРаботСП.ОбъемСобственный > 0)
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РаботыРаспределение.КлючСтроки КАК КлючСтроки,
	                              |	РаботыРаспределение.КлючСвязи КАК КлючСвязи,
	                              |	РаботыРаспределение.Проект КАК Проект,
	                              |	РаботыРаспределение.ВидРаботы.ШифрПозицииНорматива КАК ВидРаботыШифрПозицииНорматива,
	                              |	РаботыРаспределение.НомерВСтруктуре КАК НомерВСтруктуре,
	                              |	РаботыРаспределение.Конструктив КАК Конструктив,
	                              |	РаботыРаспределение.ВидРаботы КАК ВидРаботы,
	                              |	РаботыРаспределение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                              |	РаботыРаспределение.Исполнитель КАК Исполнитель,
	                              |	МИНИМУМ(РаботыПериоды.НачалоРаботыПлан) КАК НачалоРаботыПлан,
	                              |	МАКСИМУМ(РаботыПериоды.КонецРаботыПлан) КАК КонецРаботыПлан,
	                              |	РаботыРаспределение.ОбъемОбщий КАК ОбъемОбщий,
	                              |	РаботыРаспределение.КлючСвязиПериодВыполнения КАК КлючСвязиПериодВыполнения,
	                              |	РаботыРаспределение.ТипСубподряда КАК ТипСубподряда
	                              |ПОМЕСТИТЬ втРаботыПР
	                              |ИЗ
	                              |	втРаботыРаспределение КАК РаботыРаспределение
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРПараметрыВыполненияРабот КАК РаботыПериоды
	                              |		ПО РаботыРаспределение.КлючСвязиПериодВыполнения = РаботыПериоды.КлючСтроки
	                              |			И (РаботыПериоды.Версия = &Версия)
	                              |ГДЕ
	                              |	РаботыПериоды.НачалоРаботыПлан <= &КонецПериода
	                              |	И РаботыПериоды.КонецРаботыПлан >= &НачалоПериода
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	РаботыРаспределение.КлючСтроки,
	                              |	РаботыРаспределение.Конструктив,
	                              |	РаботыРаспределение.ВидРаботы,
	                              |	РаботыРаспределение.КлючСвязи,
	                              |	РаботыРаспределение.НомерВСтруктуре,
	                              |	РаботыРаспределение.ЕдиницаИзмерения,
	                              |	РаботыРаспределение.Исполнитель,
	                              |	РаботыРаспределение.Проект,
	                              |	РаботыРаспределение.ВидРаботы.ШифрПозицииНорматива,
	                              |	РаботыРаспределение.ОбъемОбщий,
	                              |	РаботыРаспределение.КлючСвязиПериодВыполнения,
	                              |	РаботыРаспределение.ТипСубподряда
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	УГПРПараметрыВыполненияРабот2.КлючСтроки КАК КлючСтроки,
	                              |	СУММА(УГПРПараметрыВыполненияРабот2.ОбъемРаботы) КАК ОбъемРаботы
	                              |ПОМЕСТИТЬ втОбщийОбъемРаботы
	                              |ИЗ
	                              |	РегистрСведений.ИНАГРО_УГПРПараметрыВыполненияРабот КАК УГПРПараметрыВыполненияРабот2
	                              |ГДЕ
	                              |	УГПРПараметрыВыполненияРабот2.Версия = &Версия
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	УГПРПараметрыВыполненияРабот2.КлючСтроки
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	УГПРПараметрыВыполненияРабот1.КлючСтроки КАК КлючСтроки,
	                              |	СУММА(УГПРПараметрыВыполненияРабот1.ОбъемРаботы) КАК ОбъемРаботы,
	                              |	ОбщийОбъемРаботы.ОбъемРаботы КАК ОбъемРаботыВсего
	                              |ПОМЕСТИТЬ втОбъемЗаПериод
	                              |ИЗ
	                              |	РегистрСведений.ИНАГРО_УГПРПараметрыВыполненияРабот КАК УГПРПараметрыВыполненияРабот1
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбщийОбъемРаботы КАК ОбщийОбъемРаботы
	                              |		ПО УГПРПараметрыВыполненияРабот1.КлючСтроки = ОбщийОбъемРаботы.КлючСтроки
	                              |ГДЕ
	                              |	УГПРПараметрыВыполненияРабот1.Версия = &Версия
	                              |	И УГПРПараметрыВыполненияРабот1.НачалоРаботыПлан <= &КонецПериода
	                              |	И УГПРПараметрыВыполненияРабот1.КонецРаботыПлан >= &НачалоПериода
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	УГПРПараметрыВыполненияРабот1.КлючСтроки,
	                              |	ОбщийОбъемРаботы.ОбъемРаботы
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	УчетВыполненныхРаботОбороты.КлючСтроки КАК КлючСтроки,
	                              |	СУММА(УчетВыполненныхРаботОбороты.ОбъемРаботыОборот) КАК ОбъемРаботы
	                              |ПОМЕСТИТЬ втВыполненныеРаботы
	                              |ИЗ
	                              |	РегистрНакопления.ИНАГРО_УчетВыполненныхРабот.Обороты(, &НачалоПериода0, Регистратор, Проект = &Проект) КАК УчетВыполненныхРаботОбороты
	                              |ГДЕ
	                              |	ВЫБОР
	                              |			КОГДА УчетВыполненныхРаботОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеализацияСтроительныхРаботВнутренняя
	                              |				ТОГДА УчетВыполненныхРаботОбороты.Регистратор.Дата <= &НачалоПериода0
	                              |			КОГДА УчетВыполненныхРаботОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_УчетВыполненныхОбъемовРабот
	                              |				ТОГДА УчетВыполненныхРаботОбороты.Регистратор.НачалоПериода < &НачалоПериода0
	                              |		КОНЕЦ
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	УчетВыполненныхРаботОбороты.КлючСтроки
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	РаботыПР.КлючСтроки КАК КлючСтроки,
	                              |	РаботыПР.КлючСвязи КАК КлючСвязи,
	                              |	РаботыПР.ВидРаботы.ШифрПозицииНорматива КАК ШифрПозицииНорматива,
	                              |	РаботыПР.НомерВСтруктуре КАК НомерВСтруктуре,
	                              |	РаботыПР.Конструктив КАК Конструктив,
	                              |	РаботыПР.ВидРаботы КАК ВидРаботы,
	                              |	РаботыПР.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                              |	РаботыПР.Исполнитель КАК Исполнитель,
	                              |	РаботыПР.ТипСубподряда КАК ТипСубподряда,
	                              |	РаботыПР.НачалоРаботыПлан КАК НачалоРаботы,
	                              |	РаботыПР.КонецРаботыПлан КАК ОкончаниеРаботы,
	                              |	НЕ ЗавершенныеРаботы.КлючСтроки ЕСТЬ NULL КАК Завершена,
	                              |	РаботыПР.ОбъемОбщий КАК КПОбщий,
	                              |	ЕСТЬNULL(ВыполненныеРаботы.ОбъемРаботы, 0) КАК КПФактНачало,
	                              |	РаботыПР.ОбъемОбщий - ЕСТЬNULL(ВыполненныеРаботы.ОбъемРаботы, 0) КАК КПОстаток,
	                              |	ВЫБОР
	                              |		КОГДА ОбъемЗаПериод.ОбъемРаботы = ОбъемЗаПериод.ОбъемРаботыВсего
	                              |			ТОГДА РаботыПР.ОбъемОбщий
	                              |		ИНАЧЕ ВЫРАЗИТЬ(РаботыПР.ОбъемОбщий * ОбъемЗаПериод.ОбъемРаботы / ОбъемЗаПериод.ОбъемРаботыВсего КАК ЧИСЛО(18, 6))
	                              |	КОНЕЦ КАК ОПОбщий,
	                              |	0 КАК ОППланФакт,
	                              |	0 КАК ОПОстаток,
	                              |	0 КАК ФДОбщий,
	                              |	0 КАК ФДПланФакт,
	                              |	0 КАК ФДОстаток,
	                              |	РаботыПР.КлючСвязиПериодВыполнения КАК КлючСвязиПериод,
	                              |	ОбъемЗаПериод.ОбъемРаботыВсего КАК ОбъемРаботыВсего
	                              |ИЗ
	                              |	втРаботыПР КАК РаботыПР
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ЗавершенныеРаботы КАК ЗавершенныеРаботы
	                              |		ПО РаботыПР.Проект = ЗавершенныеРаботы.Проект
	                              |			И РаботыПР.КлючСтроки = ЗавершенныеРаботы.КлючСтроки
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъемЗаПериод КАК ОбъемЗаПериод
	                              |		ПО РаботыПР.КлючСвязиПериодВыполнения = ОбъемЗаПериод.КлючСтроки
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ втВыполненныеРаботы КАК ВыполненныеРаботы
	                              |		ПО РаботыПР.КлючСтроки = ВыполненныеРаботы.КлючСтроки
	                              |ГДЕ
	                              |	(&ПоказыватьЗавершенные
	                              |			ИЛИ ЗавершенныеРаботы.КлючСтроки ЕСТЬ NULL)
	                              |	И РаботыПР.ОбъемОбщий > 0
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	НачалоРаботы,
	                              |	ОкончаниеРаботы,
	                              |	НомерВСтруктуре,
	                              |	Исполнитель");
	
	ЗапросОперПлан.УстановитьПараметр("Проект", Объект.Проект);
	ЗапросОперПлан.УстановитьПараметр("Версия", Объект.Версия);
	ЗапросОперПлан.УстановитьПараметр("НачалоПериода0", НачалоПериодаПериодичность);
	ЗапросОперПлан.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	ЗапросОперПлан.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	//ЗапросОперПлан.УстановитьПараметр("ДатаСрезаРаспределение", ДатаСрезаРаспределение);
	ЗапросОперПлан.УстановитьПараметр("Субподряд", Объект.Субподряд);
	ЗапросОперПлан.УстановитьПараметр("Исполнитель", ?(ЗначениеЗаполнено(Объект.Исполнитель), Объект.Исполнитель, Неопределено));
	ЗапросОперПлан.УстановитьПараметр("ПоказыватьЗавершенные", Объект.ПоказыватьЗавершенные);
	
	Если ЗначениеЗаполнено(Объект.Конструктив) Тогда
		мКонструктивы = ИНАГРО_УСПОбщиеФункцииКлиентСервер.ПолучитьКонструктивыПроектаКлассификатор(Объект.Версия, Объект.Конструктив);
		ЗапросОперПлан.УстановитьПараметр("ВсеКонструктивы", Ложь);
		ЗапросОперПлан.УстановитьПараметр("мКлючСвязи", мКонструктивы);
	Иначе
		ЗапросОперПлан.УстановитьПараметр("ВсеКонструктивы", Истина);
		ЗапросОперПлан.УстановитьПараметр("мКлючСвязи", Неопределено);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.КонструктивИерархия) Тогда
		мКонструктивы = ИНАГРО_УСПОбщиеФункцииКлиентСервер.ПолучитьКонструктивыПроектаСтруктура(Объект.Версия, Объект.КонструктивИерархия);
		ЗапросОперПлан.УстановитьПараметр("ВсеКонструктивы2", Ложь);
		ЗапросОперПлан.УстановитьПараметр("мКлючСвязи2", мКонструктивы);
	Иначе
		ЗапросОперПлан.УстановитьПараметр("ВсеКонструктивы2", Истина);
		ЗапросОперПлан.УстановитьПараметр("мКлючСвязи2", Неопределено);
	КонецЕсли;
	
	тзОперПлан = ЗапросОперПлан.Выполнить().Выгрузить();
	
	// добавленные работы (док. "Акт Изменения")
	ЗапросДопРаботы = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |	УГПР_Работы.КлючСтроки КАК КлючСтроки,
	                               |	УГПР_Работы.ВидРаботы КАК Конструктив
	                               |ПОМЕСТИТЬ втУГПР_Конструктивы
	                               |ИЗ
	                               |	РегистрСведений.ИНАГРО_УГПРРаботы КАК УГПР_Работы
	                               |ГДЕ
	                               |	УГПР_Работы.Версия = &Версия
	                               |	И НЕ УГПР_Работы.ЭтоРабота
	                               |	И УГПР_Работы.Проект = &Проект
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	ИзмененияВРаботах.Проект КАК Проект,
	                               |	ИзмененияВРаботах.КлючСтроки КАК КлючСтроки,
	                               |	ИзмененияВРаботах.КлючСвязи КАК КлючСвязи,
	                               |	ИСТИНА КАК ЭтоРабота,
	                               |	УГПР_Конструктивы.Конструктив КАК Конструктив,
	                               |	ИзмененияВРаботах.ВидРаботы КАК ВидРаботы,
	                               |	ИзмененияВРаботах.ВидРаботы.ОсновнаяЕдиница КАК ЕдиницаИзмерения,
	                               |	ИзмененияВРаботах.Исполнитель ССЫЛКА Справочник.Контрагенты КАК Субподряд,
	                               |	ИзмененияВРаботах.Исполнитель КАК Исполнитель,
	                               |	ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ТипыСубподряда.ПустаяСсылка) КАК ТипСубподряда,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.НачалоПериода < &НачалоПериода
	                               |			ТОГДА &НачалоПериода
	                               |		ИНАЧЕ ИзмененияВРаботах.НачалоПериода
	                               |	КОНЕЦ КАК НачалоРабот,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.КонецПериода > &КонецПериода
	                               |			ТОГДА &КонецПериода
	                               |		ИНАЧЕ ИзмененияВРаботах.КонецПериода
	                               |	КОНЕЦ КАК КонецРабот,
	                               |	ИзмененияВРаботах.НачалоПериода КАК НачалоРаботПлан,
	                               |	ИзмененияВРаботах.КонецПериода КАК КонецРаботПлан,
	                               |	СУММА(ВЫБОР
	                               |			КОГДА ИзмененияВРаботах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                               |				ТОГДА ИзмененияВРаботах.ОбъемОтклонения
	                               |			ИНАЧЕ -ИзмененияВРаботах.ОбъемОтклонения
	                               |		КОНЕЦ * ВЫБОР
	                               |			КОГДА НАЧАЛОПЕРИОДА(ИзмененияВРаботах.НачалоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ИзмененияВРаботах.КонецПериода, МЕСЯЦ)
	                               |				ТОГДА 1
	                               |			ИНАЧЕ (1 + РАЗНОСТЬДАТ(ВЫБОР
	                               |						КОГДА ИзмененияВРаботах.НачалоПериода < НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	                               |							ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	                               |						ИНАЧЕ ИзмененияВРаботах.НачалоПериода
	                               |					КОНЕЦ, ВЫБОР
	                               |						КОГДА ИзмененияВРаботах.КонецПериода > НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ), ДЕНЬ)
	                               |							ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ), ДЕНЬ)
	                               |						ИНАЧЕ ИзмененияВРаботах.КонецПериода
	                               |					КОНЕЦ, ДЕНЬ)) / (1 + РАЗНОСТЬДАТ(ИзмененияВРаботах.НачалоПериода, ИзмененияВРаботах.КонецПериода, ДЕНЬ))
	                               |		КОНЕЦ) КАК ОбъемРаботы,
	                               |	ИзмененияВРаботах.НомерВСтруктуре КАК НомерВСтруктуре,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                               |			ТОГДА ИзмененияВРаботах.ОбъемОтклонения
	                               |		ИНАЧЕ -ИзмененияВРаботах.ОбъемОтклонения
	                               |	КОНЕЦ КАК КПОбщий
	                               |ПОМЕСТИТЬ втДопРаботы
	                               |ИЗ
	                               |	РегистрНакопления.ИНАГРО_ИзмененияВРаботах КАК ИзмененияВРаботах
	                               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУГПР_Конструктивы КАК УГПР_Конструктивы
	                               |		ПО ИзмененияВРаботах.КлючСвязи = УГПР_Конструктивы.КлючСтроки
	                               |ГДЕ
	                               |	ИзмененияВРаботах.Проект = &Проект
	                               |	И ИзмененияВРаботах.НачалоПериода <= &КонецПериода
	                               |	И ИзмененияВРаботах.КонецПериода >= &НачалоПериода
	                               |	И ИзмененияВРаботах.НоваяРабота = ИСТИНА
	                               |	И ИзмененияВРаботах.Активность = ИСТИНА
	                               |	И (&Исполнитель = НЕОПРЕДЕЛЕНО
	                               |			ИЛИ ИзмененияВРаботах.Исполнитель = &Исполнитель)
	                               |	И (&ВсеКонструктивы
	                               |			ИЛИ ИзмененияВРаботах.КлючСвязи В (&мКлючСвязи))
	                               |	И (&ВсеКонструктивы2
	                               |			ИЛИ ИзмененияВРаботах.КлючСвязи В (&мКлючСвязи2))
	                               |	И НЕ ИзмененияВРаботах.КлючСтроки В
	                               |				(ВЫБРАТЬ
	                               |					УГПР_Работы1.КлючСтроки
	                               |				ИЗ
	                               |					РегистрСведений.ИНАГРО_УГПРРаботы КАК УГПР_Работы1
	                               |				ГДЕ
	                               |					УГПР_Работы1.Версия = &Версия
	                               |					И УГПР_Работы1.ЭтоРабота)
	                               |	И (&Субподряд = 0
	                               |			ИЛИ &Субподряд = 1
	                               |				И ИзмененияВРаботах.Исполнитель ССЫЛКА Справочник.Контрагенты
	                               |			ИЛИ &Субподряд = 2
	                               |				И ИзмененияВРаботах.Исполнитель ССЫЛКА Справочник.СтруктураПредприятия)
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	ИзмененияВРаботах.КлючСтроки,
	                               |	УГПР_Конструктивы.Конструктив,
	                               |	ИзмененияВРаботах.ВидРаботы,
	                               |	ИзмененияВРаботах.ВидРаботы.ОсновнаяЕдиница,
	                               |	ИзмененияВРаботах.Исполнитель,
	                               |	ИзмененияВРаботах.НачалоПериода,
	                               |	ИзмененияВРаботах.КонецПериода,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.НачалоПериода < &НачалоПериода
	                               |			ТОГДА &НачалоПериода
	                               |		ИНАЧЕ ИзмененияВРаботах.НачалоПериода
	                               |	КОНЕЦ,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.КонецПериода > &КонецПериода
	                               |			ТОГДА &КонецПериода
	                               |		ИНАЧЕ ИзмененияВРаботах.КонецПериода
	                               |	КОНЕЦ,
	                               |	ИзмененияВРаботах.Исполнитель ССЫЛКА Справочник.Контрагенты,
	                               |	ИзмененияВРаботах.КлючСвязи,
	                               |	ИзмененияВРаботах.НомерВСтруктуре,
	                               |	ВЫБОР
	                               |		КОГДА ИзмененияВРаботах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                               |			ТОГДА ИзмененияВРаботах.ОбъемОтклонения
	                               |		ИНАЧЕ -ИзмененияВРаботах.ОбъемОтклонения
	                               |	КОНЕЦ,
	                               |	ИзмененияВРаботах.Проект
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	УчетВыполненныхРаботОбороты.КлючСтроки КАК КлючСтроки,
	                               |	СУММА(УчетВыполненныхРаботОбороты.ОбъемРаботыОборот) КАК ОбъемРаботы
	                               |ПОМЕСТИТЬ втВыполненныеРаботы
	                               |ИЗ
	                               |	РегистрНакопления.ИНАГРО_УчетВыполненныхРабот.Обороты(, &НачалоПериода0, Регистратор, Проект = &Проект) КАК УчетВыполненныхРаботОбороты
	                               |ГДЕ
	                               |	ВЫБОР
	                               |			КОГДА УчетВыполненныхРаботОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеализацияСтроительныхРаботВнутренняя
	                               |				ТОГДА УчетВыполненныхРаботОбороты.Регистратор.Дата <= &НачалоПериода0
	                               |			КОГДА УчетВыполненныхРаботОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_УчетВыполненныхОбъемовРабот
	                               |				ТОГДА УчетВыполненныхРаботОбороты.Регистратор.НачалоПериода < &НачалоПериода0
	                               |		КОНЕЦ
	                               |
	                               |СГРУППИРОВАТЬ ПО
	                               |	УчетВыполненныхРаботОбороты.КлючСтроки
	                               |;
	                               |
	                               |////////////////////////////////////////////////////////////////////////////////
	                               |ВЫБРАТЬ
	                               |	ДопРаботы.КлючСтроки,
	                               |	ДопРаботы.КлючСвязи,
	                               |	ДопРаботы.ЭтоРабота,
	                               |	ДопРаботы.НомерВСтруктуре,
	                               |	ДопРаботы.Конструктив,
	                               |	ДопРаботы.ВидРаботы,
	                               |	ДопРаботы.ЕдиницаИзмерения,
	                               |	ДопРаботы.Субподряд,
	                               |	ДопРаботы.Исполнитель,
	                               |	ДопРаботы.ТипСубподряда,
	                               |	ДопРаботы.НачалоРабот КАК Начало,
	                               |	ДопРаботы.КонецРабот КАК Конец,
	                               |	ДопРаботы.НачалоРаботПлан,
	                               |	ДопРаботы.КонецРаботПлан,
	                               |	НЕ ЗавершенныеРаботы.КлючСтроки ЕСТЬ NULL КАК Завершена,
	                               |	ДопРаботы.ОбъемРаботы,
	                               |	ДопРаботы.ОбъемРаботы КАК ОПОбщий,
	                               |	ДопРаботы.КПОбщий,
	                               |	ЕСТЬNULL(ВыполненныеРаботы.ОбъемРаботы, 0) КАК КПФактНачало,
	                               |	ДопРаботы.КПОбщий - ЕСТЬNULL(ВыполненныеРаботы.ОбъемРаботы, 0) КАК КПОстаток
	                               |ИЗ
	                               |	втДопРаботы КАК ДопРаботы
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ЗавершенныеРаботы КАК ЗавершенныеРаботы
	                               |		ПО ДопРаботы.Проект = ЗавершенныеРаботы.Проект
	                               |			И ДопРаботы.КлючСтроки = ЗавершенныеРаботы.КлючСтроки
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ втВыполненныеРаботы КАК ВыполненныеРаботы
	                               |		ПО ДопРаботы.КлючСтроки = ВыполненныеРаботы.КлючСтроки
	                               |ГДЕ
	                               |	(&ПоказыватьЗавершенные
	                               |			ИЛИ ЗавершенныеРаботы.КлючСтроки ЕСТЬ NULL)
	                               |	И ДопРаботы.ОбъемРаботы > 0");
	
	ЗапросДопРаботы.УстановитьПараметр("Проект", Объект.Проект);
	ЗапросДопРаботы.УстановитьПараметр("Версия", Объект.Версия);
	ЗапросДопРаботы.УстановитьПараметр("НачалоПериода0", НачалоПериодаПериодичность);
	ЗапросДопРаботы.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	ЗапросДопРаботы.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	
	Если ЗначениеЗаполнено(Объект.Конструктив) Тогда
		мКонструктивы = ИНАГРО_УСПОбщиеФункцииКлиентСервер.ПолучитьКонструктивыПроектаКлассификатор(Объект.Версия, Объект.Конструктив);
		ЗапросДопРаботы.УстановитьПараметр("ВсеКонструктивы", Ложь);
		ЗапросДопРаботы.УстановитьПараметр("мКлючСвязи", мКонструктивы);
	Иначе
		ЗапросДопРаботы.УстановитьПараметр("ВсеКонструктивы", Истина);
		ЗапросДопРаботы.УстановитьПараметр("мКлючСвязи", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КонструктивИерархия) Тогда
		мКонструктивы = ИНАГРО_УСПОбщиеФункцииКлиентСервер.ПолучитьКонструктивыПроектаСтруктура(Объект.Версия, Объект.КонструктивИерархия);
		ЗапросДопРаботы.УстановитьПараметр("ВсеКонструктивы2", Ложь);
		ЗапросДопРаботы.УстановитьПараметр("мКлючСвязи2", мКонструктивы);
	Иначе
		ЗапросДопРаботы.УстановитьПараметр("ВсеКонструктивы2", Истина);
		ЗапросДопРаботы.УстановитьПараметр("мКлючСвязи2", Неопределено);
	КонецЕсли;
	
	ЗапросДопРаботы.УстановитьПараметр("Исполнитель", ?(ЗначениеЗаполнено(Объект.Исполнитель), Объект.Исполнитель, Неопределено));
	ЗапросДопРаботы.УстановитьПараметр("Субподряд", Объект.Субподряд);
	ЗапросДопРаботы.УстановитьПараметр("ПоказыватьЗавершенные", Объект.ПоказыватьЗавершенные);

	тзДопРаботы = ЗапросДопРаботы.Выполнить().Выгрузить();
	
	Для Каждого Стр Из тзДопРаботы Цикл
		НС = тзОперПлан.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		НС.КлючСвязиПериод = НС.КлючСтроки;
	КонецЦикла;
	
	ЗапросПериоды = Новый Запрос("ВЫБРАТЬ
	|	УГПРПараметрыВыполненияРабот.КлючСтроки КАК КлючСтроки,
	|	УГПРПараметрыВыполненияРабот.НачалоРаботыПлан КАК Начало,
	|	УГПРПараметрыВыполненияРабот.КонецРаботыПлан КАК Конец,
	|	УГПРПараметрыВыполненияРабот.ОбъемРаботы
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРПараметрыВыполненияРабот КАК УГПРПараметрыВыполненияРабот
	|ГДЕ
	|	УГПРПараметрыВыполненияРабот.Версия.Владелец = &Проект
	|	И УГПРПараметрыВыполненияРабот.Версия = &Версия
	|	И УГПРПараметрыВыполненияРабот.НачалоРаботыПлан <= &КонецПериода
	|	И УГПРПараметрыВыполненияРабот.КонецРаботыПлан >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки,
	|	УГПРПараметрыВыполненияРабот.НачалоРаботыПлан,
	|	УГПРПараметрыВыполненияРабот.КонецРаботыПлан");
	
	ЗапросПериоды.УстановитьПараметр("Проект", Объект.Проект);
	ЗапросПериоды.УстановитьПараметр("Версия", Объект.Версия);
	ЗапросПериоды.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	ЗапросПериоды.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	тзПериодыРабот = ЗапросПериоды.Выполнить().Выгрузить();
	
	Для Каждого Стр Из тзДопРаботы Цикл
		ЗаполнитьЗначенияСвойств(тзПериодыРабот.Добавить(), Стр);
	КонецЦикла;
	
	тзПериодыРабот.Индексы.Добавить("КлючСтроки");
	
	ЗапросПланФакт = Новый Запрос("ВЫБРАТЬ
	|	ЕСТЬNULL(РаботыПлан.КлючСтроки, РаботыФакт.КлючСтроки) КАК КлючСтроки,
	|	ЕСТЬNULL(РаботыПлан.Период, РаботыФакт.Период) КАК Период,
	|	ЕСТЬNULL(РаботыПлан.Смена, РаботыФакт.Смена) КАК Смена,
	|	СУММА(ЕСТЬNULL(РаботыПлан.ОбъемРаботы, 0)) КАК План,
	|	СУММА(ЕСТЬNULL(РаботыФакт.ОбъемРаботы, 0)) КАК Факт,
	|	МАКСИМУМ(ЕСТЬNULL(РаботыФакт.ПричинаОтклонения, ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПричиныОтклонений.ПустаяСсылка))) КАК ПричинаОтклонения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныеПланы.КлючСтроки КАК КлючСтроки,
	|		ОперативныеПланы.ПериодПлан КАК Период,
	|		ОперативныеПланы.Смена КАК Смена,
	|		СУММА(ОперативныеПланы.ОбъемРаботы) КАК ОбъемРаботы
	|	ИЗ
	|		РегистрСведений.ИНАГРО_ОперативныеПланы КАК ОперативныеПланы
	|	ГДЕ
	|		ОперативныеПланы.ПериодПлан МЕЖДУ &НачалоПериодаПериодичность И &КонецПериодаПериодичность
	|		И ОперативныеПланы.Регистратор.Проект = &Проект
	|		И ОперативныеПланы.Регистратор.НачалоПериода >= &НачалоПериода
	|		И ОперативныеПланы.Регистратор.КонецПериода <= &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОперативныеПланы.ПериодПлан,
	|		ОперативныеПланы.КлючСтроки,
	|		ОперативныеПланы.Смена) КАК РаботыПлан
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыполненныеРаботы.КлючСтроки КАК КлючСтроки,
	|			ВыполненныеРаботы.Период КАК Период,
	|			ВыполненныеРаботы.Смена КАК Смена,
	|			СУММА(ВыполненныеРаботы.ОбъемРаботы) КАК ОбъемРаботы,
	|			МАКСИМУМ(ВыполненныеРаботы.ПричинаОтклонения) КАК ПричинаОтклонения
	|		ИЗ
	|			РегистрНакопления.ИНАГРО_УчетВыполненныхРабот КАК ВыполненныеРаботы
	|		ГДЕ
	|			ВыполненныеРаботы.Период МЕЖДУ &НачалоПериодаПериодичность И &КонецПериодаПериодичность
	|			И ВыполненныеРаботы.Проект = &Проект
	|			И ВыполненныеРаботы.Регистратор.НачалоПериода >= &НачалоПериода
	|			И ВыполненныеРаботы.Регистратор.КонецПериода <= &КонецПериода
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыполненныеРаботы.КлючСтроки,
	|			ВыполненныеРаботы.Период,
	|			ВыполненныеРаботы.Смена) КАК РаботыФакт
	|		ПО РаботыПлан.КлючСтроки = РаботыФакт.КлючСтроки
	|			И РаботыПлан.Период = РаботыФакт.Период
	|			И РаботыПлан.Смена = РаботыФакт.Смена
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(РаботыПлан.КлючСтроки, РаботыФакт.КлючСтроки),
	|	ЕСТЬNULL(РаботыПлан.Период, РаботыФакт.Период),
	|	ЕСТЬNULL(РаботыПлан.Смена, РаботыФакт.Смена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки,
	|	Период,
	|	Смена");
	
	ЗапросПланФакт.УстановитьПараметр("Проект", Объект.Проект);
	ЗапросПланФакт.УстановитьПараметр("НачалоПериодаПериодичность", НачалоПериодаПериодичность);
	ЗапросПланФакт.УстановитьПараметр("КонецПериодаПериодичность", КонецПериодаПериодичность);
	ЗапросПланФакт.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	ЗапросПланФакт.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	//ЗапросПланФакт.УстановитьПараметр("тзСмены", ПолучитьСменыПроектаВТаблицеСервер(ЭтаФорма.СменыПроекта.ВыгрузитьЗначения()));
	ЗапросПланФакт.УстановитьПараметр("ПоСменам", ЭтаФорма.ПоСменам);
	тзПланФакт = ЗапросПланФакт.Выполнить().Выгрузить();
	тзПланФакт.Индексы.Добавить("КлючСтроки");

	тзВсеПериоды.Очистить();
	//ТекПериод = Объект.НачалоПериода;
	ТекПериод = НачалоПериодаПериодичность;
	Пока ТекПериод <= КонецПериодаПериодичность Цикл
		НС = тзВсеПериоды.Добавить();
		НС.Период = ТекПериод;
		НС.Суффикс = Формат(ТекПериод, "ДФ=ггггММдд");
		НС.ПериодКонец = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ТекПериод, Объект.Периодичность);
		ТекПериод = НС.ПериодКонец + 1;
	КонецЦикла;

	ДобавитьКолонкиДетальныхДанных();
	
	// наполнение данными
	Работы.Очистить();
	РаботыНачало.Очистить();
	стрПоиск = Новый Структура("КлючСтроки");
	спрПричиныПустаяСсылка = Справочники.ИНАГРО_ПричиныОтклонений.ПустаяСсылка();
	
	СменаИндекс = Новый Соответствие;
	Сч = 0;
	Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
		СменаИндекс.Вставить(Смена.Значение, Сч);
		Сч = Сч + 1;
	КонецЦикла;
	
	Для Каждого СтрОперПлан Из тзОперПлан Цикл
		
		НС0 = РаботыНачало.Добавить();
		ЗаполнитьЗначенияСвойств(НС0, СтрОперПлан);
		
		НС1 = Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НС1, СтрОперПлан);
		
		стрПоиск.КлючСтроки = СтрОперПлан.КлючСвязиПериод;
		мПериоды = тзПериодыРабот.НайтиСтроки(стрПоиск);
		
		Для Каждого Период Из тзВсеПериоды Цикл
			
			Сч = 0;
			Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
				
				СтрДатаСмена = Период.Суффикс + "_" + Сч;
				
				НС0["_ПО0" + СтрДатаСмена] = спрПричиныПустаяСсылка;
				НС1["_ПО1" + СтрДатаСмена] = спрПричиныПустаяСсылка;
				
				КонецПериода = НачалоДня(Период.ПериодКонец);
				
				Для Каждого РаботаПериод Из мПериоды Цикл
					Если РаботаПериод.Начало <= КонецПериода И РаботаПериод.Конец >= Период.Период Тогда
						НС1["_КП1" + СтрДатаСмена] = " ";
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Сч = Сч + 1;
			КонецЦикла;
		КонецЦикла;
		
		стрПоиск.КлючСтроки = СтрОперПлан.КлючСтроки;
		мСтроки = тзПланФакт.НайтиСтроки(стрПоиск);
		
		Для Каждого СтрПланФакт Из мСтроки Цикл
			
			Суффикс = Формат(СтрПланФакт.Период, "ДФ=ггггММдд") + "_" + СменаИндекс[СтрПланФакт.Смена];
			
			Если СтрПланФакт.План <> 0 Тогда
				НС0["_ОП0" + Суффикс] = СтрПланФакт.План;
				НС1["_ОП1" + Суффикс] = СтрПланФакт.План;
			КонецЕсли;
			
			Если СтрПланФакт.Факт <> 0 Тогда
				НС0["_ФД0" + Суффикс] = СтрПланФакт.Факт;
				НС1["_ФД1" + Суффикс] = СтрПланФакт.Факт;
			КонецЕсли;
			
			Если Не СтрПланФакт.ПричинаОтклонения.Пустая() Тогда
				НС0["_ПО0" + Суффикс] = СтрПланФакт.ПричинаОтклонения;
				НС1["_ПО1" + Суффикс] = СтрПланФакт.ПричинаОтклонения;
			КонецЕсли;
			
		КонецЦикла;
		
		НС1.ПутьИерархия = ПолучитьВидРаботСтрокойИерархияСервер(Объект.Версия, СтрОперПлан.КлючСвязи);
		
	КонецЦикла;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиДетальныхДанных()
	
	// удаление ненужных (старых) колонок таблиц (реквизит формы)
	мУдалить = Новый Массив;
	мКолонки = ПолучитьРеквизиты("Работы");
	Для Каждого Колонка Из мКолонки Цикл
		Если Лев(Колонка.Имя, 1) = "_" Тогда
			мУдалить.Добавить("Работы." + Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	мКолонки = ПолучитьРеквизиты("РаботыНачало");
	Для Каждого Колонка Из мКолонки Цикл
		Если Лев(Колонка.Имя, 1) = "_" Тогда
			мУдалить.Добавить("РаботыНачало." + Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Пока УсловноеОформление.Элементы.Количество() > 4 Цикл
		УсловноеОформление.Элементы.Удалить(УсловноеОформление.Элементы.Получить(4));
	КонецЦикла;
		
	Сч = Элементы.ГруппаДанные.ПодчиненныеЭлементы.Количество();
	Пока Сч > 0 Цикл
		Элементы.Удалить(Элементы.ГруппаДанные.ПодчиненныеЭлементы.Получить(0));
		Сч = Сч - 1;
	КонецЦикла;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");//, Новый КвалификаторыЧисла(18, 6, ДопустимыйЗнак.Любой));
	мТипы = Новый Массив;
	мТипы.Добавить(Тип("СправочникСсылка.ИНАГРО_ПричиныОтклонений"));
	мТипы.Добавить(Тип("Булево"));
	ТипПричинаОтклонения = Новый ОписаниеТипов(мТипы);
	
	// добавление нужных (новых) колонок таблиц (реквизит формы)
	мДобавить = Новый Массив;
	Для Каждого Период Из тзВсеПериоды Цикл
		Сч = 0;
		Для Каждого Стр Из ЭтаФорма.СменыПроекта Цикл
			СтрДатаСмена = Период.Суффикс + "_" + Сч;
			мДобавить.Добавить(Новый РеквизитФормы("_ОП0" + СтрДатаСмена, ТипЧисло, "РаботыНачало"));
			мДобавить.Добавить(Новый РеквизитФормы("_ФД0" + СтрДатаСмена, ТипЧисло, "РаботыНачало"));
			мДобавить.Добавить(Новый РеквизитФормы("_ПО0" + СтрДатаСмена, ТипПричинаОтклонения, "РаботыНачало"));
			мДобавить.Добавить(Новый РеквизитФормы("_КП1" + СтрДатаСмена, ТипСтрока, "Работы"));
			мДобавить.Добавить(Новый РеквизитФормы("_ОП1" + СтрДатаСмена, ТипЧисло, "Работы"));
			мДобавить.Добавить(Новый РеквизитФормы("_ФД1" + СтрДатаСмена, ТипЧисло, "Работы"));
			мДобавить.Добавить(Новый РеквизитФормы("_ПО1" + СтрДатаСмена, ТипПричинаОтклонения, "Работы"));
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
	// фактическое изменение колонок таблиц данных (не визуальных)
	ИзменитьРеквизиты(мДобавить, мУдалить);
	
	// создание колонок таблицы формы (визуальных)
	Для Каждого Период Из тзВсеПериоды Цикл
		
		Сч = 0;
		Для Каждого Стр Из ЭтаФорма.СменыПроекта Цикл
			
			СтрДатаСмена = Период.Суффикс + "_" + Сч;
		
			ГруппаПериод = Элементы.Добавить("_Группа" + СтрДатаСмена, Тип("ГруппаФормы"), Элементы.ГруппаДанные);
			ГруппаПериод.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаПериод.Группировка = ГруппировкаКолонок.Вертикальная;
			
			НоваяКолонка = Элементы.Добавить("_КП1" + СтрДатаСмена, Тип("ПолеФормы"), ГруппаПериод);
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонка.ПутьКДанным = "Работы._КП1" + СтрДатаСмена;
			НоваяКолонка.АвтоМаксимальнаяШирина = Ложь;
			НоваяКолонка.МаксимальнаяШирина = 10;
			Если Объект.Периодичность = Перечисления.Периодичность.День Тогда
				НоваяКолонка.Заголовок = Формат(Период.Период, "ДЛФ=D") + ?(ЭтаФорма.ПоСменам, " - " + Стр.Значение, "");
			Иначе
				НоваяКолонка.Заголовок = Формат(Макс(Период.Период, Объект.НачалоПериода), "ДЛФ=D") + " - "
					+ Формат(Мин(Период.ПериодКонец, Объект.КонецПериода), "ДЛФ=D");
			КонецЕсли;
			НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			НоваяКолонка.ТолькоПросмотр = Истина;
			УстановитьОформлениеКолонки("_КП1", НоваяКолонка.Имя, НоваяКолонка);
			
			НоваяКолонка = Элементы.Добавить("_ОП1" + СтрДатаСмена, Тип("ПолеФормы"), ГруппаПериод);
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонка.ПутьКДанным = "Работы._ОП1" + СтрДатаСмена;
			НоваяКолонка.АвтоМаксимальнаяШирина = Ложь;
			НоваяКолонка.МаксимальнаяШирина = 10;
			НоваяКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НоваяКолонка.ОтображатьВШапке = Ложь;
			НоваяКолонка.МинимальноеЗначение = 0;
			УстановитьОформлениеКолонки("_ОП1", НоваяКолонка.Имя, НоваяКолонка);
			
			ГруппаФД = Элементы.Добавить("_ГруппаФДПО" + СтрДатаСмена, Тип("ГруппаФормы"), ГруппаПериод);
			ГруппаФД.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаФД.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			НоваяКолонкаПО = Элементы.Добавить("_ПО1" + СтрДатаСмена, Тип("ПолеФормы"), ГруппаФД);
			НоваяКолонкаПО.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонкаПО.ПутьКДанным = "Работы._ПО1" + СтрДатаСмена;
			НоваяКолонкаПО.АвтоМаксимальнаяШирина = Ложь;
			НоваяКолонкаПО.МаксимальнаяШирина = 4;
			НоваяКолонкаПО.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НоваяКолонкаПО.ОтображатьВШапке = Ложь;
			НоваяКолонкаПО.ВыбиратьТип = Ложь;
			НоваяКолонкаПО.КнопкаОткрытия = Ложь;
			НоваяКолонкаПО.КнопкаОчистки = Истина;
			
			НоваяКолонкаФД = Элементы.Добавить("_ФД1" + СтрДатаСмена, Тип("ПолеФормы"), ГруппаФД);
			НоваяКолонкаФД.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонкаФД.ПутьКДанным = "Работы._ФД1" + СтрДатаСмена;
			НоваяКолонкаФД.АвтоМаксимальнаяШирина = Ложь;
			НоваяКолонкаФД.МаксимальнаяШирина = 6;
			НоваяКолонкаФД.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НоваяКолонкаФД.ОтображатьВШапке = Ложь;
			НоваяКолонкаФД.МинимальноеЗначение = 0;
			
			УстановитьОформлениеКолонки("_ПО1", НоваяКолонкаПО.Имя, НоваяКолонкаПО);
			УстановитьОформлениеКолонки("_ФД1", НоваяКолонкаФД.Имя, НоваяКолонкаПО);
			
			УстановитьОформлениеКолонки("_ПО1", НоваяКолонкаПО.Имя, НоваяКолонкаФД, НоваяКолонка);
			УстановитьОформлениеКолонки("_ФД1", НоваяКолонкаФД.Имя, НоваяКолонкаФД, НоваяКолонка);
			
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКолонки(ИмяГруппы, ИмяКолонки, КолонкаЗаполнено, КолонкаРавно = Неопределено)
	
	НовоеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	Если КолонкаРавно = Неопределено Тогда
		Отбор = НовоеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаЗаполнено.ПутьКДанным);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Иначе
		ОтборГруппа = НовоеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		Отбор = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаЗаполнено.ПутьКДанным);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Отбор = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаЗаполнено.ПутьКДанным);
		Отбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаРавно.ПутьКДанным);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ВидОформления = НовоеОформление.Оформление.Элементы.Получить(0);// 0 = фон
	Если ИмяГруппы = "_КП1" Тогда
		ВидОформления.Значение = WebЦвета.НебесноГолубой;
	ИначеЕсли ИмяГруппы = "_ОП1" Тогда
		ВидОформления.Значение = WebЦвета.Персиковый;
	Иначе
		ВидОформления.Значение = WebЦвета.НейтральноЗеленый;
	КонецЕсли;
	ВидОформления.Использование = Истина;
	
	ПолеОформления = НовоеОформление.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти

#Область Запись_Изменений

&НаКлиенте
Процедура РаботыПланФактСформироватьДокументОП(идТекСтрока = Неопределено)
	
	ТекстОшибки = "";
	бРезультат = Ложь;
	бРезультат = РаботыПланФактСформироватьДокументОПСервер(СформироватьСтруктуруПараметров(), идТекСтрока, ТекстОшибки);
	
	Если Не ТекстОшибки = "" Тогда
		Сообщ = Новый СообщениеПользователю;
		Сообщ.Текст = ТекстОшибки;
		Сообщ.УстановитьДанные(Объект);
		Сообщ.Сообщить();
	КонецЕсли;
	
	Если бРезультат Тогда
		РаботыПланФактЗагрузить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланФактЗаписатьИзменения()
	
	Состояние("Запись изменений ..", 33);
	
	Если РаботыПланФакт_ЗаписатьИзмененияСервер() Тогда
		РаботыПланФактЗагрузить();
 	КонецЕсли;
	
	Состояние("Запись изменений завершена", 100);
	
КонецПроцедуры

&НаСервере
Функция РаботыПланФакт_ЗаписатьИзмененияСервер()
	
	ТекДата = ТекущаяДатаСеанса();
	тзРаботы = РеквизитФормыВЗначение("РаботыНачало");
	тзРаботы.Колонки.Добавить("ОПОтличаются", Новый ОписаниеТипов("Булево"));
	тзРаботы.Колонки.Добавить("ФДОтличаются", Новый ОписаниеТипов("Булево"));
	//тзРаботы.Колонки.Добавить("ПООтличаются", Новый ОписаниеТипов("Булево"));
	тзРаботы.Колонки.Добавить("ЗавершенаОтличаются", Новый ОписаниеТипов("Булево"));
	ЕстьИзмененияОП = Ложь;
	ЕстьИзмененияФД = Ложь;
	//ЕстьИзмененияПО = Ложь;
	ЕстьИзмененияЗавершена = Ложь;
	ОшибкаДанных = Ложь;
	ОшибкаЗаписи = Ложь;
	
	сЗначенияПлан = Новый Соответствие;
	
	Для Сч = 0 По Работы.Количество() - 1 Цикл
		
		Стр0 = тзРаботы.Получить(Сч);
		Стр1 = Работы.Получить(Сч);
		
		Для Каждого СтрПериод Из тзВсеПериоды Цикл
			
			Сч1 = 0;
			Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
				
				СтрДатаСмена = СтрПериод.Суффикс + "_" + Сч1;
				
				КолонкаОП0 = "_ОП0" + СтрДатаСмена;
				КолонкаОП1 = "_ОП1" + СтрДатаСмена;
				КолонкаФД0 = "_ФД0" + СтрДатаСмена;
				КолонкаФД1 = "_ФД1" + СтрДатаСмена;
				КолонкаПО0 = "_ПО0" + СтрДатаСмена;
				КолонкаПО1 = "_ПО1" + СтрДатаСмена;
				
				// контроль внесения причины отклонения для работ прошлых периодов (относительно текущей даты)
				//Если Стр1[КолонкаОП] <> Стр1[КолонкаФД]
				//	И Стр1[КолонкаПО].Пустая()
				//	И (Не Стр0[КолонкаОП] = Стр1[КолонкаОП] Или Не Стр0[КолонкаФД] = Стр1[КолонкаФД] Или Не Стр0[КолонкаПО] = Стр1[КолонкаПО])
				//	И ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрПериод.Период, Объект.Периодичность) < ТекДата Тогда
				//	Сообщение = Новый СообщениеПользователю;
				//	Сообщение.Текст = "Необходимо указать причину отклонения по виду работ:"
				//		+ Символы.ПС + Стр1["ВидРаботы"]
				//		+ Символы.ПС + "номер в структуре: " + Стр1["НомерВСтруктуре"] + ", период: " + Формат(СтрПериод.Период, "ДЛФ=D");
				//	Сообщение.УстановитьДанные(ЭтотОбъект);
				//	Сообщение.Сообщить();
				//	ОшибкаДанных = Истина;
				//	Прервать;
				//КонецЕсли;
				
				//Если Стр0[КолонкаПО0] = Стр1[КолонкаПО1] Тогда
				//	Стр0[КолонкаПО0] = Неопределено;
				//Иначе
				//	//Если тзРаботы.Колонки.Найти("_МаксОбъем" + СтрДатаСмена) = Неопределено Тогда
				//	//	тзРаботы.Колонки.Добавить("_МаксОбъем" + СтрДатаСмена, Новый ОписаниеТипов("Число"));
				//	//КонецЕсли;
				//	//Стр0["_МаксОбъем" + СтрДатаСмена] = Стр0[КолонкаОП0] - Стр0[КолонкаФД0];
				//	Стр0[КолонкаПО0] = Стр1[КолонкаПО1];
				//	Стр0.ПООтличаются = Истина;
				//	ЕстьИзмененияПО = Истина;
				//КонецЕсли;
				
				Стр0[КолонкаОП0] = Стр1[КолонкаОП1] - Стр0[КолонкаОП0];
				Если Не Стр0.ОПОтличаются И Стр0[КолонкаОП0] <> 0 Тогда
					Стр0.ОПОтличаются = Истина;
					ЕстьИзмененияОП = Истина;
				КонецЕсли;
				
				Если Стр0[КолонкаФД0] = Стр1[КолонкаФД1] И Стр0[КолонкаПО0] = Стр1[КолонкаПО1] Тогда
					Стр0[КолонкаФД0] = 0;
					Стр0[КолонкаПО0] = Неопределено;
				Иначе
					Стр0[КолонкаФД0] = Стр1[КолонкаФД1];
					Стр0[КолонкаПО0] = Стр1[КолонкаПО1];
					сЗначенияПлан.Вставить(Стр0.КлючСтроки + КолонкаФД0, Стр1[КолонкаОП1]);
					Если Не Стр0.ФДОтличаются Тогда
						Стр0.ФДОтличаются = Истина;
						ЕстьИзмененияФД = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Сч1 = Сч1 + 1;
			КонецЦикла;
		КонецЦикла;
			
		Если Не Стр0.Завершена = Стр1.Завершена Тогда
			Стр0.Завершена = Стр1.Завершена;
			ЕстьИзмененияЗавершена = Истина;
		КонецЕсли;
		
		//Если ОшибкаДанных Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;
	
	//Если ОшибкаДанных Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ЕстьИзмененияОП Или ЕстьИзмененияФД Или ЕстьИзмененияЗавершена Тогда
		
		ОписаниеОшибки = "";
		
		НачатьТранзакцию();
		
		Попытка
			Если ЕстьИзмененияОП Тогда
				РаботыПланФакт_ЗаписатьИзмененияОПСервер(тзРаботы, ОшибкаЗаписи);
			КонецЕсли;
			Если Не ОшибкаЗаписи И (ЕстьИзмененияФД) Тогда
				РаботыПланФакт_ЗаписатьИзмененияФДСервер(тзРаботы, ОшибкаЗаписи, сЗначенияПлан);
			КонецЕсли;
			Если Не ОшибкаЗаписи И ЕстьИзмененияЗавершена Тогда
				РаботыПланФакт_ЗаписатьЗавершениеРаботНаСервере(тзРаботы, ОшибкаЗаписи);
			КонецЕсли;
		Исключение
			ОшибкаЗаписи = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ОшибкаЗаписи Тогда
			ОтменитьТранзакцию();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки;
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	ИначеЕсли Модифицированность Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат Не ОшибкаЗаписи;

КонецФункции

&НаСервере
Процедура РаботыПланФакт_ЗаписатьИзмененияОПСервер(тзРаботы, Отказ)
	
	ИспользоватьПоиск = Ложь;
	ДокЗаписать = РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ОП", ИспользоватьПоиск, Отказ);
	
	Если ДокЗаписать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	СтруктураПоиск = Новый Структура("Период, КлючСтроки, Смена");
	
	КолонкаФлагИзменений = "ОПОтличаются";
	
	Для Каждого Стр Из тзРаботы Цикл
		
		Если Стр[КолонкаФлагИзменений] Тогда
			
			СтруктураПоиск.КлючСтроки = Стр.КлючСтроки;
			
			ИзмененияИсчерпаны = Истина;
			
			Для Каждого Период Из тзВсеПериоды Цикл
				
				СтруктураПоиск.Период = Период.Период;
				
				Сч = 0;
				Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
					
					КолонкаПериод = "_ОП0" + Период.Суффикс + "_" + Сч;
					
					Если Стр[КолонкаПериод] <> 0 Тогда
						
						Если ИспользоватьПоиск Тогда
							
							СтруктураПоиск.Смена = Смена.Значение;
							мСтроки = ДокЗаписать.Работы.НайтиСтроки(СтруктураПоиск);
							
							Если мСтроки.Количество() > 0 Тогда
								
								мСтроки[0].ОбъемРаботы = мСтроки[0].ОбъемРаботы + Стр[КолонкаПериод];
								Стр[КолонкаПериод] = 0;
								ЕстьИзменения = Истина;
								
								Если мСтроки[0].ОбъемРаботы = 0 Тогда
									ДокЗаписать.Работы.Удалить(мСтроки[0]);
									ЕстьИзменения = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если Стр[КолонкаПериод] <> 0 Тогда
							
							НС = ДокЗаписать.Работы.Добавить();
							ЗаполнитьЗначенияСвойств(НС, Стр, "КлючСтроки, Конструктив, ВидРаботы, ЕдиницаИзмерения, Исполнитель");
							НС.Субподряд = (ЗначениеЗаполнено(НС.Исполнитель) И ТипЗнч(НС.Исполнитель) = Тип("СправочникСсылка.Контрагенты"));
							НС.Период = Период.Период;
							НС.ОбъемРаботы = Стр[КолонкаПериод];
							НС.Смена = Смена.Значение;
							Стр[КолонкаПериод] = 0;
							ЕстьИзменения = Истина;
							
						КонецЕсли;
						
						Если Стр[КолонкаПериод] <> 0 Тогда
							ИзмененияИсчерпаны = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Сч = Сч + 1;
				КонецЦикла;
				
			КонецЦикла;
			
			Стр[КолонкаФлагИзменений] = Не ИзмененияИсчерпаны;
		КонецЕсли;
	КонецЦикла;
	
	тзПроверкаЕстьОтличия = тзРаботы.Скопировать(, КолонкаФлагИзменений);
	тзПроверкаЕстьОтличия.Свернуть(КолонкаФлагИзменений);
	
	Если тзПроверкаЕстьОтличия.Количество() > 1 Или тзПроверкаЕстьОтличия[0][КолонкаФлагИзменений] Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удается записать изменение оперативного плана.";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	ИначеЕсли ЕстьИзменения Тогда
		ДокЗаписать.Дата = ТекущаяДатаСеанса();
		ДокЗаписать.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаботыПланФакт_ЗаписатьИзмененияФДСервер(тзРаботы, Отказ, сЗначенияПлан)
	
	ИспользоватьПоиск = Ложь;
	ДокЗаписать = РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере("ФД", ИспользоватьПоиск, Отказ);
	
	Если ДокЗаписать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	СтруктураПоиск = Новый Структура("Период, КлючСтроки, Смена");
	
	КолонкаФлагИзменений = "ФДОтличаются";
	
	Для Каждого Стр Из тзРаботы Цикл
		
		Если Стр[КолонкаФлагИзменений] Тогда
			
			СтруктураПоиск.КлючСтроки = Стр.КлючСтроки;
			
			ИзмененияИсчерпаны = Истина;
			
			Для Каждого Период Из тзВсеПериоды Цикл
				
				СтруктураПоиск.Период = Период.Период;
				
				Сч = 0;
				Для Каждого Смена Из ЭтаФорма.СменыПроекта Цикл
				
					КолонкаПериод = "_ФД0" + Период.Суффикс + "_" + Сч;
					//КолонкаПериодБезСмены = "_ФД0" + Период.Суффикс;
					КолонкаПОПериод = "_ПО0" + Период.Суффикс + "_" + Сч;
					
					Если Стр[КолонкаПериод] <> 0 Или Не Стр[КолонкаПОПериод] = Неопределено Тогда
						
						НС = Неопределено;
						
						Если ИспользоватьПоиск Тогда
							
							СтруктураПоиск.Смена = Смена.Значение;
							мСтроки = ДокЗаписать.Работы.НайтиСтроки(СтруктураПоиск);
							
							Если мСтроки.Количество() > 0 Тогда
								НС = мСтроки[0];
							КонецЕсли;
							
						КонецЕсли;
						
						Если НС = Неопределено Тогда
							
							НС = ДокЗаписать.Работы.Добавить();
							ЗаполнитьЗначенияСвойств(НС, Стр, "КлючСтроки, Конструктив, ВидРаботы, ЕдиницаИзмерения, Исполнитель, ТипСубподряда");
							НС.Субподряд = (ЗначениеЗаполнено(НС.Исполнитель) И ТипЗнч(НС.Исполнитель) = Тип("СправочникСсылка.Контрагенты"));
							НС.Период = Период.Период;
							НС.Смена = Смена.Значение;
							
						КонецЕсли;
								
						//Если Не Стр[КолонкаПОПериод] = Неопределено Тогда
						Если Не НС.ПричинаОтклонения = Стр[КолонкаПОПериод] Тогда
							НС.ПричинаОтклонения = Стр[КолонкаПОПериод];
							Стр[КолонкаПОПериод] = Неопределено;
							ЕстьИзменения = Истина;
						КонецЕсли;
						
						//Если Не мСтроки[0].ОбъемРаботыПлан = Стр["_ОП0" + Период.Суффикс + "_" + Сч] Тогда
						//	мСтроки[0].ОбъемРаботыПлан = Стр["_ОП0" + Период.Суффикс + "_" + Сч];
						//	ЕстьИзменения = Истина;
						//КонецЕсли;
						Если Не НС.ОбъемРаботыПлан = сЗначенияПлан[Стр.КлючСтроки + КолонкаПериод] Тогда
							НС.ОбъемРаботыПлан = сЗначенияПлан[Стр.КлючСтроки + КолонкаПериод];
							//мСтроки[0].ОбъемРаботыПлан = Стр["_ОП0" + Период.Суффикс + "_" + Сч];
							ЕстьИзменения = Истина;
						КонецЕсли;
						//КонецЕсли;
						
						Если Не НС.ОбъемРаботы = Стр[КолонкаПериод] Тогда
							НС.ОбъемРаботы = Стр[КолонкаПериод];
							ЕстьИзменения = Истина;
						КонецЕсли;
						Стр[КолонкаПериод] = 0;
						
						Если НС.ОбъемРаботы = 0 И НС.ПричинаОтклонения.Пустая() Тогда
							ДокЗаписать.Работы.Удалить(НС);
							ЕстьИзменения = Истина;
						КонецЕсли;
						
						//Если Стр[КолонкаПериод] <> 0 Или Не Стр[КолонкаПОПериод] = Неопределено Тогда
						//	НС = ДокЗаписать.Работы.Добавить();
						//	ЗаполнитьЗначенияСвойств(НС, Стр, "КлючСтроки, Конструктив, ВидРаботы, ЕдиницаИзмерения, Исполнитель");
						//	НС.Субподряд = (ЗначениеЗаполнено(НС.Исполнитель) И ТипЗнч(НС.Исполнитель) = Тип("СправочникСсылка.Контрагенты"));
						//	НС.Период = Период.Период;
						//	НС.Смена = Смена.Значение;
						//	НС.ОбъемРаботы = Стр[КолонкаПериод];
						//	Стр[КолонкаПериод] = 0;
						//	
						//	Если Не Стр[КолонкаПОПериод] = Неопределено Тогда
						//		НС.ОбъемРаботыПлан = Стр["_МаксОбъем" + Период.Суффикс + "_" + Сч];
						//		НС.ПричинаОтклонения = Стр[КолонкаПОПериод];
						//		Стр[КолонкаПОПериод] = Неопределено;
						//	КонецЕсли;
						//	ЕстьИзменения = Истина;
						//КонецЕсли;
						
						Если Стр[КолонкаПериод] <> 0 Тогда
							ИзмененияИсчерпаны = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Сч = Сч + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Стр[КолонкаФлагИзменений] = Не ИзмененияИсчерпаны;
			
		КонецЕсли;
		
	КонецЦикла;
	
	тзПроверкаЕстьОтличия = тзРаботы.Скопировать(, КолонкаФлагИзменений);
	тзПроверкаЕстьОтличия.Свернуть(КолонкаФлагИзменений);
	
	Если тзПроверкаЕстьОтличия.Количество() > 1 Или тзПроверкаЕстьОтличия[0][КолонкаФлагИзменений] Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удается записать изменение факта выполненных работ.";
		//Если РольДоступна("ПолныеПрава") Тогда
		//	Сообщение.Текст = Сообщение.Текст + " ( итог: " + тзПроверкаЕстьОтличия.Итог(КолонкаФлагИзменений) + ")";
		//КонецЕсли;
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	ИначеЕсли ЕстьИзменения Тогда
		ДокЗаписать.ПерезаполнитьЦены();
		ДокЗаписать.Дата = ТекущаяДатаСеанса();
		ДокЗаписать.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РаботыПланФакт_ПолучитьДокументДляЗаписиНаСервере(Префикс, ИспользоватьПоиск = Ложь, Отказ = Ложь, ДопПараметры = Неопределено, ДанныеФормы = Неопределено, ТолькоНовый = Ложь)
	
	ДокЗаписать = Неопределено;
	
	Если Не ТолькоНовый Тогда
		
		ПравоИзменятьДокументы = Ложь;
		
		Если Префикс = "ОП" Тогда
			ПравоИзменятьДокументы = ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.ИНАГРО_ОперативноеПланированиеРабот);
		ИначеЕсли Префикс = "ФД" Тогда
			ПравоИзменятьДокументы = ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.ИНАГРО_УчетВыполненныхОбъемовРабот);
		ИначеЕсли Префикс = "НИ" Тогда
			ПравоИзменятьДокументы = ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.ИНАГРО_НазначениеИсполнителейНаРаботы);
		ИначеЕсли Префикс = "РМ" Тогда
			ПравоИзменятьДокументы = ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.ИНАГРО_РасходМатериалов);
		ИначеЕсли Префикс = "ДТ" Тогда
			ПравоИзменятьДокументы = ПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.ИНАГРО_УчетРаботыСотрудниковИТехники);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПравоИзменятьДокументы Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТекДок.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ИНАГРО_ОперативноеПланированиеРабот КАК ТекДок
			|ГДЕ
			|	ТекДок.Организация = &Организация
			|	И ТекДок.Проект = &Проект
			|	И ТекДок.Версия = &Версия
			|	И ТекДок.Дата >= &Дата
			|	И ТекДок.НачалоПериода = &НачалоПериода
			|	И ТекДок.КонецПериода = &КонецПериода
			|	И ТекДок.Проведен
			|	И ТекДок.Ответственный = &Ответственный
			|	И (&Исполнитель = НЕОПРЕДЕЛЕНО
			|				И (ТекДок.Исполнитель = НЕОПРЕДЕЛЕНО
			|					ИЛИ ТекДок.Исполнитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|					ИЛИ ТекДок.Исполнитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
			|			ИЛИ ТекДок.Исполнитель = &Исполнитель)
			|	И (&Конструктив = НЕОПРЕДЕЛЕНО
			|				И ТекДок.Конструктив = ЗНАЧЕНИЕ(Справочник.ИНАГРО_КонструктивыПроекта.ПустаяСсылка)
			|			ИЛИ ТекДок.Конструктив = &Конструктив)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТекДок.Дата УБЫВ";
			
			Если Префикс = "ОП" Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Конструктив)", "&Конструктив)
				|	И (ТекДок.Субподряд = 0
				|		ИЛИ ТекДок.Субподряд = &Субподряд)");
				
			ИначеЕсли Префикс = "ФД" Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНАГРО_ОперативноеПланированиеРабот", "ИНАГРО_УчетВыполненныхОбъемовРабот");
				
			ИначеЕсли Префикс = "НИ" Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНАГРО_ОперативноеПланированиеРабот", "ИНАГРО_НазначениеИсполнителейНаРаботы");
				
			ИначеЕсли Префикс = "РМ" Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Конструктив)", "&Конструктив)
				|	И (ТекДок.ПереданныеМатериалы = &ПереданныеМатериалы)
				|	И (ТекДок.Склад = &Склад)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНАГРО_ОперативноеПланированиеРабот", "ИНАГРО_РасходМатериалов");
				
			ИначеЕсли Префикс = "ДТ" Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНАГРО_ОперативноеПланированиеРабот", "ИНАГРО_УчетРаботыСотрудниковИТехники");
				
			КонецЕсли;
			
			ЗапросТекДок = Новый Запрос(ТекстЗапроса);
			ЗапросТекДок.УстановитьПараметр("Организация", Объект.Организация);
			ЗапросТекДок.УстановитьПараметр("Проект", Объект.Проект);
			ЗапросТекДок.УстановитьПараметр("Версия", Объект.Версия);
			ЗапросТекДок.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
			ЗапросТекДок.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
			ЗапросТекДок.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
			ЗапросТекДок.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
			ЗапросТекДок.УстановитьПараметр("Исполнитель", Объект.Исполнитель);
			ЗапросТекДок.УстановитьПараметр("Конструктив", Объект.Конструктив);
			
			Если Префикс = "ОП" Тогда
				ЗапросТекДок.УстановитьПараметр("Субподряд", Объект.Субподряд);
			ИначеЕсли Префикс = "РМ" Тогда
				//ЗапросТекДок.УстановитьПараметр("ПереданныеМатериалы", ДопПараметры.ПереданныеМатериалы);
				ЗапросТекДок.УстановитьПараметр("ПереданныеМатериалы", Ложь);
				ЗапросТекДок.УстановитьПараметр("Склад", ДопПараметры.Склад);
			КонецЕсли;
			
			ВыборкаДок = ЗапросТекДок.Выполнить().Выбрать();
			
			Пока ВыборкаДок.Следующий() Цикл
				
				Если Префикс = "ОП" Тогда
					
					Если Не Документы.ИНАГРО_ОперативноеПланированиеРабот.ЕстьВыполненныеРаботы(ВыборкаДок.Ссылка.Работы.Выгрузить(, "Период, КлючСтроки"), ВыборкаДок.Ссылка) Тогда
						ДокЗаписать = ВыборкаДок.Ссылка.ПолучитьОбъект();
						ИспользоватьПоиск = Истина;
						Прервать;
					КонецЕсли;
					
				Иначе
					
					ДокЗаписать = ВыборкаДок.Ссылка.ПолучитьОбъект();
					ИспользоватьПоиск = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокЗаписать = Неопределено Тогда
		
		Если Префикс = "ОП" Тогда
			
			ДокЗаписать = Документы.ИНАГРО_ОперативноеПланированиеРабот.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект,, "КонецПериода");
			ДокЗаписать.КонецПериода = НачалоДня(КонецМесяца(Объект.НачалоПериода));
			
		ИначеЕсли Префикс = "ФД" Тогда
			
			ДокЗаписать = Документы.ИНАГРО_УчетВыполненныхОбъемовРабот.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект);
			
		ИначеЕсли Префикс = "НИ" Тогда
			
			ДокЗаписать = Документы.ИНАГРО_НазначениеИсполнителейНаРаботы.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект);
			
		ИначеЕсли Префикс = "РМ" Тогда
			
			ДокЗаписать = Документы.ИНАГРО_РасходМатериалов.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект);
			ЗаполнитьЗначенияСвойств(ДокЗаписать, ДопПараметры, "Склад");
			
		ИначеЕсли Префикс = "ДТ" Тогда
			
			ДокЗаписать = Документы.ИНАГРО_УчетРаботыСотрудниковИТехники.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокЗаписать, Объект);
			
		КонецЕсли;
		
		ДокЗаписать.Ответственный = Пользователи.ТекущийПользователь();
		ДокЗаписать.Конструктив = Объект.Конструктив;
		ДокЗаписать.Дата = ТекущаяДатаСеанса();
		ДокЗаписать.Комментарий = "АРМ";
		
	КонецЕсли;
	
	Если ДокЗаписать = Неопределено Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		
		ТекстОкончание  = "";
		
		Если Префикс = "ОП" Тогда ТекстОкончание = "оперативного плана!";
		ИначеЕсли Префикс = "ФД" Тогда ТекстОкончание = "факта выполнения работ!";
		ИначеЕсли Префикс = "НИ" Тогда ТекстОкончание = "оперативного планирования ресурсов!";
		ИначеЕсли Префикс = "РМ" Тогда ТекстОкончание = "расхода материалов!";
		ИначеЕсли Префикс = "ДТ" Тогда ТекстОкончание = "учета работы сотрудников и техники!";
		КонецЕсли;
		
		Сообщение.Текст = "Не удалось найти или создать документ для записи " + ТекстОкончание;
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если ДанныеФормы = Неопределено Тогда
		Возврат ДокЗаписать;
	Иначе
		ЗначениеВДанныеФормы(ДокЗаписать, ДанныеФормы);
		Возврат ДанныеФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РаботыПланФакт_ЗаписатьЗавершениеРаботНаСервере(тзРаботы, Отказ)
	
	РегЗавершенные = РегистрыСведений.ИНАГРО_ЗавершенныеРаботы.СоздатьМенеджерЗаписи();
	Для Каждого Стр Из тзРаботы Цикл
		РегЗавершенные.Организация = Объект.Организация;
		РегЗавершенные.Проект = Объект.Проект;
		РегЗавершенные.КлючСтроки = Стр.КлючСтроки;
		РегЗавершенные.Прочитать();
		Если Не РегЗавершенные.Выбран() И Стр.Завершена Тогда
			РегЗавершенные.Организация = Объект.Организация;
			РегЗавершенные.Проект = Объект.Проект;
			РегЗавершенные.КлючСтроки = Стр.КлючСтроки;
			РегЗавершенные.ВидРаботы = Стр.ВидРаботы;
			РегЗавершенные.Дата = ТекущаяДата();
			РегЗавершенные.Ответственный = Пользователи.ТекущийПользователь();
			РегЗавершенные.Записать();
		ИначеЕсли РегЗавершенные.Выбран() И Не Стр.Завершена Тогда
			РегЗавершенные.Организация = Объект.Организация;
			РегЗавершенные.Проект = Объект.Проект;
			РегЗавершенные.КлючСтроки = Стр.КлючСтроки;
			РегЗавершенные.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

 // ++ Ситис: p.virich   2018-07-26
 &НаКлиенте
Процедура НачалоПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("", "Внесенные изменения не записаны.");
		СтандартнаяОбработка = Ложь;
	Иначе
		
	КонецЕсли;
	           
КонецПроцедуры      // -- Ситис: p.virich   2018-07-26 

 // ++ Ситис: p.virich   2018-07-26
 &НаКлиенте
Процедура НачалоПериодаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("", "Внесенные изменения не записаны.");
		СтандартнаяОбработка = Ложь;
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры  // -- Ситис: p.virich   2018-07-26 

 // ++ Ситис: p.virich   2018-07-26
 &НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("", "Внесенные изменения не записаны.");
		СтандартнаяОбработка = Ложь;
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры   // -- Ситис: p.virich   2018-07-26 

 // ++ Ситис: p.virich   2018-07-26
 
&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ВывестиСообщениеМодифицированность("", "Внесенные изменения не записаны.");
		СтандартнаяОбработка = Ложь;
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры  // -- Ситис: p.virich   2018-07-26 

#КонецОбласти
