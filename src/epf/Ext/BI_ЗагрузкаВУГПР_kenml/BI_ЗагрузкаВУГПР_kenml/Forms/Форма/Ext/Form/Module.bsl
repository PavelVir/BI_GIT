#Область Сервер
&НаСервере
Перем КэшНормативныхСборников;
Перем КэшРесурсов;
Перем КэшРаботПроекта;

//ОСНОВА АЛГОРИТМА
&НаСервере
Процедура ЧтениеФайла(ВнутреннийАдресСервера)
	
	ЕстьКритичныеОшибки = ложь;  ЕстьПодозрительныеПозиции = ложь;
	
	//получаем файл из "временного хранилища сервера" и сохраняем во временный файл на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(ВнутреннийАдресСервера).Записать(ИмяВременногоФайла);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяВременногоФайла);
	
	СметаХДТО = ФабрикаXDTO.ПрочитатьXML(Чтение);

	Попытка		
		СтуктураХДТО = СметаХДТО.Получить("СТРУКТУРА");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверный формат файла, "+ ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если  СметаХДТО.Свойства().Получить("ПоказательСП") <> Неопределено и СтрокаВЧисло(СметаХДТО.ПоказательСП) <> 0 Тогда
		ПоказательСП =   СтрокаВЧисло(СметаХДТО.ПоказательСП);
	иначе
		ПоказательСП = 0;
	КонецЕсли;
	
	Если  СметаХДТО.Свойства().Получить("ПоказательНК2") <> Неопределено  Тогда
		ПоказательНК2 =  СтрокаВЧисло(СметаХДТО.ПоказательНК2);
	Иначе
		ПоказательНК2 = 0;
	КонецЕсли;

	Если  СметаХДТО.Свойства().Получить("Составил") <> Неопределено  Тогда
		Составил = СметаХДТО.Составил;
	КонецЕсли;
	
	Если  СметаХДТО.Свойства().Получить("ШифрСметы") <> Неопределено  Тогда
		ШифрСметы = СметаХДТО.ШифрСметы;
	иначе
		ШифрСметы = "";
	КонецЕсли;

	Если  СметаХДТО.Свойства().Получить("ВерсияГенератора") <> Неопределено  Тогда
		ВерсияГенератора = СокрЛП(СметаХДТО.ВерсияГенератора);
 		ИзменитьВерсиюСметы();
	КонецЕсли;

	Если АвтозаполнениеНормативныхСборников Тогда
		
		КэшНормативныхСборников = ЗаполнитьКэшНормативныхСборников();
		
	КонецЕсли;

	Если Не БезРесурсов Тогда
		КэшРесурсов = ЗаполнитьКэшРесурсов();
	КонецЕсли;
	
	КэшРаботПроекта = ЗаполнитьКэшРабот(Объект.Проект);

	Если СметаХДТО.Свойства().Получить("ИТОГДОК") <> Неопределено Тогда 
		
		ИтогоПоСмете = ИтогоПоСмете + СметаХДТО.ИТОГДОК.ВСЕГО;
		
	иначе
		
		ИтогоПоСмете = 0;
		
	КонецЕсли;
	
	// Очистка
	ТекущийЭлементДерева = РаботыДЗ;

	// КОРЕНЬ 
 	НЭ = ТекущийЭлементДерева.ПолучитьЭлементы().Добавить();
	НЭ.Название = СметаХДТО.НаименованиеДок;
	НЭ.КлючСтроки = Новый УникальныйИдентификатор;
	НЭ.КлючСвязи = "00000000-0000-0000-0000-000000000000";
	
	ЗаполнитьЗначенияСвойств(НЭ, СметаХДТО);
	
	НЭ.ВидРаботы = НайтиКонструктив(НЭ, Объект.Проект, АвтосозданиеWBS1c);
	НЭ.КодWBS = ШифрСметы;

	ТекущийЭлементДерева = НЭ;

	Если СтуктураХДТО <> Неопределено Тогда

		Если СтуктураХДТО.Свойства().Получить("ПОЗИЦИЯ") <> Неопределено Тогда // структура как позиции
			
 			Если ТипЗнч(СтуктураХДТО.ПОЗИЦИЯ) = Тип("СписокXDTO") Тогда
				РазделыХДТО = СтуктураХДТО.ПолучитьСписок("ПОЗИЦИЯ");
			иначе
				РазделыХДТО = Новый Массив;
				РазделыХДТО.Добавить(СтуктураХДТО.Получить("ПОЗИЦИЯ"));
 			КонецЕсли;
			
 			Если РазделыХДТО <> Неопределено Тогда
				
				РазобратьСписокХДТО(ТекущийЭлементДерева, РазделыХДТО);
				
			КонецЕсли;
			
		КонецЕсли;

		Если СтуктураХДТО.Свойства().Получить("РАЗДЕЛ") <> Неопределено Тогда // структура как разделы
 			
			Если ТипЗнч(СтуктураХДТО.РАЗДЕЛ) = Тип("СписокXDTO") Тогда
				РазделыХДТО = СтуктураХДТО.ПолучитьСписок("РАЗДЕЛ");
			иначе
				РазделыХДТО = Новый Массив;
				РазделыХДТО.Добавить(СтуктураХДТО.Получить("РАЗДЕЛ"));
 			КонецЕсли;
   			
			Если РазделыХДТО <> Неопределено Тогда
				
				РазобратьСписокХДТО(ТекущийЭлементДерева, РазделыХДТО);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	// итоги для визуального контроля
	Для каждого СтрокаРесурс Из ТаблицаРесурсов Цикл
 		
		Если не СтрокаРесурс.ИсключитьИзСебестоимости Тогда
			ИтогоПоРесурснойСтоимости = ИтогоПоРесурснойСтоимости + СтрокаРесурс.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоСНакладными = ИтогоСНакладными + ИтогоПоРесурснойСтоимости;

	Если ЕстьКритичныеОшибки Тогда
		ЭтаФорма.Заголовок = нСтр("ru='(ЕСТЬ ОШИБКИ ЗАГРУЗКИ!!!) Мастер формирования УГПР из xml'", "ru");
		ТаблицаРесурсов.Сортировать("ЕстьОшибка убыв");
		Элементы.Группа1.ТекущаяСтраница = Элементы.ГруппаРесурсы;
	иначе
		ЭтаФорма.Заголовок = нСтр("ru='Мастер формирования УГПР из xml'", "ru");
	КонецЕсли;
	
	Элементы.ТаблицаРесурсовОписаниеОшибки.Видимость = ЕстьКритичныеОшибки;
	Элементы.ТаблицаРесурсовЕстьОшибка.Видимость = ЕстьКритичныеОшибки;

КонецПроцедуры
 
&НаСервере
Процедура РазобратьСписокХДТО(ТекущийЭлементДерева, РазделыХДТО)
 	
	Для каждого ЭлементСпискаХДТО Из РазделыХДТО Цикл  	
		
		ЭтоРабота = (ЭлементСпискаХДТО.ВладеющееСвойство().Имя = "ПОЗИЦИЯ");
		ЭтоРесурс = (ЭлементСпискаХДТО.ВладеющееСвойство().Имя = "РЕСУРС");
		ЭтоРаботаРесурс = Ложь;
		ЭтоРаботаБезРесурсов = Ложь;

		Если ЭтоРабота и 
			(ЭлементСпискаХДТО.Тип = "6" или  ЭлементСпискаХДТО.Тип = "1" или  ЭлементСпискаХДТО.Тип = "2" или ЭлементСпискаХДТО.Тип= "5")  Тогда
			ЭтоРаботаРесурс = Истина;
		КонецЕсли;

		НЭ = ДобавитьЭлементВДерево(ТекущийЭлементДерева, ЭлементСпискаХДТО, ЭтоРабота, ЭтоРесурс, ЭтоРаботаРесурс);
		
 		// разобрать подчиненные

		// ПОЗИЦИИ
		Если ЭлементСпискаХДТО.Свойства().Получить("ПОЗИЦИЯ") <> Неопределено Тогда	

			Если ТипЗнч(ЭлементСпискаХДТО.ПОЗИЦИЯ) = Тип("СписокXDTO") Тогда
				ПозицииХДТО = ЭлементСпискаХДТО.ПолучитьСписок("ПОЗИЦИЯ");
				РазобратьСписокХДТО(НЭ, ПозицииХДТО);
			иначе
				
				ПозицииХДТО = Новый Массив;
				ПозицииХДТО.Добавить(ЭлементСпискаХДТО.Получить("ПОЗИЦИЯ"));

 				РазобратьСписокХДТО(НЭ, ПозицииХДТО);
			КонецЕсли;
 			
		КонецЕсли;  //Если ЭлементСпискаХДТО.Свойства().Получить("ПОЗИЦИЯ") 

		// РАЗДЕЛЫ
 		Если ЭлементСпискаХДТО.Свойства().Получить("РАЗДЕЛ") <> Неопределено Тогда 
			
			Если ТипЗнч(ЭлементСпискаХДТО.РАЗДЕЛ) = Тип("СписокXDTO") Тогда
				ПозицииХДТО = ЭлементСпискаХДТО.ПолучитьСписок("РАЗДЕЛ");
			иначе
				ПозицииХДТО = Новый Массив;
				ПозицииХДТО.Добавить(ЭлементСпискаХДТО.Получить("РАЗДЕЛ"));
 			КонецЕсли;
			
			РазобратьСписокХДТО(НЭ, ПозицииХДТО); //рекурсия
			
		КонецЕсли; //Если ЭлементСпискаХДТО.Свойства().Получить("РАЗДЕЛ")	

		//РЕСУРСЫ
		Если ЭлементСпискаХДТО.Свойства().Получить("РЕСУРС") <> Неопределено и не БезРесурсов Тогда 
			
			Если ТипЗнч(ЭлементСпискаХДТО.РЕСУРС) = Тип("СписокXDTO") Тогда
				ПозицииХДТО = ЭлементСпискаХДТО.ПолучитьСписок("РЕСУРС");
			иначе
				ПозицииХДТО = Новый Массив;
				ПозицииХДТО.Добавить(ЭлементСпискаХДТО.Получить("РЕСУРС"));
 			КонецЕсли;
			
			РазобратьСписокХДТО(НЭ, ПозицииХДТО);  //рекурсия
  				
		ИначеЕсли НЭ.Тип = "0" и НЭ.Сумма <> 0 Тогда // это значится как работа, есть стоимость но нет ресурсов ?!
			
			//ОбщегоНазначенияклиентСервер.СообщитьПользователю(" " + ЭлементСпискаХДТО.Наименование + " (Работа без ресурсов) Стоимость: "+НЭ.Сумма);
			СоздатьУсловныеРесурсыРаботыБезРесурсов(НЭ);
			
			ЭтоРаботаБезРесурсов = Истина;
			
 		//ИначеЕсли (ЭлементСпискаХДТО.Тип = "6" или  ЭлементСпискаХДТО.Тип = "1" или  ЭлементСпискаХДТО.Тип = "2" или ЭлементСпискаХДТО.Тип= "5") Тогда  // Работа-ресурс	
 
		КонецЕсли;	//Если ЭлементСпискаХДТО.Свойства().Получить("РЕСУРС")

		// доп проверки работ
		
		Если ЭтоРабота Тогда
 			
			Если не ЭтоРаботаРесурс Тогда
				
				Если не ОтключитьАвтокоректированиеРесурсов и не ЭтоРаботаБезРесурсов Тогда
					
					СкорректироватьОплатуМашинистов(НЭ);
					СкорректироватьОсновнуюОплату(НЭ);
					СкорректироватьСтоимостьМашин(НЭ);
					СкорректироватьСтоимостьМатериалов(НЭ);
 				ИначеЕсли ОтключитьАвтокоректированиеРесурсов и не ЭтоРаботаБезРесурсов Тогда	
					
					СкорректироватьОсновнуюОплату(НЭ);	// оплату все равно пытаемся поправить
					
					// и надо пересчитать СП
					Если НЭ.ЭтоРабота и НЭ.Тип <> "2" Тогда // не оборудование
						НЭ.СметнаяПрибыль = (НЭ.Сумма + НЭ.НакладныеРасходы + НЭ.НакладныеРасходыРаспред) * ПоказательСП / 100;		
						Продолжить;
					КонецЕсли;

				КонецЕсли;
				
				Если не ОтключитьАвтокоректированиеРесурсов Тогда
					СкорректироватьНакладныеРасходы(НЭ);
				КонецЕсли;

 			КонецЕсли;
			
			ИтогоСНакладными = ИтогоСНакладными + НЭ.НакладныеРасходы + НЭ.НакладныеРасходыРаспред + НЭ.СметнаяПрибыль;
			Итого_СметнаяПрибыль = Итого_СметнаяПрибыль + НЭ.СметнаяПрибыль;
 
			РазницаДляПроверки = Окр(НЭ.СуммаВсегоРасчет, 0) - Окр(НЭ.СуммаВСЕГО, 0);
			
			РазницаДляПроверки = ?(РазницаДляПроверки < 0, -РазницаДляПроверки, РазницаДляПроверки);
			
			Если РазницаДляПроверки > 10 Тогда
				НЭ.ВозможноОшибка = Истина; ЕстьПодозрительныеПозиции = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
 	
КонецПроцедуры

&НаСервере
Функция СоздатьУсловныеРесурсыРаботыБезРесурсов(ТекущийЭлементДерева)
	
	Если ТекущийЭлементДерева.СуммаЕМ <> 0 Тогда		
		
		// Общие реквизиты
		НовСтр = ТекущийЭлементДерева.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущийЭлементДерева);
		
		НовСтр.Название = "Прочие машины";
 		НовСтр.КлючСвязи = ТекущийЭлементДерева.КлючСтроки;

		НовСтр.ЭтоРесурс  = Истина;
		НовСтр.ЭтоРабота  = Ложь;
		НовСтр.тип = "3";
		НовСтр.КодСНБ = "";
		
		//НовСтр.Объем = ТекущийЭлементДерева.Объем;
		НовСтр.НормаРасхода = 1;
		
		НовСтр.Сумма = ТекущийЭлементДерева.СуммаЕМ;
		
		Если ТекущийЭлементДерева.Объем <> 0 Тогда
			НовСтр.Цена  = НовСтр.Сумма/ ТекущийЭлементДерева.Объем;	
		КонецЕсли;

		//НовСтр.СуммаЗПМашинистов = ТекущийЭлементДерева.СуммаЗПМашинистов;
		
		// вызов создания/поиска ресурса сметы
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Шифр", "");
		СтруктураПараметров.Вставить("Наименование", НовСтр.Название);
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", НовСтр.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("тип", НовСтр.тип);
		СтруктураПараметров.Вставить("РодительСсылка", РодительСсылка);
		СтруктураПараметров.Вставить("АвтосозданиеНедостающихРесурсов", Ложь);
		СтруктураПараметров.Вставить("ЭтоЗарплатаМашинистов", Ложь);
		СтруктураПараметров.Вставить("ЭтоОборудование", Ложь);
		СтруктураПараметров.Вставить("ТипРесурса",  Неопределено);
		
		НовСтр.ВидРаботы =  ЗаполнитьРесурс(СтруктураПараметров, КэшРесурсов);
		НовСтр.ТипРесурса = СтруктураПараметров.ТипРесурса;
		
		ДобавитьРесурс(НовСтр, ТекущийЭлементДерева.ВидРаботы);  // доптаблица с ресурсами
		
	КонецЕсли;

	Если ТекущийЭлементДерева.СуммаЗП <> 0 Тогда		
		
		// Общие реквизиты
		НовСтр = ТекущийЭлементДерева.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущийЭлементДерева);
		
		НовСтр.Название = "Затраты труда рабочих-строителей";
 		НовСтр.КлючСвязи = ТекущийЭлементДерева.КлючСтроки;

		НовСтр.ЭтоРесурс  = Истина;
		НовСтр.ЭтоРабота  = Ложь;
		НовСтр.тип = "1";
		НовСтр.КодСНБ = "";
		
		//НовСтр.Объем = ТекущийЭлементДерева.Объем;
		НовСтр.НормаРасхода = 1;
		
		НовСтр.Сумма = ТекущийЭлементДерева.СуммаЗП;
		
		Если ТекущийЭлементДерева.Объем <> 0 Тогда
			НовСтр.Цена  = НовСтр.Сумма/ ТекущийЭлементДерева.Объем;	
		КонецЕсли;

		НовСтр.СуммаЗПМашинистов = 0;
		
		// вызов создания/поиска ресурса сметы
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Шифр", "");
		СтруктураПараметров.Вставить("Наименование", НовСтр.Название);
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", НовСтр.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("тип", НовСтр.тип);
		СтруктураПараметров.Вставить("РодительСсылка", РодительСсылка);
		СтруктураПараметров.Вставить("АвтосозданиеНедостающихРесурсов", Ложь);
		СтруктураПараметров.Вставить("ЭтоЗарплатаМашинистов", Ложь);
		СтруктураПараметров.Вставить("ЭтоОборудование", Ложь);
		СтруктураПараметров.Вставить("ТипРесурса",  Неопределено);
		
		НовСтр.ВидРаботы =  ЗаполнитьРесурс(СтруктураПараметров, КэшРесурсов);
		НовСтр.ТипРесурса = СтруктураПараметров.ТипРесурса;
		
		ДобавитьРесурс(НовСтр, ТекущийЭлементДерева.ВидРаботы);  // доптаблица с ресурсами
		
	КонецЕсли;

	ОстатокНераспределено = ТекущийЭлементДерева.Сумма -  ТекущийЭлементДерева.СуммаЕМ -  ТекущийЭлементДерева.СуммаЗП;

	Если ТекущийЭлементДерева.СуммаМТ <> 0 или ОстатокНераспределено >  0  Тогда

		СуммаМатералов = ?(ТекущийЭлементДерева.СуммаМТ <> 0,  ТекущийЭлементДерева.СуммаМТ, ОстатокНераспределено);
		
		// Общие реквизиты
		НовСтр = ТекущийЭлементДерева.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущийЭлементДерева);
		
		НовСтр.Название = "Прочие материалы";
		НовСтр.КлючСвязи = ТекущийЭлементДерева.КлючСтроки;

		НовСтр.ЭтоРесурс  = Истина;
		НовСтр.ЭтоРабота  = Ложь;
		НовСтр.тип = "2";
		НовСтр.КодСНБ = "";
		
		//НовСтр.Объем = ТекущийЭлементДерева.Объем;
		НовСтр.НормаРасхода = 1;
		
		НовСтр.Сумма = СуммаМатералов;
		
		Если ТекущийЭлементДерева.Объем <> 0 Тогда
			НовСтр.Цена  = НовСтр.Сумма/ ТекущийЭлементДерева.Объем;	
		КонецЕсли;
		
		НовСтр.СуммаЗПМашинистов = 0;
		
		// вызов создания/поиска ресурса сметы
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Шифр", "");
		СтруктураПараметров.Вставить("Наименование", НовСтр.Название);
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", НовСтр.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("тип", НовСтр.тип);
		СтруктураПараметров.Вставить("РодительСсылка", РодительСсылка);
		СтруктураПараметров.Вставить("АвтосозданиеНедостающихРесурсов", Ложь);
		СтруктураПараметров.Вставить("ЭтоЗарплатаМашинистов", Ложь);
		СтруктураПараметров.Вставить("ЭтоОборудование", Ложь);
		СтруктураПараметров.Вставить("ТипРесурса",  Неопределено);
		
		НовСтр.ВидРаботы =  ЗаполнитьРесурс(СтруктураПараметров, КэшРесурсов);
		НовСтр.ТипРесурса = СтруктураПараметров.ТипРесурса;
		
		ДобавитьРесурс(НовСтр, ТекущийЭлементДерева.ВидРаботы);  // доптаблица с ресурсами
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция  ДобавитьЭлементВДерево(ТекущийЭлементДерева, ЭлементСпискаХДТО, ЭтоРабота = Ложь, ЭтоРесурс = Ложь, ЭтоРаботаРесурс = Ложь)

	Если ЭтоРабота и ЭлементСпискаХДТО.Тип = "3" Тогда // пока непонятна роль этих ресурсов
		
		Возврат ТекущийЭлементДерева;
		
	КонецЕсли;
	
	Если  ПоказательСП = 0 и ЭлементСпискаХДТО.Свойства().Получить("СП") <> Неопределено и СтрокаВЧисло(ЭлементСпискаХДТО.СП) <> 0 Тогда
		ПоказательСП = 	СтрокаВЧисло(ЭлементСпискаХДТО.СП);
	КонецЕсли;

	Если ЭтоРаботаРесурс  // Работа-ресурс 
		и  АвтопомещениеРесурсовВРаботы
		Тогда 		
		
		РаботыРаздела = ТекущийЭлементДерева.ПолучитьЭлементы();
		
		Если РаботыРаздела.Количество()  Тогда
			
			фАвтопомещениеРесурсовВРаботы(РаботыРаздела, ЭлементСпискаХДТО);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Работа-ресурс: "+ЭлементСпискаХДТО.Наименование + " некуда поместить в дереве, нужно ручное исправление");
			
		КонецЕсли;
		
		Возврат  ТекущийЭлементДерева;
		
	КонецЕсли;

	// Общие реквизиты
	НовСтр = ТекущийЭлементДерева.ПолучитьЭлементы().Добавить();
	НовСтр.Название = ЭлементСпискаХДТО.Наименование;
	НовСтр.КлючСтроки = Новый УникальныйИдентификатор;
	НовСтр.КлючСвязи = ТекущийЭлементДерева.КлючСтроки;
	
	ЗаполнитьЗначенияСвойств(НовСтр, ЭлементСпискаХДТО);
	
	НовСтр.ЭтоРесурс  = ЭтоРесурс;
	НовСтр.ЭтоРабота  = ЭтоРабота;
	
	Если ЭлементСпискаХДТО.Свойства().Получить("Тип") = Неопределено Тогда
		// попадаются сметы с ресурсами без указания типа
		//Пока что считаю все такие ресурсы материальными - пока не будет выработано другое решение.
		НовСтр.Тип = "2";
	КонецЕсли;

	Если ЭлементСпискаХДТО.Свойства().Получить("Объем") <> Неопределено Тогда
			
		НовСтр.Объем = СтрокаВЧисло(ЭлементСпискаХДТО.Объем);
			
	КонецЕсли;
	
	Если ЭтоРабота и ЭлементСпискаХДТО.Свойства().Получить("ID") <> Неопределено Тогда
			
		НовСтр.КодWBS = ЭлементСпискаХДТО.ID;
			
	КонецЕсли;

	// постобработка
	Если НовСтр.ЭтоРабота Тогда   // работа
		
		НовСтр.НормативныйСборник = ЗаполнитьНормативныйСборник(НовСтр.КодСНБ);
		
		НовСтр.ЕдиницаИзмерения = НайтиСоздатьединицуИзмерения_смета(НовСтр.Измеритель);
		
 		НовСтр.ВидРаботы = НайтиРаботу(НовСтр, Объект.Проект, КэшРаботПроекта, АвтосозданиеWBS1c);
 			
		ЗаполнитьСтоимости(ЭлементСпискаХДТО, НовСтр, ПоказательСП, флФорматСметы, РасчетНР1ОтРазницы, ОтключитьАвтокоректированиеРесурсов);

		// ТОЛЬКО БЕЗ АВТОПОМЕЩЕНИЯ
		Если ЭтоРаботаРесурс Тогда // Работа-ресурс
			
			Если не БезРесурсов и не АвтопомещениеРесурсовВРаботы Тогда
				ДобавитьЭлементВДерево(НовСтр, ЭлементСпискаХДТО, Ложь, Истина, Ложь); // как ресурс
			КонецЕсли;
			
		ИначеЕсли  НовСтр.Тип = "0" Тогда// обычная работа
			
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Тип работы не обрабатывается, обратитесь к разработчику: тип "+НовСтр.Тип);
		КонецЕсли;

	ИначеЕсли не НовСтр.ЭтоРабота и не НовСтр.ЭтоРесурс Тогда   // конструктив		
		
		НовСтр.ВидРаботы = НайтиКонструктив(НовСтр, Объект.Проект, АвтосозданиеWBS1c);

	ИначеЕсли  НовСтр.ЭтоРесурс и не БезРесурсов Тогда   // ресурс	
		
		ДобавитьЭлементВДерево_Ресурс(ТекущийЭлементДерева, ЭлементСпискаХДТО, НовСтр);
		
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

&НаСервере
Функция ДобавитьЭлементВДерево_Ресурс(ТекущийЭлементДерева, ЭлементСпискаХДТО, НовСтр)
	
	НовСтр.КлючСтроки = ТекущийЭлементДерева.КлючСтроки;
	
	НовСтр.ЕдиницаИзмерения = НайтиСоздатьединицуИзмерения_смета(НовСтр.Измеритель);

	// 1 РАСЧЕТ КОЛИЧЕСТВА 
	
	Если ЭлементСпискаХДТО.Свойства().Получить("Норма") <> Неопределено Тогда
		
		Если флФорматСметы = 556 или флФорматСметы = 2018 Тогда   // норма как норматив на единицу работы
			
			НовСтр.НормаРасхода = СтрокаВЧисло(ЭлементСпискаХДТО.Норма);
			НовСтр.Объем =  Окр(НовСтр.НормаРасхода  *  ТекущийЭлементДерева.Объем, 3);
			
			Если  флФорматСметы = 2018 или НовСтр.Объем = 0 ИЛИ НовСтр.Тип = "2"  Тогда  // не округляем мелкие объемы И МАТЕРИАЛЫ и в формате 2018
				НовСтр.Объем =  Окр(НовСтр.НормаРасхода  *  ТекущийЭлементДерева.Объем, 6);
			КонецЕсли;

		иначеЕсли флФорматСметы = 551 Тогда  // норма как общий объем на работу
			
			Если ТекущийЭлементДерева.Объем <> 0 Тогда
				НовСтр.Объем =  СтрокаВЧисло(ЭлементСпискаХДТО.Норма);
				НовСтр.НормаРасхода = СтрокаВЧисло(ЭлементСпискаХДТО.Норма) / ТекущийЭлементДерева.Объем;					
			иначе
				НовСтр.НормаРасхода = 0;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	//2 РАСЧЕТ СУММЫ  и ЦЕНЫ
	
	Если ЭлементСпискаХДТО.Свойства().Получить("Цена") <> Неопределено Тогда
		
		НовСтр.Цена =  СтрокаВЧисло(ЭлементСпискаХДТО.Цена);
		
 		НовСтр.Сумма = Окр(НовСтр.Объем	* НовСтр.Цена, 2);
		
 	КонецЕсли;
	
	Если не АвтопомещениеРесурсовВРаботы Тогда
		
		Если ТекущийЭлементДерева.Тип = "6" // Машинные услуги (?)
			или ТекущийЭлементДерева.Тип = "1" //материал
			или ТекущийЭлементДерева.Тип = "2" // оборудование
			или ТекущийЭлементДерева.Тип = "5" // материал

			Тогда 
			// Работы-ресурсы - берем данные из работы и трансформируем
			
			НовСтр.Сумма = ТекущийЭлементДерева.Сумма;
			
			Если ТекущийЭлементДерева.Объем <> 0 Тогда
				НовСтр.Цена  = ТекущийЭлементДерева.Сумма/ ТекущийЭлементДерева.Объем;	
			КонецЕсли;
						
			Если ТекущийЭлементДерева.Тип = "6"  Тогда
				НовСтр.Тип = "3";  // Машины и механизмы
			ИначеЕсли ТекущийЭлементДерева.Тип = "1" или ТекущийЭлементДерева.Тип = "5" или ТекущийЭлементДерева.Тип = "2" Тогда
				НовСтр.Тип = "2"; // Материалы
			Иначе
				НовСтр.Тип = "2";  // Материалы
			КонецЕсли;

			НовСтр.НормаРасхода =  1;
			
		КонецЕсли;

	КонецЕсли;

	Если ЭлементСпискаХДТО.Свойства().Получить("ЗМ") <> Неопределено Тогда
		
		НовСтр.СуммаЗПМашинистов = Окр(НовСтр.Объем	* СтрокаВЧисло(ЭлементСпискаХДТО.ЗМ), 2);
		
	КонецЕсли;

	// по машинистам в файле нет суммовых показателей - на практике такой ресурс один 
	// возьмем стоимость из самых итогов работы
 	Если НовСтр.Название = "Затраты труда машинистов" Тогда
		
		НовСтр.Сумма  = ТекущийЭлементДерева.СуммаЗПМашинистов; // Родитель это работа в целом	
		//НовСтр.СуммаЗПМашинистов = ТекущийЭлементДерева.СуммаЗПМашинистов;
 		
		Если НовСтр.Объем <> 0 Тогда
			НовСтр.Цена  = НовСтр.Сумма/ НовСтр.Объем;	
		КонецЕсли;
		
		НовСтр.ИсключитьИзСебестоимости = Истина;   // не учитываем их в расчетах себестоимости
		
	КонецЕсли;
	
	// вызов создания/поиска ресурса сметы
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Шифр", НовСтр.КодСНБ);
	СтруктураПараметров.Вставить("Наименование", НовСтр.Название);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", НовСтр.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("Тип", НовСтр.тип);
	СтруктураПараметров.Вставить("РодительСсылка", РодительСсылка);
	СтруктураПараметров.Вставить("АвтосозданиеНедостающихРесурсов", АвтосозданиеНедостающихРесурсов);
	СтруктураПараметров.Вставить("ЭтоЗарплатаМашинистов", НовСтр.ИсключитьИзСебестоимости);
	СтруктураПараметров.Вставить("ЭтоОборудование", ТекущийЭлементДерева.Тип = "2");
	СтруктураПараметров.Вставить("ТипРесурса",  Неопределено);
 	
	НовСтр.ВидРаботы =  ЗаполнитьРесурс(СтруктураПараметров, КэшРесурсов);
 	НовСтр.ТипРесурса = СтруктураПараметров.ТипРесурса;
	
	Если СтруктураПараметров.Свойство("ОписаниеОшибки") Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ОписаниеОшибки) Тогда
			
			НовСтр.ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;
			НовСтр.ЕстьОшибка = Истина;
			
			ЕстьКритичныеОшибки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьРесурс(НовСтр, ТекущийЭлементДерева.ВидРаботы);  // доптаблица с ресурсами		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоказатель(ВСЕГОСвойстваСтоимости, ЕДИНИЦАСвойстваСтоимости, Объем, ИмяПоказателя, ОтключитьАвтокоректированиеРесурсов)
	
	Рез = 0;

	Если ОтключитьАвтокоректированиеРесурсов Тогда  // приоритет у цен

		Если ЕДИНИЦАСвойстваСтоимости.Свойства().Получить(ИмяПоказателя) <> Неопределено  Тогда
			Рез =  СтрокаВЧисло(ЕДИНИЦАСвойстваСтоимости[ИмяПоказателя]) * Объем;
		КонецЕсли;
		
		Если Рез = 0 и ВСЕГОСвойстваСтоимости.Свойства().Получить(ИмяПоказателя) <> Неопределено  Тогда
			Рез =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости[ИмяПоказателя]);
		КонецЕсли;

	иначе // приоритет у стоимости	
		
		Если ВСЕГОСвойстваСтоимости.Свойства().Получить(ИмяПоказателя) <> Неопределено  Тогда
			Рез =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости[ИмяПоказателя]);
		КонецЕсли;
		
		Если  Рез = 0 и ЕДИНИЦАСвойстваСтоимости.Свойства().Получить(ИмяПоказателя) <> Неопределено  Тогда
			Рез =  СтрокаВЧисло(ЕДИНИЦАСвойстваСтоимости[ИмяПоказателя]) * Объем;
		КонецЕсли;
		
	КонецЕсли;   // Если ОтключитьАвтокоректированиеРесурсов Тогда 
 	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСтоимости(ЭлементСпискаХДТО, НовСтр, ПоказательСП, флФорматСметы, РасчетНР1ОтРазницы, ОтключитьАвтокоректированиеРесурсов)
	
	Если ЭлементСпискаХДТО.Свойства().Получить("СТОИМОСТЬ") <> Неопределено Тогда
		
		ВСЕГОСвойстваСтоимости =  ЭлементСпискаХДТО.СТОИМОСТЬ.ВСЕГО;
		ЕДИНИЦАСвойстваСтоимости =  ЭлементСпискаХДТО.СТОИМОСТЬ.ЕДИНИЦА;
		
 		// СТОИМОСТИ 

		//РАСЧЕТ СТОИМОСТИ По ЦЕНАМ  		
		
		// иногда почему то нет стоимости в секции  СТОИМОСТЬ но есть в ЕДИНИЦА
		Если  ЕДИНИЦАСвойстваСтоимости.Свойства().Получить("ПЗ") <> Неопределено  Тогда
			НовСтр.Сумма =  СтрокаВЧисло(ЕДИНИЦАСвойстваСтоимости.ПЗ) * НовСтр.Объем;
		иначеЕсли ЕДИНИЦАСвойстваСтоимости.Свойства().Получить("ОТП") <> Неопределено  Тогда  //оборудование =  нет прямых затрат	
			НовСтр.Сумма =  СтрокаВЧисло(ЕДИНИЦАСвойстваСтоимости.ОТП) * НовСтр.Объем;
		КонецЕсли;
		
		Если НовСтр.Сумма = 0 Тогда 			
			//Стоимость работы в целом
			Если  ВСЕГОСвойстваСтоимости.Свойства().Получить("ПЗ") <> Неопределено Тогда
				НовСтр.Сумма =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости.ПЗ);
			иначеЕсли ЕДИНИЦАСвойстваСтоимости.Свойства().Получить("ОТП") <> Неопределено  Тогда  //оборудование нет прямых затрат
				НовСтр.Сумма =  СтрокаВЧисло(ЕДИНИЦАСвойстваСтоимости.ОТП) * НовСтр.Объем;
			КонецЕсли;
		КонецЕсли;

		// Сумма основной зарплаты  
 		
		НовСтр.СуммаЗП = ПолучитьПоказатель(ВСЕГОСвойстваСтоимости, ЕДИНИЦАСвойстваСтоимости, НовСтр.Объем, "ЗП", ОтключитьАвтокоректированиеРесурсов);

		// Сумма эксплуатации механизмов	
 		НовСтр.СуммаЕМ = ПолучитьПоказатель(ВСЕГОСвойстваСтоимости, ЕДИНИЦАСвойстваСтоимости, НовСтр.Объем, "ЕМ", ОтключитьАвтокоректированиеРесурсов);

		// Материалы   
 		 НовСтр.СуммаМТ =  ПолучитьПоказатель(ВСЕГОСвойстваСтоимости, ЕДИНИЦАСвойстваСтоимости, НовСтр.Объем, "МТ", ОтключитьАвтокоректированиеРесурсов);

		// МАШИНИСТЫ  
 		НовСтр.СуммаЗПМашинистов =   ПолучитьПоказатель(ВСЕГОСвойстваСтоимости, ЕДИНИЦАСвойстваСтоимости, НовСтр.Объем, "ЗМ", ОтключитьАвтокоректированиеРесурсов);
		
		// НАКЛАДНЫЕ

		Если флФорматСметы = 2018  Тогда // в формате 2018 накладные указаны как процент
			
			Если ЭлементСпискаХДТО.Свойства().Получить("НК1") <> Неопределено Тогда
				
 				НовСтр.НакладныеРасходы =  (НовСтр.СуммаЗП + НовСтр.СуммаЗПМашинистов) *  ЭлементСпискаХДТО.НК1 / 100;
				
			КонецЕсли;
			
		иначе
			
			Если  ВСЕГОСвойстваСтоимости.Свойства().Получить("НК1") <> Неопределено  Тогда
				НовСтр.НакладныеРасходы = СтрокаВЧисло(ВСЕГОСвойстваСтоимости.НК1);
			КонецЕсли;
			
			Если  ВСЕГОСвойстваСтоимости.Свойства().Получить("НК2") <> Неопределено  Тогда
				НовСтр.НакладныеРасходыРаспред = СтрокаВЧисло(ВСЕГОСвойстваСтоимости.НК2);
			КонецЕсли;
			
			Если не РасчетНР1ОтРазницы и
				НовСтр.НакладныеРасходы = 0 и ЭлементСпискаХДТО.Свойства().Получить("НК1") <> Неопределено  Тогда
				НовСтр.НакладныеРасходы =  (НовСтр.СуммаЗП + НовСтр.СуммаЗПМашинистов) *  ЭлементСпискаХДТО.НК1 / 100;	
			КонецЕсли;
			
		КонецЕсли;

		Если  ВСЕГОСвойстваСтоимости.Свойства().Получить("СР") <> Неопределено  Тогда
			НовСтр.СР =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости.СР); //разряд?
		КонецЕсли;

		// СМЕТНАЯ ПРИБЫЛЬ 
		Если  ВСЕГОСвойстваСтоимости.Свойства().Получить("СП") <> Неопределено и СтрокаВЧисло(ВСЕГОСвойстваСтоимости.СП) <> 0  Тогда
			
			НовСтр.СметнаяПрибыль =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости.СП);
			
		Иначе
			// Работа-ресурс  по ним в файле нет сметной прибыли
			// рассчитаем
			
			Если ПоказательСП <> 0 Тогда 				
				
				Если флФорматСметы <> 2018 
					или (флФорматСметы = 2018 и НовСтр.Тип <> "2") //на оборудование не надо
			 		Тогда
					НовСтр.СметнаяПрибыль = (НовСтр.Сумма + НовСтр.НакладныеРасходы + НовСтр.НакладныеРасходыРаспред) * ПоказательСП / 100;			
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		НовСтр.СуммаВСЕГО =  СтрокаВЧисло(ВСЕГОСвойстваСтоимости.ВСЕГО);
		
		Если НовСтр.СуммаВСЕГО = 0 Тогда
			НовСтр.СуммаВСЕГО = НовСтр.Сумма + НовСтр.НакладныеРасходы + НовСтр.НакладныеРасходыРаспред + НовСтр.СметнаяПрибыль;
		КонецЕсли;
		
		Если НовСтр.Объем < 0 Тогда //удостоверимся что все суммы отрицательные, иногда в файле не так
			
			НовСтр.Сумма =  ?(НовСтр.Сумма> 0, - НовСтр.Сумма, НовСтр.Сумма);
			НовСтр.СметнаяПрибыль =   ?(НовСтр.СметнаяПрибыль> 0, - НовСтр.СметнаяПрибыль, НовСтр.СметнаяПрибыль);
			НовСтр.СуммаЕМ =  ?(НовСтр.СуммаЕМ> 0, - НовСтр.СуммаЕМ, НовСтр.СуммаЕМ);
			НовСтр.СуммаЗП =  ?(НовСтр.СуммаЗП> 0, - НовСтр.СуммаЗП, НовСтр.СуммаЗП);
			НовСтр.СуммаЗПМашинистов =  ?(НовСтр.СуммаЗПМашинистов> 0, - НовСтр.СуммаЗПМашинистов, НовСтр.СуммаЗПМашинистов);
			НовСтр.НакладныеРасходы =  ?(НовСтр.НакладныеРасходы> 0, - НовСтр.НакладныеРасходы, НовСтр.НакладныеРасходы);
			НовСтр.НакладныеРасходыРаспред =  ?(НовСтр.НакладныеРасходыРаспред> 0, - НовСтр.НакладныеРасходыРаспред, НовСтр.НакладныеРасходыРаспред);
			НовСтр.СуммаМТ =  ?(НовСтр.СуммаМТ> 0, - НовСтр.СуммаМТ, НовСтр.СуммаМТ);
			НовСтр.СуммаВСЕГО =  ?(НовСтр.СуммаВСЕГО> 0, - НовСтр.СуммаВСЕГО, НовСтр.СуммаВСЕГО);
			
		КонецЕсли;
		
 		НовСтр.СуммаВсегоРасчет = НовСтр.Сумма + НовСтр.СметнаяПрибыль + НовСтр.НакладныеРасходы + НовСтр.НакладныеРасходыРаспред;
  		
		// РАСЧЕТ СТАВКИ СП - делаем в конце - чтобы были посчитаны НР для формата 2
		Если ПоказательСП = 0 и НовСтр.СметнаяПрибыль <> 0   Тогда
			//ПоказательСП = Окр(НовСтр.СметнаяПрибыль / (НовСтр.Сумма + НовСтр.НакладныеРасходы + НовСтр.НакладныеРасходыРаспред), 2) * 100; 	 // рассчитаем для строк где не указана в файле
			ПоказательСП = Окр(НовСтр.СметнаяПрибыль / (НовСтр.СуммаВСЕГО - НовСтр.СметнаяПрибыль), 2) * 100; 
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьУГПР(ДанныеФормы, ДополнительныеПараметры = Неопределено, ОчищатьСуществующуюСтруктуру = ложь)
	
	Перем Организация, НаименованиеВерсии, СтруктураУГПР, ТаблицаСоответствий, НовыйДок;
	
 	Организация = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Проект, "ИНАГРО_Организация");
	
 	Если ДополнительныеПараметры <> Неопределено Тогда
				
		НовыйДок = ДополнительныеПараметры.ПолучитьОбъект();
		
		//НовыйДок.Номер = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДополнительныеПараметры, "Номер");
 		
		Если ОчищатьСуществующуюСтруктуру Тогда
			
			ТабличныеЧасти = Новый Массив;

			ТабличныеЧасти.Добавить(НовыйДок.Работы);
			ТабличныеЧасти.Добавить(НовыйДок.РесурсыМатериалы);
			ТабличныеЧасти.Добавить(НовыйДок.РесурсыТрудовые);
			ТабличныеЧасти.Добавить(НовыйДок.РесурсыМашинные);
			ТабличныеЧасти.Добавить(НовыйДок.СтарыйРаботыПериод);
			ТабличныеЧасти.Добавить(НовыйДок.СоставРабот);
			
			Для каждого ТЧ  Из ТабличныеЧасти Цикл
				ТЧ.Очистить();
			КонецЦикла;
			
		КонецЕсли;
		
	иначе
		
		НовыйДок = Документы.ИНАГРО_УГПР.СоздатьДокумент();
		НовыйДок.УстановитьНовыйНомер();
		
		НовыйДок.Дата = ТекущаяДата();
		НовыйДок.Статус = Перечисления.СтатусыПланов.ВПодготовке;
		НовыйДок.Проект = Объект.Проект;
		НовыйДок.Организация = Организация;
				
	КонецЕсли; //Если ДополнительныеПараметры <> Неопределено Тогда

	НовыйДок.Комментарий =  "Загружено из файла, шифр сметы: "+ШифрСметы;

	// 1 определяем Работы	
 	ВыгрузитьДеревоЗначенийВТаблицуЗначений(РеквизитФормыВЗначение("РаботыДЗ"), НовыйДок.Работы);
	
	// 2 заполняем ресурсы 
	ИтогСтоимостиПоРесурсам = НовыйДок.Работы.Итог("НакладныеРасходы") + НовыйДок.Работы.Итог("НакладныеРасходыРаспред") + НовыйДок.Работы.Итог("СметнаяПрибыль");
	
	Для каждого ТекСтрРес  Из ТаблицаРесурсов Цикл
			
			ИмяТЧ = ИмяТЧПоВидуРесурса(ТекСтрРес.ТипРесурса);
			
			тчТаблицаРесурсов = НовыйДок[ИмяТЧ];
			
			//измерения
			НС = тчТаблицаРесурсов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НС, ТекСтрРес);
			
			// TODO добавить признак в таблицу ресурсов что это затраты-машинисты отдельные (исключаемые)
			Если ТекСтрРес.Название <> "Затраты труда машинистов"  Тогда
				ИтогСтоимостиПоРесурсам = ИтогСтоимостиПоРесурсам + НС.Сумма;
			КонецЕсли;
			
  			НС.Количество = ТекСтрРес.Объем;
 			
			Если ИмяТЧ = "РесурсыМашинные" Тогда
				
			КонецЕсли;
			
			Если НС.Количество <> 0 Тогда // пересчет цены чтобы сгладить применение коэфициентов
				НС.Цена = НС.Сумма / НС.Количество; 
			КонецЕсли;
			
 			////Пересчет норм
			//Если ОбъемРабот <> 0 Тогда
			//	НС.НормаРасхода = НС.Количество / ОбъемРабот;	
			//КонецЕсли;
 			
		КонецЦикла; //Для каждого ТекСтрРес  Из таблРесурсов Цикл

	// 3 - операции  

	//НовыйДок.СметнаяПрибыль = ИтогоПоСмете  * ПоказательСП / 100;
  	
	ЗначениеВДанныеФормы(НовыйДок, ДанныеФормы);

	Если ИтогСтоимостиПоРесурсам <> ИтогоПоСмете Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По данным kenml файла "+ИтогоПоСмете+ ", по данным УГПР: "+ИтогСтоимостиПоРесурсам+" (Общая разница = "+ (ИтогоПоСмете-ИтогСтоимостиПоРесурсам)+")");
 	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция фАвтопомещениеРесурсовВРаботы(РаботыРаздела, ЭлементСпискаХДТО)

	ЭтоРесурс = Истина;
	ЭтоРабота = Ложь;
	
	ПредыдущаяРабота = РаботыРаздела[РаботыРаздела.Количество()-1];
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" -- Предыдущая работа: "+ПредыдущаяРабота.Название);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Работа-ресурс: "+ЭлементСпискаХДТО.Наименование + " помещен в работу = "+ПредыдущаяРабота.Название);

	// Общие реквизиты
	НовСтр = ПредыдущаяРабота.ПолучитьЭлементы().Добавить();
	НовСтр.Название = ЭлементСпискаХДТО.Наименование;
	НовСтр.КлючСтроки = Новый УникальныйИдентификатор;
	НовСтр.КлючСвязи = ПредыдущаяРабота.КлючСтроки;
	
	ЗаполнитьЗначенияСвойств(НовСтр, ЭлементСпискаХДТО);
	
	НовСтр.ЭтоРесурс  = ЭтоРесурс;
	НовСтр.ЭтоРабота  = ЭтоРабота;
	
	Если ПредыдущаяРабота.Объем <> 0 Тогда
		НовСтр.НормаРасхода = НовСтр.Объем / ПредыдущаяРабота.Объем;	
	КонецЕсли;

	// у работ-ресурсов на уровне сметы своя типизация
	Если ЭлементСпискаХДТО.Тип = "6" Тогда
		НовСтр.Тип = "3"; // машины и механизмы
	ИначеЕсли ЭлементСпискаХДТО.Тип = "1" или  ЭлементСпискаХДТО.Тип = "5" Тогда
		НовСтр.Тип = "2"; // материалы
	Иначе
		НовСтр.Тип = "2";  // материалы  
	КонецЕсли;
	
	ЗаполнитьСтоимости(ЭлементСпискаХДТО, НовСтр, ПоказательСП, флФорматСметы, РасчетНР1ОтРазницы, ОтключитьАвтокоректированиеРесурсов);
	
	ДобавитьЭлементВДерево_Ресурс(ПредыдущаяРабота, ЭлементСпискаХДТО,  НовСтр);
	
	// Сливаем накладные расходы и прибыль в работу родитель 			
	ПредыдущаяРабота.НакладныеРасходы = ПредыдущаяРабота.НакладныеРасходы + НовСтр.НакладныеРасходы;
	ПредыдущаяРабота.НакладныеРасходыРаспред = ПредыдущаяРабота.НакладныеРасходыРаспред + НовСтр.НакладныеРасходыРаспред;
	ПредыдущаяРабота.СметнаяПрибыль = ПредыдущаяРабота.СметнаяПрибыль + НовСтр.СметнаяПрибыль;

КонецФункции

// ВСПОМОГАТЕЛЬНЫЕ
&наКлиентеНаСервереБезКонтекста
Функция ЭтоЧисло_Найти(Слово)
	
	Если не ЗначениеЗаполнено(Слово) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Цифры = "1234567890-"; // допустимы числа + символ "-"
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

&НаСервере
Функция СкорректироватьОплатуМашинистов(Ветка_Работа)
	Перем ЭлементОсновнаяЗП;
	// для случаев когда  в смете заложены надбавки к затратам труда машиниста 
	//и не включены в стоимость основных ресурсов - в данном случае в стоимость машин
	//нужна корретировка
	
	Если Ветка_Работа.СуммаЗПМашинистов <> 0 Тогда
		
		тчРесурсы = Ветка_Работа.ПолучитьЭлементы();
		
		Если тчРесурсы.Количество()   Тогда
			
			ИтогСуммаЗПМашинистов = 0;
			
			МассивРесурсовСЗарплатой = новый Массив;
			
			Для каждого ЭлементДерева Из тчРесурсы Цикл
				
				Если ЭлементДерева.СуммаЗПМашинистов<> 0 Тогда
					ИтогСуммаЗПМашинистов = ИтогСуммаЗПМашинистов + ЭлементДерева.СуммаЗПМашинистов;
					МассивРесурсовСЗарплатой.Добавить(ЭлементДерева);
				КонецЕсли;
 				
			КонецЦикла;
			
			Если ИтогСуммаЗПМашинистов <> 0 и  ИтогСуммаЗПМашинистов <> Ветка_Работа.СуммаЗПМашинистов Тогда
				
				РазницаКРаспределению =  Ветка_Работа.СуммаЗПМашинистов - ИтогСуммаЗПМашинистов;
				
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Распределена разница "+РазницаКРаспределению+  " по работе "+Ветка_Работа.Название + " (код WBS "+Ветка_Работа.КодWBS+")");
 				
				Для каждого ЭлементДерева Из МассивРесурсовСЗарплатой Цикл
					
					Если ИтогСуммаЗПМашинистов=0 Тогда
						Прервать;
					КонецЕсли;
					
					Разница =  Окр(РазницаКРаспределению / ИтогСуммаЗПМашинистов * ЭлементДерева.СуммаЗПМашинистов, 0);	
					
					ИтогСуммаЗПМашинистов = ИтогСуммаЗПМашинистов - ЭлементДерева.СуммаЗПМашинистов;
					
					//ЭлементДерева.Сумма	 = 	ЭлементДерева.Сумма + Разница;
					ЭлементДерева.СуммаЗПМашинистов	 = 	ЭлементДерева.СуммаЗПМашинистов + Разница;

					РазницаКРаспределению = РазницаКРаспределению - Разница;
					
					НайдСтроки = ТаблицаРесурсов.НайтиСтроки(Новый Структура("КлючСтроки, Ресурс", ЭлементДерева.КлючСтроки, ЭлементДерева.ВидРаботы));
					
					Для каждого СтрокаРесурс Из НайдСтроки Цикл
						//СтрокаРесурс.Сумма = ЭлементДерева.Сумма;
						СтрокаРесурс.СуммаЗПМашинистов = ЭлементДерева.СуммаЗПМашинистов;
					КонецЦикла;
					
 				КонецЦикла;
				
			КонецЕсли; //Если ИтогСуммаЗПМашинистов > 0 
 			
		КонецЕсли; //Если тчРесурсы.Количество()   Тогда

 	КонецЕсли; //Если Ветка_Работа.СуммаЗПМашинистов > 0 Тогда
	
КонецФункции

&НаСервере
Функция СкорректироватьОсновнуюОплату(Ветка_Работа, ТолькоНулевую = Ложь)
	Перем ЭлементОсновнаяЗП;
	// для случаев когда  в смете заложены надбавки к затратам труда  
	//и не включены в стоимость основных ресурсов - в данном случае в стоимость 
	//нужна корретировка

	тчРесурсы = Ветка_Работа.ПолучитьЭлементы();
	
	Если тчРесурсы.Количество()   Тогда						
		
		Для каждого ЭлементДерева Из тчРесурсы Цикл
			
			//TODO других вариантов пока не видно - только по названию или набору шифров 
			Если ЭлементДерева.Название = "Затраты труда рабочих-строителей" Тогда
				ЭлементОсновнаяЗП = ЭлементДерева;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; //Если тчРесурсы.Количество()   Тогда

	Если ЭлементОсновнаяЗП <> Неопределено Тогда 		

		Если (Ветка_Работа.СуммаЗП <> 0	и ЭлементОсновнаяЗП.Сумма <>  Ветка_Работа.СуммаЗП) // не совпадает зп по работе в целом и по ресурсу
			
			или (Ветка_Работа.СуммаЗП =0 ) // по работе ноль а ресурс с суммой есть (да бывает и такое)
			
			Тогда
			
			Если ТолькоНулевую и ЭлементОсновнаяЗП.Сумма <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			
 			ЭлементОсновнаяЗП.Сумма = Ветка_Работа.СуммаЗП;
			
			НайдСтроки = ТаблицаРесурсов.НайтиСтроки(Новый Структура("КлючСтроки, Ресурс", ЭлементОсновнаяЗП.КлючСтроки, ЭлементОсновнаяЗП.ВидРаботы));
			
			Для каждого СтрокаРесурс Из НайдСтроки Цикл
				СтрокаРесурс.Сумма = ЭлементОсновнаяЗП.Сумма;
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли; //Если Ветка_Работа.СуммаЗПМашинистов > 0 Тогда
	
КонецФункции

&НаСервере
Функция СкорректироватьСтоимостьМашин(Ветка_Работа)
	//	 Иногда стоимость надбавок не включена в стоимость ресурсов   - фиксим это сравнением итогов работы и ресурсов и распределением разницы
	
	Если Ветка_Работа.СуммаЕМ <> 0 Тогда   		
		
		тчРесурсы = Ветка_Работа.ПолучитьЭлементы();
		
		Если тчРесурсы.Количество()  Тогда
			
			ИтогСуммаСуммаЕМ = 0;
			
			МассивРесурсов = новый Массив;
			
			ЭлементПрочиеМашины = Неопределено;
			
			Для каждого ЭлементДерева Из тчРесурсы Цикл
				
				Если ЭлементДерева.ТипРесурса = Перечисления.ИНАГРО_ТипыРесурсов.МашиныИМеханизмы Тогда
					ИтогСуммаСуммаЕМ = ИтогСуммаСуммаЕМ + ЭлементДерева.Сумма;
					МассивРесурсов.Добавить(ЭлементДерева);
					
					Если ЭлементДерева.Название = "Прочие машины" Тогда // пока других вариантов нет
						ЭлементПрочиеМашины = ЭлементДерева;
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;

			РазницаКРаспределению =  Ветка_Работа.СуммаЕМ - ИтогСуммаСуммаЕМ;
			 	
			Если ЭлементПрочиеМашины <> Неопределено и ЭлементПрочиеМашины.Сумма = 0 Тогда // если есть прочие машины без стоимости то разницу вешаем только на них
				
				МассивРесурсов.Очистить();
				МассивРесурсов.Добавить(ЭлементПрочиеМашины);
				ИтогСуммаСуммаЕМ =  0.01;
				ЭлементПрочиеМашины.Сумма = 0.01;
				
			КонецЕсли;

			Если (ИтогСуммаСуммаЕМ <> 0 и ИтогСуммаСуммаЕМ <> Ветка_Работа.СуммаЕМ) Тогда

				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Распределена разница "+РазницаКРаспределению+  " по работе "+Ветка_Работа.Название + " (код WBS "+Ветка_Работа.КодWBS+")");
							
				Для каждого ЭлементДерева Из МассивРесурсов Цикл
					
					Если ИтогСуммаСуммаЕМ=0 Тогда
						Прервать;
					КонецЕсли;
					
 					Разница =  Окр((РазницаКРаспределению / ИтогСуммаСуммаЕМ) * ЭлементДерева.Сумма, 2);		

					ИтогСуммаСуммаЕМ = ИтогСуммаСуммаЕМ - ЭлементДерева.Сумма;
					
					ЭлементДерева.Сумма	 = 	ЭлементДерева.Сумма + Разница;
					
					РазницаКРаспределению = РазницаКРаспределению - Разница;
					
					НайдСтроки = ТаблицаРесурсов.НайтиСтроки(Новый Структура("КлючСтроки, Ресурс", ЭлементДерева.КлючСтроки, ЭлементДерева.ВидРаботы));
					
					Для каждого СтрокаРесурс Из НайдСтроки Цикл
						СтрокаРесурс.Сумма = ЭлементДерева.Сумма;
					КонецЦикла;
					
				КонецЦикла;

			КонецЕсли; //Если ИтогСуммаЗПМашинистов > 0 

		КонецЕсли; //Если тчРесурсы.Количество()   Тогда

	КонецЕсли;

КонецФункции

&НаСервере
Функция СкорректироватьСтоимостьМатериалов(Ветка_Работа)
	//	 Иногда стоимость надбавок не включена в стоимость ресурсов   - фиксим это сравнением итогов работы и ресурсов и распределением разницы
	
	Если Ветка_Работа.СуммаМТ <> 0 Тогда   		
		
		тчРесурсы = Ветка_Работа.ПолучитьЭлементы();
		
		Если тчРесурсы.Количество()  Тогда
			
			ИтогСуммаСуммаМТ = 0;
			
			МассивРесурсов = новый Массив;
			ЭлементПрочиеМатериалы = Неопределено;
			
			Для каждого ЭлементДерева Из тчРесурсы Цикл
				
				Если ЭлементДерева.ТипРесурса = Перечисления.ИНАГРО_ТипыРесурсов.Материальные Тогда
									
					ИтогСуммаСуммаМТ = ИтогСуммаСуммаМТ + ЭлементДерева.Сумма;
					МассивРесурсов.Добавить(ЭлементДерева);
					
					Если ЭлементДерева.Название = "Прочие материалы" Тогда // пока других вариантов нет
						ЭлементПрочиеМатериалы = ЭлементДерева;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
			
			РазницаКРаспределению =  Ветка_Работа.СуммаМТ - ИтогСуммаСуммаМТ;
			
 			Если ЭлементПрочиеМатериалы <> Неопределено и ЭлементПрочиеМатериалы.Сумма = 0 Тогда // если есть прочие материалы без стоимости то разницу вешаем только на них
				
				МассивРесурсов.Очистить();
				МассивРесурсов.Добавить(ЭлементПрочиеМатериалы);
				ИтогСуммаСуммаМТ =  0.01;
				ЭлементПрочиеМатериалы.Сумма = 0.01;
				
			КонецЕсли;
			
			Если ИтогСуммаСуммаМТ <> 0 и  ИтогСуммаСуммаМТ <> Ветка_Работа.СуммаМТ Тогда				
				
 				Для каждого ЭлементДерева Из МассивРесурсов Цикл
					
					Если ИтогСуммаСуммаМТ=0 Тогда
						Прервать;
					КонецЕсли;
					
 					Разница =  Окр((РазницаКРаспределению / ИтогСуммаСуммаМТ) * ЭлементДерева.Сумма, 2);							

					ИтогСуммаСуммаМТ = ИтогСуммаСуммаМТ - ЭлементДерева.Сумма;
					
					ЭлементДерева.Сумма	 = 	ЭлементДерева.Сумма + Разница;

					РазницаКРаспределению = РазницаКРаспределению - Разница;
					
					НайдСтроки = ТаблицаРесурсов.НайтиСтроки(Новый Структура("КлючСтроки, Ресурс", ЭлементДерева.КлючСтроки, ЭлементДерева.ВидРаботы));
					
					Для каждого СтрокаРесурс Из НайдСтроки Цикл
						СтрокаРесурс.Сумма = ЭлементДерева.Сумма;
 					КонецЦикла;
					
 				КонецЦикла;
				
			КонецЕсли; //Если ИтогСуммаЗПМашинистов > 0 

		КонецЕсли; //Если тчРесурсы.Количество()   Тогда

	КонецЕсли;

КонецФункции

&НаСервере
Функция СкорректироватьНакладныеРасходы(Ветка_Работа)	
	
	Если флФорматСметы = 2018 и  Ветка_Работа.СуммаВСЕГО <> 0 Тогда //  накладные расходы нужно рассчитать
		
		//Разница = Ветка_Работа.СуммаВСЕГО - Ветка_Работа.Сумма - Ветка_Работа.СметнаяПрибыль - Ветка_Работа.НакладныеРасходы;
		//Ветка_Работа.НакладныеРасходыРаспред =  Разница;  		
		// отмена - рассчитываем по проценту в работе
		
	ИначеЕсли Ветка_Работа.СуммаВСЕГО <> 0 и ПоказательСП = 0 и Ветка_Работа.НакладныеРасходы=0 Тогда // накладные расходы можно рассчитать, есть кривые сметы без НР и СП, сначало накинем НР
		
		РесурсыВетки = Ветка_Работа.ПолучитьЭлементы();
		ОбщаяРесурснаяСебестоимость = 0;
		
		Для каждого ЭлементРесурс Из РесурсыВетки Цикл
			
			Если не ЭлементРесурс.ИсключитьИзСебестоимости Тогда
				ОбщаяРесурснаяСебестоимость = ОбщаяРесурснаяСебестоимость + ЭлементРесурс.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		Разница = Ветка_Работа.СуммаВСЕГО - ОбщаяРесурснаяСебестоимость;
		
		Если Разница > 0 Тогда
			
			Ветка_Работа.НакладныеРасходы =  Разница;
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Разница в работе "+Ветка_Работа.КодWBS+"/"+Ветка_Работа.Название + " установлена как накладные расходы 2: "+ Разница);
			
		ИначеЕсли Разница < 0 и Ветка_Работа.Сумма < 0  Тогда // это минусовая работа
			
			Ветка_Работа.НакладныеРасходы =  Разница;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Разница в работе "+Ветка_Работа.КодWBS+"/"+Ветка_Работа.Название + " установлена как накладные расходы 2: "+ Разница);
			
		иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("!!! ОТРИЦАТЕЛЬНАЯ Разница стоимостей в файле и расчетная по работе "+Ветка_Работа.КодWBS+"/"+Ветка_Работа.Название + " нужна проверка данных"+ Разница);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьединицуИзмерения_смета(Наименование)
	
	Перем ЕдиницаИзмерения;
	
	ЕдиницаИзмерения = СМ_СметаВызовСервера.НайтиЕдиницуИзмеренияПоСтроке(Наименование);
	
	Если ЕдиницаИзмерения.Пустая() Тогда
		Единица = Справочники.СМ_ЕдиницыИзмеренияСмета.СоздатьЭлемент();
		Единица.Наименование = Наименование;
		Единица.ОбменДанными.Загрузка = Истина;;
		Единица.Код = "000";
		Единица.Записать();
		ЕдиницаИзмерения = Единица.Ссылка;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

&НаСервере
Функция ДобавитьРесурс(СтрокаИзДерева, ВидРаботыРодитель)
	
	НовСтр =  ТаблицаРесурсов.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, СтрокаИзДерева);
	
	НовСтр.Ресурс =  СтрокаИзДерева.ВидРаботы;
	НовСтр.ВидРаботы = ВидРаботыРодитель;
   
КонецФункции

&НаСервере
Функция ЗаполнитьНормативныйСборник(Шифр)	
	Перем Рез;

	МассивСтрок =  КэшНормативныхСборников.НайтиСтроки(Новый Структура("КодНормативнойРасценки", Шифр));
	
	Для каждого СтрокаМассива Из МассивСтрок Цикл
		Рез = СтрокаМассива.Ссылка;
	КонецЦикла;

	Если  Рез = Неопределено  Тогда // в формате биай?
		
		МассивСтрок =  КэшНормативныхСборников.НайтиСтроки(Новый Структура("КодНормативнойРасценки",  Шифр+"-00"));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Рез = СтрокаМассива.Ссылка;
		КонецЦикла;
		
	КонецЕсли;

	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьРесурс_ПроверкаСоответвияРесурсаОжиданиям(СтруктураПараметров, КэшРесурсов, Ресурс)

	Если Ресурс <> Неопределено Тогда
 		
		/// проверим совпадение типа ресурса ожидаемомму
		
		СтруктураПроверяемыхРеквизитов = ИНАГРО_ОбщегоНазначенияВызовСервера.ПолучитьЗначенияРеквизитов(Ресурс, "ВидРесурса, ИНАГРО_ТипРесурсов");
		
		Если  СтруктураПараметров.Тип = "1" Тогда  // РАБОЧИЕ (и машинисты)
			
			Если СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов <> Перечисления.ИНАГРО_ТипыРесурсов.ТрудовыеРесурсы Тогда
				СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти трудовой ресурс, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов);
			Иначе
				Если СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаРабочих 
					и СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов Тогда	
					СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти трудовой ресурс, а нашли  в 1с "+СтруктураПроверяемыхРеквизитов.ВидРесурса);
 				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли  СтруктураПараметров.Тип = "2" Тогда  // МАТЕРИАЛЫ

			Если СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов <> Перечисления.ИНАГРО_ТипыРесурсов.Материальные Тогда
				СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти материальный ресурс, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов);
			Иначе
				
				Если СтруктураПараметров.ЭтоОборудование  ТОгда
					Если СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.Оборудование Тогда
						СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти оборудование, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ВидРесурса);
					КонецЕсли;
				иначеЕсли СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.Материалы  Тогда	
					СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти материальный ресурс, а нашли  в 1с "+СтруктураПроверяемыхРеквизитов.ВидРесурса);
				КонецЕсли;
 			КонецЕсли;
			
		ИначеЕсли  СтруктураПараметров.Тип = "3" Тогда  // МАШИНЫ И МЕХАНИЗМЫ		
			
			Если СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов <> Перечисления.ИНАГРО_ТипыРесурсов.МашиныИМеханизмы Тогда
				
				//Если СтруктураПараметров.ЭтоОборудование Тогда
				//	СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти оборудование, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов);	
				//иначе
					СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти машинный ресурс, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ИНАГРО_ТипРесурсов);
				//КонецЕсли;
  				
			Иначе
				
				Если СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.МашиныИМеханизмы 
					и СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.Оборудование 
					и СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.Транспортировка
					и СтруктураПроверяемыхРеквизитов.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.Перебазировка Тогда	

					//Если СтруктураПараметров.ЭтоОборудование Тогда
					//	СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти оборудование, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ВидРесурса);	
					//иначе	
						СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали найти машинный ресурс, а нашли в 1с "+СтруктураПроверяемыхРеквизитов.ВидРесурса);
					//КонецЕсли;

				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьРесурс_ПоискПоШифру(СтруктураПараметров, КэшРесурсов)
	
	Перем Рез;

	МассивСтрок =  КэшРесурсов.НайтиСтроки(Новый Структура("Код", СтруктураПараметров.Шифр));
	
	Для каждого СтрокаМассива Из МассивСтрок Цикл			
		
		Если СтруктураПараметров.ЭтоЗарплатаМашинистов
			и СтрокаМассива.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов	Тогда
			
			СтруктураПараметров.Вставить("ОписаниеОшибки", "Ожидали машинистов, а в базе 1с ресурс другого типа - нужно проверить, возможны искажения стоимостей");

		КонецЕсли;
		
		Рез = СтрокаМассива.Ссылка;
		СтруктураПараметров.Вставить("ТипРесурса", СтрокаМассива.ИНАГРО_ТипРесурсов);
		Прервать;
		
	КонецЦикла;
	
	Если  Рез = Неопределено  Тогда // в формате биай?
		
		МассивСтрок =  КэшРесурсов.НайтиСтроки(Новый Структура("Код",  СтруктураПараметров.Шифр+"-00"));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Рез = СтрокаМассива.Ссылка;
			СтруктураПараметров.Вставить("ТипРесурса", СтрокаМассива.ИНАГРО_ТипРесурсов);
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьРесурс_ПроверкаСоответвияРесурсаОжиданиям(СтруктураПараметров, КэшРесурсов, Рез);
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьРесурс_ПоискПоНаименованию(СтруктураПараметров, КэшРесурсов)
	Перем Рез;
	
	Искомое =  Лев( СокрлП(СтруктураПараметров.Наименование), 1024);
	
	МассивСтрок =  КэшРесурсов.НайтиСтроки(Новый Структура("Наименование",  Искомое));
	
	Для каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если СтруктураПараметров.ЭтоЗарплатаМашинистов
			и СтрокаМассива.ВидРесурса <> Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов	Тогда
			Продолжить; // не подходит	
		КонецЕсли;
			
		Рез = СтрокаМассива.Ссылка;
		СтруктураПараметров.Вставить("ТипРесурса", СтрокаМассива.ИНАГРО_ТипРесурсов);
		
		Прервать;
		
	КонецЦикла;
	
	ЗаполнитьРесурс_ПроверкаСоответвияРесурсаОжиданиям(СтруктураПараметров, КэшРесурсов, Рез);
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьРесурс_Автосоздание(СтруктураПараметров, КэшРесурсов)
	Перем Рез;
	
	ТекРесурсОбъект 					= Справочники.СМ_Ресурсы.СоздатьЭлемент();
	
	Если  СтруктураПараметров.Тип = "1" Тогда  // рабочие и машинисты
		
		Если СтруктураПараметров.ЭтоЗарплатаМашинистов Тогда
			ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов;
		Иначе
			ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаРабочих;
		КонецЕсли;

	ИначеЕсли  СтруктураПараметров.Тип = "2" Тогда  // Материалы
		Если СтруктураПараметров.ЭтоОборудование Тогда
			ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.Оборудование;
		иначе
			ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.Материалы;
		КонецЕсли;
	ИначеЕсли  СтруктураПараметров.Тип = "3" Тогда  // машины и механизмы
		
		//Если СтруктураПараметров.ЭтоОборудование Тогда
		//	ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.Оборудование;
		//иначе
			ТекРесурсОбъект.ВидРесурса = Перечисления.СМ_ВидыРесурсов.МашиныИМеханизмы;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЧисло_Найти(СтруктураПараметров.Шифр) Тогда
		ТекРесурсОбъект.Код 				=  СтруктураПараметров.Шифр;
	иначе
		//ТекРесурсОбъект.ОбменДанными.Загрузка = истина;
	КонецЕсли;
	
	ТекРесурсОбъект.Наименование 		=  СтруктураПараметров.Наименование;
	ТекРесурсОбъект.ДлинноеНаименование =  СтруктураПараметров.Наименование;
	ТекРесурсОбъект.Родитель 			=  СтруктураПараметров.РодительСсылка;
	
	ТекРесурсОбъект.ЕдиницаИзмерения =  СтруктураПараметров.ЕдиницаИзмерения;
	
	// TODO уточнить 
	ТекРесурсОбъект.ГодВыпуска 	     = Перечисления.СМ_ГодыВыпускаБазы.г2017;
	ТекРесурсОбъект.ГруппаРесурсов = Справочники.СМ_ГруппыРесурсов.КаталогBiGroup;
	
	Попытка
		
		ТекРесурсОбъект.ОбменДанными.Загрузка = истина; // иначе ставит новый шифр
		
		ТекРесурсОбъект.Записать();
		
		НовЗаписьКэша = КэшРесурсов.Добавить();
		НовЗаписьКэша.Код =  СтруктураПараметров.Шифр;
		НовЗаписьКэша.Ссылка = ТекРесурсОбъект.Ссылка;
		НовЗаписьКэша.ИНАГРО_ТипРесурсов = ТекРесурсОбъект.ИНАГРО_ТипРесурсов;
		НовЗаписьКэша.Наименование =  Лев(ТекРесурсОбъект.ДлинноеНаименование, 1024);
		НовЗаписьКэша.ВидРесурса  = ТекРесурсОбъект.ВидРесурса;
		
		СтруктураПараметров.Вставить("ТипРесурса", ТекРесурсОбъект.ИНАГРО_ТипРесурсов);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Элемент справочника Ресурсы не записан:'")+" " + ОписаниеОшибки());
	КонецПопытки;
	
	Рез = ТекРесурсОбъект.Ссылка;
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьРесурс(СтруктураПараметров, КэшРесурсов)	
	Перем Рез;
 	
	Если ЗначениеЗаполнено(СтруктураПараметров.Шифр) и ЭтоЧисло_Найти(СтруктураПараметров.Шифр) Тогда		
		// ПОИСК по шифру   		
		Рез = ЗаполнитьРесурс_ПоискПоШифру(СтруктураПараметров, КэшРесурсов)		
		
	КонецЕсли;
 	
	Если Рез = Неопределено тогда
		// поиск по наименованию
		
		Рез = ЗаполнитьРесурс_ПоискПоНаименованию(СтруктураПараметров, КэшРесурсов);
		
	КонецЕсли;
 	
	// АВТОСОЗДАНИЕ  	
	Если  Рез = Неопределено и  СтруктураПараметров.АвтосозданиеНедостающихРесурсов Тогда
		
		Рез = ЗаполнитьРесурс_Автосоздание(СтруктураПараметров, КэшРесурсов);
		
 	иначе	
		
		Если не ЗначениеЗаполнено(СтруктураПараметров.ТипРесурса) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В ресурсе "+СтруктураПараметров.Наименование + " не заполнен тип ресурсов, нужно исправить перед загрузкой");
			
			//Если ПравоДоступа("Изменение",  Метаданные.Справочники.СМ_Ресурсы) Тогда 
			//	
			//	//Попытка
			//	//	Рез.ПолучитьОбъект().Записать();		
			//	//Исключение
			//	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			//	//КонецПопытки;
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Рез = Неопределено Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибки", "Не заполнен ресурс");
	КонецЕсли;

	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	
	Возврат	ИНАГРО_УСПОбщиеФункцииКлиентСервер.СтрокаВЧислоПривести(ИсходнаяСтрока);
	
КонецФункции

 &НаСервере
Процедура ПеренестивУГПРНаСервере(ДанныеФормы, ДополнительныеПараметры, ОчищатьСуществующуюСтруктуру = Ложь)
	
	Если РаботыДЗ.ПолучитьЭлементы().Количество() Тогда
		
		СоздатьУГПР(ДанныеФормы, ДополнительныеПараметры, ОчищатьСуществующуюСтруктуру);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.ЭтоРесурс Тогда
			Продолжить;
		КонецЕсли;
		
		НС = Таблица.Добавить();
		
 		ЗаполнитьЗначенияСвойств(НС, СтрокаДерева);

		Если не СтрокаДерева.ЭтоРабота Тогда
			НС.КороткоеИмя = СтрокаДерева.КодСНБ;
		иначе	
		
		КонецЕсли;
		
		НС.Сумма = 0; // стоимость заказчика не трогаем	
		
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений()

&НаСервереБезКонтекста
Функция НайтиРаботу(НовСтр, Проект, КэшРаботПроекта, СоздаватьАвто = Ложь)
	Перем Рез;
	
	Если не ЗначениеЗаполнено(Проект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(НовСтр.КодСНБ) и ЭтоЧисло_Найти(НовСтр.КодСНБ) Тогда
		// по коду
		
		МассивСтрок =  КэшРаботПроекта.НайтиСтроки(Новый Структура("ШифрПозицииНорматива", НовСтр.КодСНБ));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Рез = СтрокаМассива.Ссылка;
		КонецЦикла;
		
	КонецЕсли;

	Если  Рез = Неопределено  Тогда
		// по наименованию
		
 		МассивСтрок =  КэшРаботПроекта.НайтиСтроки(Новый Структура("Наименование", СокрЛП(НовСтр.Название)));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Рез = СтрокаМассива.Ссылка;
		КонецЦикла;

	КонецЕсли;
	
	Если Рез = Неопределено и СоздаватьАвто Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", НовСтр.Название);
		ПараметрыФормы.Вставить("Владелец", Проект);
		ПараметрыФормы.Вставить("ЕдиницаИзмерения", НовСтр.ЕдиницаИзмерения);
 		ПараметрыФормы.Вставить("ШифрПозицииНорматива", НовСтр.КодСНБ);
		
	 	Если ЗначениеЗаполнено(НовСтр.НормативныйСборник) Тогда
			ПараметрыФормы.Вставить("НормативныйСборник", НовСтр.НормативныйСборник);
		КонецЕсли;
		
		Рез =  Справочники.ИНАГРО_ВидыРаботПроект.АвтосозданиеВидаРаботы(ПараметрыФормы);
		
		Если ЗначениеЗаполнено(Рез) Тогда
			новСтрКеша = КэшРаботПроекта.Добавить();
			новСтрКеша.ШифрПозицииНорматива = НовСтр.КодСНБ;
			новСтрКеша.Ссылка =  Рез;
			новСтрКеша.Наименование =  НовСтр.Название;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Рез;

КонецФункции

 &НаСервереБезКонтекста
Функция НайтиКонструктив(НовСтр, Проект,  СоздаватьАвто = Ложь)
	 
	 Если не ЗначениеЗаполнено(Проект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	 ПараметрыФормы = Новый Структура;
	 ПараметрыФормы.Вставить("Наименование", СокрЛП(НовСтр.Название));
	 ПараметрыФормы.Вставить("Владелец", Проект);
	 ПараметрыФормы.Вставить("УровеньСметы", Перечисления.ИНАГРО_УровеньСметы.РазделСметы);
	 
	 Возврат Справочники.ИНАГРО_КонструктивыПроекта.НайтиПоПараметрам(ПараметрыФормы, СоздаватьАвто);
	 
КонецФункции

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвтосозданиеWBS1c = Истина;
	АвтозаполнениеНормативныхСборников = Истина;
	АвтосозданиеНедостающихРесурсов = ПравоДоступа("Добавление", Метаданные.Справочники.СМ_Ресурсы);
	АвтопомещениеРесурсовВРаботы = Ложь;
	
	РасчетНР1ОтРазницы = Истина;
	
	флФорматСметы = 2018;
	
КонецПроцедуры
    
 &НаСервереБезКонтекста
Функция ИмяТЧПоВидуРесурса(ВидРесурса)
	
	ТаблицаРесурсов = "РесурсыМатериалы";
	
	Если ВидРесурса = Перечисления.ИНАГРО_ТипыРесурсов.ТрудовыеРесурсы  Тогда
		
		ТаблицаРесурсов = "РесурсыТрудовые";
		
	иначеЕсли ВидРесурса = Перечисления.ИНАГРО_ТипыРесурсов.МашиныИМеханизмы Тогда
		
		ТаблицаРесурсов = "РесурсыМашинные";
		
	КонецЕсли;
	
	Возврат  ТаблицаРесурсов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьКэшНормативныхСборников()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СМ_НормативныеСборники.Ссылка,
		|	СМ_НормативныеСборники.КодНормативнойРасценки
		|ИЗ
		|	Справочник.СМ_НормативныеСборники КАК СМ_НормативныеСборники
		|ГДЕ
		|	НЕ СМ_НормативныеСборники.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	ВыборкаДетальныеЗаписи.Индексы.Добавить("КодНормативнойРасценки");

	Возврат ВыборкаДетальныеЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьКэшРесурсов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СМ_Ресурсы.Ссылка,
		|	СМ_Ресурсы.Код,
		|	СМ_Ресурсы.ИНАГРО_ТипРесурсов,
		|	ВЫРАЗИТЬ(СМ_Ресурсы.ДлинноеНаименование КАК СТРОКА(1024)) КАК Наименование,
		|	СМ_Ресурсы.ВидРесурса
		|ИЗ
		|	Справочник.СМ_Ресурсы КАК СМ_Ресурсы
		|ГДЕ
		|	НЕ СМ_Ресурсы.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	ВыборкаДетальныеЗаписи.Индексы.Добавить("Код");
	ВыборкаДетальныеЗаписи.Индексы.Добавить("Наименование");

	Возврат ВыборкаДетальныеЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьКэшРабот(Проект)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИНАГРО_ВидыРаботПроект.Ссылка,
		|	ИНАГРО_ВидыРаботПроект.НаименованиеПолное как Наименование,
		|	ИНАГРО_ВидыРаботПроект.ШифрПозицииНорматива
		|ИЗ
		|	Справочник.ИНАГРО_ВидыРаботПроект КАК ИНАГРО_ВидыРаботПроект
		|ГДЕ
		|	ИНАГРО_ВидыРаботПроект.Владелец = &Проект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	ВыборкаДетальныеЗаписи.Индексы.Добавить("ШифрПозицииНорматива");
	ВыборкаДетальныеЗаписи.Индексы.Добавить("Наименование");
	
	Возврат ВыборкаДетальныеЗаписи;

КонецФункции

&НаСервереБезКонтекста
Процедура ПроектПриИзмененииНаСервере(Проект, АвтосозданиеНедостающихРесурсов, РодительСсылка)
	
	Если АвтосозданиеНедостающихРесурсов Тогда
		
 		// Папка для добавления новых ресурсов
		НаименованиеРодителя = "Ресурсы проекта " + СокрЛП(Проект);
		РодительСсылка = Справочники.СМ_Ресурсы.НайтиПоНаименованию(НаименованиеРодителя, Истина, Справочники.СМ_Ресурсы.Инагро_РесурсыПроектов);
		Если РодительСсылка.Пустая() ИЛИ НЕ РодительСсылка.ЭтоГруппа Тогда
			РодительОбъект = Справочники.СМ_Ресурсы.СоздатьГруппу();
			РодительОбъект.Наименование = НаименованиеРодителя;
			РодительОбъект.Родитель = Справочники.СМ_Ресурсы.Инагро_РесурсыПроектов;
			РодительОбъект.ОбменДанными.Загрузка = Истина;
			РодительОбъект.Записать();
			РодительСсылка = РодительОбъект.Ссылка;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВерсиюСметы()
	
	//5.5.6(556)  - нормы указаны как нормы на единицу
	//5.5.1(551)  - нормы указаны как объемы на работу
	//2018.1(2018) - накладные расходы не указаны в файле, нужен расчет от общей стоимости на разницу(?)
	
	Если ВерсияГенератора = "5.5.6" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "5.5.1" Тогда
		флФорматСметы = 551;
	ИначеЕсли ВерсияГенератора = "5.5.2" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "5.5.2.1" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "5.5.3" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "5.5.3.1" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "5.5.5" Тогда
		флФорматСметы = 556;
	ИначеЕсли ВерсияГенератора = "2018.1" или ВерсияГенератора = "2018" Тогда
		флФорматСметы = 2018;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетСметнойПрибылиСервер()
	
	Если ПоказательСП <> 0 Тогда
		
		РасчетСПРекурсивно(РаботыДЗ);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетСПРекурсивно(Дерево)
	
	ВеткиДерева =   Дерево.ПолучитьЭлементы();
	
	Для каждого Ветка Из ВеткиДерева Цикл	
		
		Если Ветка.ЭтоРабота и Ветка.Тип <> "2" Тогда // не оборудование
			Ветка.СметнаяПрибыль = (Ветка.Сумма + Ветка.НакладныеРасходы + Ветка.НакладныеРасходыРаспред) * ПоказательСП / 100;		
			Продолжить;
		КонецЕсли;
		
		РасчетСПРекурсивно(Ветка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Клиент

&НаКлиенте
Процедура ПеренестивУГПР(Команда)
 		
	Если не ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьПредупреждение(, "Не выбран проект!");
		Возврат;
	КонецЕсли;

	Если ЕстьКритичныеОшибки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("Вопрос_СозданиеУГПРСОшибками", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "При загрузке выявлены ошибки, хотите всё равно создать УГПР (возможно искажение данных)",РежимДиалогаВопрос.ДаНет, 60);
			
	иначе
		ВыполнитьПереносвУГПР()	
	КонецЕсли;

КонецПроцедуры

//Вынести в отдельную процедуру
&НаКлиенте
Процедура Вопрос_СозданиеУГПРСОшибками(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 ВыполнитьПереносвУГПР();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереносвУГПР()

  	Форма = ПолучитьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаДокумента");
	
	ДанныеФормы = Форма.Объект;
	
	ПеренестивУГПРНаСервере(ДанныеФормы, Неопределено);
	
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	
	Форма.Открыть();
	Форма.Модифицированность = Истина;
	Форма.РаботыДЗОбновитьНаСервере(); // 1 последовательность важна  - создаем дерево из таблиц документа
	//Форма.РаспределитьНРиПрибыльНаСервере(); // 2 

КонецПроцедуры

 &НаКлиенте
Процедура РазвернутьВсе(Команда)
	ИНАГРО_УСПОбщиеФункцииКлиентСервер.РазвернутьВсе(РаботыДЗ, Элементы.ДеревоРаботСметы);
КонецПроцедуры
 
&НаКлиенте
Процедура СвернутьВсе(Команда)
	ИНАГРО_УСПОбщиеФункцииКлиентСервер.СвернутьВсе(РаботыДЗ, Элементы.ДеревоРаботСметы);
КонецПроцедуры

 &НаКлиенте
 Процедура ВыбратьФайл(Команда)
	 
	 Если не ЗначениеЗаполнено(Объект.Проект) Тогда
		 ПоказатьПредупреждение(, "Не выбран проект!");
		 Возврат;
	 КонецЕсли;

	 //для веб-клиента требуется дополнительно подключение расширения работы с файлами
	 #Если ВебКлиент Тогда
		 Результат = Неопределено;
		 
		 НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПрочитатьФайлЗавершение2", ЭтаФорма));
		 Возврат;
	 #КонецЕсли
	 
	 //перемещаем файл на сервер во "внутреннее хранилище сервера"
	 ПрочитатьФайлФрагмент1();
	 
КонецПроцедуры

 &НаКлиенте
Процедура ПрочитатьФайлЗавершение2(Подключено, ДополнительныеПараметры) Экспорт
	
	Результат = Подключено;
	
	//если подключить не удалось - требуется установить его (в первый раз)
	Если не Результат Тогда
		НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПрочитатьФайлЗавершение1", ЭтаФорма));
		Возврат;
	КонецЕсли;
	
	ПрочитатьФайлФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлФрагмент1()
	
	ПрочитатьФайлФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлЗавершение1(ДополнительныеПараметры) Экспорт
	
	//устанавливаем
	
	//если не удалось установить - то повторный вызов подключения будет неудачный
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПрочитатьФайлЗавершение", ЭтаФорма));

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если не Подключено Тогда
		//сообщаем об ошибке и прерываем работу программы
		ВызватьИсключение "Ошибка. Ваш браузер не поддерживает работу с файлами.";
	КонецЕсли;
	
	ПрочитатьФайлФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлФрагмент()
	
	Перем ВнутреннийАдресСервера, ВыборФайла, ОписаниеОповещения;
	
	ВнутреннийАдресСервера = "";
  	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Заголовок                 = "Выберите файлы для загрузки";
	ВыборФайла.Фильтр                     = "Файл (kenml)|*.kenml";
	ВыборФайла.МножественныйВыбор = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайл_Завершение", ЭтаФорма);
	
	Состояние("Идет чтение файла...");
	
	НачатьПомещениеФайлов(ОписаниеОповещения, , ВыборФайла , Истина, Новый УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл_Завершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботыДЗ.ПолучитьЭлементы().Очистить();
	ТаблицаРесурсов.Очистить();

	ИтогоПоСмете = 0; ИтогоПоРесурснойСтоимости = 0;  ИтогоСНакладными = 0;
	Итого_СметнаяПрибыль = 0;

	К = 0;
	Для каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		
		К= К+1;
		
		Состояние("Обработка файла ("+К+") из (" +ПомещенныеФайлы.Количество()+")", 33);

		ПутьКФайлу = ПереданныйФайл.Имя;
 		ВнутреннийАдресСервера = ПереданныйФайл.Хранение;
		
		ЧтениеФайла(ВнутреннийАдресСервера);

	КонецЦикла;
	
	Итого_Разница = ИтогоПоСмете -  ИтогоСНакладными;

	ИНАГРО_УСПОбщиеФункцииКлиентСервер.РазвернутьВсе(РаботыДЗ, Элементы.ДеревоРаботСметы);
	
	Состояние("Обработка файла завершена", 100);

	Если РаботыДЗ.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Если ПоказательСП = 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСП", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,  "В смете не указан размер СП, хотите начислить по базовой ставке 6%", РежимДиалогаВопрос.ДаНет, 60);
			
		иначе	
			
			//РасчетнаяСП = (ИтогоСНакладными -  Итого_СметнаяПрибыль) * ПоказательСП /100;
			//РазницаСП = Итого_СметнаяПрибыль - РасчетнаяСП;
			//
			//Сообщить(РазницаСП);
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//Вынести в отдельную процедуру
&НаКлиенте
Процедура ПослеВыбораСП(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПоказательСП = 6;
		
		РасчетСметнойПрибылиСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаботСметыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущееПоле = Элемент.ТекущийЭлемент;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьРеквизитов(Элемент, ТекущиеДанные, ТекущееПоле);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов(Элемент, ТекущиеДанные, ТекущееПоле)
	
	Если ТекущееПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКонструктив = не ТекущиеДанные.ЭтоРабота;
	
	СтруктураТолькоЧтение = Новый Структура;
 	СтруктураТолькоЧтение.Вставить("ДеревоРаботСметыНормативныйСборник", ЭтоКонструктив);

	ТолькоЧтение = Истина;
	
	Если СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение) Тогда
		
		ТекущееПоле.ТолькоПросмотр = ТолькоЧтение;
		
	иначе // СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение)
		
		ТекущееПоле.ТолькоПросмотр = Ложь;
		
	КонецЕсли; // СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение)

КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииНаСервере(Объект.Проект, АвтосозданиеНедостающихРесурсов, РодительСсылка);

	РаботыДЗ.ПолучитьЭлементы().Очистить();
	ТаблицаРесурсов.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура АвтопомещениеРесурсовВРаботыПриИзменении(Элемент)
	
	Если РаботыДЗ.ПолучитьЭлементы().Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При изменении опции необходимо перезагрузить смету!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательСППриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура УГПР_Добавить(Команда)
	
	Отбор = Новый Структура("Проект", Объект.Проект);
	ПараметрыПодбора = Новый Структура("Отбор", Отбор);
	ОписаниеОповещенияУсп = Новый ОписаниеОповещения("ОбработкаВыбораДокумента", ЭтотОбъект);
	ОткрытьФорму("Документ.ИНАГРО_УГПР.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект,,,, ОписаниеОповещенияУсп);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДокумента(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(РезультатВыбора, "Статус") = ПредопределенноеЗначение("Перечисление.СтатусыПланов.Утвержден") Тогда
		ПоказатьПредупреждение(, "Нельзя менять утвержденные документы, операция отменена"); // TODO возможно предложить создание версии
		
 		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВерсиюУГПР", ЭтотОбъект, РезультатВыбора);
	ПоказатьВопрос(ОписаниеОповещения, "В выбранный УГПР будет добавлены загруженные работы сметы, продолжить?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры 

 &НаКлиенте
 Процедура ДобавитьВерсиюУГПР(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 
		 ПараметрыФормы = новый Структура;
	
		 ПараметрыФормы.Вставить("Ключ", ДополнительныеПараметры);
		 
		 Форма = ПолучитьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаДокумента", ПараметрыФормы);
		 
		 ДанныеФормы = Форма.Объект;
		 
 		 ПеренестивУГПРНаСервере(ДанныеФормы, ДополнительныеПараметры);
		 
		 КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
		 
 		 Форма.Открыть();
		 Форма.Модифицированность = Истина;
		 Форма.РаботыДЗОбновитьНаСервере(); // 1 последовательность важна  - создаем дерево из таблиц документа
		 //Форма.РаспределитьНРиПрибыльНаСервере(); // 2 - распределяем по данным дерева
		 
 	 КонецЕсли; //Если РезультатВопроса = КодВозвратаДиалога.Да
	 
 КонецПроцедуры

&НаКлиенте
Процедура УГПР_заменить(Команда)
	
 	Отбор = Новый Структура("Проект", Объект.Проект);
	ПараметрыПодбора = Новый Структура("Отбор", Отбор);
	ОписаниеОповещенияУсп = Новый ОписаниеОповещения("ОбработкаВыбораДокумента_Замена", ЭтотОбъект);
	ОткрытьФорму("Документ.ИНАГРО_УГПР.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект,,,, ОписаниеОповещенияУсп);

 КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДокумента_Замена(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(РезультатВыбора, "Статус") = ПредопределенноеЗначение("Перечисление.СтатусыПланов.Утвержден") Тогда
		ПоказатьПредупреждение(, "Нельзя менять утвержденные документы, операция отменена"); // TODO возможно предложить создание версии
				
 		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВерсиюУГПР_Замена", ЭтотОбъект, РезультатВыбора);
	ПоказатьВопрос(ОписаниеОповещения, "Структура выбранного УГПР будет полностью заменен  загруженными работами сметы, продолжить?", РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры 

 &НаКлиенте
 Процедура ДобавитьВерсиюУГПР_Замена(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		 ПараметрыФормы = новый Структура;
	
		 ПараметрыФормы.Вставить("Ключ", ДополнительныеПараметры);
		 
		 Форма = ПолучитьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаДокумента", ПараметрыФормы);
		 
		 ДанныеФормы = Форма.Объект;
		 
	 	 ПеренестивУГПРНаСервере(ДанныеФормы, ДополнительныеПараметры, Истина);
		 
		 КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);

		 Форма.Открыть();
		 Форма.Модифицированность = Истина;
		 Форма.РаботыДЗОбновитьНаСервере(); // 1 последовательность важна  - создаем дерево из таблиц документа
		 //Форма.РаспределитьНРиПрибыльНаСервере(); // 2 - распределяем по данным дерева
		 
 	 КонецЕсли; //Если РезультатВопроса = КодВозвратаДиалога.Да
	 
 КонецПроцедуры

&НаКлиенте
 Процедура РасчетСметнойПрибыли(Команда)
	 	РасчетСметнойПрибылиСервер();
 КонецПроцедуры

#КонецОбласти

// 2.2.3 
// Алгоритм распределения  

// 2.3
// Добавлено формирование кода wbs по ИД работы сметы
// Добавлена обработка работ-ресурсов с типом 2 - оборудование
// Добавлена обработка шифра в формате биай (с "-00")
// Добавлено заполнение новых ресурсов - группы ресурсов - КаталогBiGroup
// Добавлено определение ставки СП из первых строк файла для форматов где не указана ставка СП
// Добавлен алгоритм корректировки зарплаты с надбавками и распределение разницы по ресурсам
// Добавлено определение формата файла на основании данных файла
// Добавлено игнорирование строк работ с типом "3" - заемное оборудование? - их не в смете
// Решена проблема с тем что не загружаются материалы с нормой менее 6 знаков, (в файл пишется только норма) - в обработке точность нормы увеличена до 10 знаков

// 2.3.1
// Добавлены алтернативные ветки поиска по наименованию для ресурсов и работ если не указан шифр или указан условный шифр, типа "Т" или  "ПРАЙС"
// Добавлена возможность множественного выбора файлов загрузки

// 2.3.2
// Добавлены правила округления для формата 2018
// Добавлен расчет накладных расходов для формата 2018
// Оптимизирован поиск нормативных сборников

// 2.3.3
// Иногда стоимость надбавок не включена в стоимость ресурсов   - фиксим это сравнением итогов работы и ресурсов и распределением разницы
// Добавлено предупреждение при нахождении ресурсов без установленного типа
// Оптимизирован расчет накладных расходов и сметной прибыли даже если есть ошибки в выгрузке
// Добавлены информационные сообщения для визуальной оценки качества загрузки (сравненение итогов сметы и упгр)

// 2.4.0
// Добавлен пересчет цен ресурсов для сглаживания применения коэфициентов 
// Добавлена опция размещения ресурсов в предыдущую работу сметы  (по умолчанию отключена)
// АвтосозданиеНедостающихРесурсов включается только при наличии права записи в спр Ресурсы
// Добавлено создание строк ресурсов для работ без ресурсов но со стоимостью
//     для машин - создаются работы "Прочие машины" (поиск по наименованию, без создания новых)
//     для основной зарплаты -  создаются работы "Затраты труда рабочих-строителей" (поиск по наименованию, без создания новых)
//     для материалов -   создаются работы "Прочие материалы " (поиск по наименованию, без создания новых)

//2.4.1
// Алгоритм распределение разницы расширен на все версии форматов файла и и теперь учитывает снижение стоимости

//2.4.2 
// Рефакторинг работы с форматами
//2.4.2.2
// Дополнение по работе типа "5"
// Исправлена корректировка стоимости основной зарплаты с коэфициентами в формате 551
//2.4.2.3
// исправление расчетов для работ с отрицательными объемами или суммами
//2.4.2.4
// добавлен обход ошибки когда в файл по отриц ресурсам записаны положительные суммы затрат (а должны быть с минусом)
//2.4.2.5
// добавлен обход ошибки суммирования стоимости материальных ресурсов
// Обход проблемы "МАФЫ" =  изменил приоритет определения прямых затрат
//      (с "общая стоимость, если ноль  цена* обьем" на " цена* обьем, если ноль берем общую стоимость")

//2.4.3
// Добавлена возможность рассчитать сметную прибыль по сметам где ее забыли выгрузить (или диалог после загрузки или выбором новой ставки на закладке)
// Добавлен аглоритм обхода ошибки в смете - в которой не выгрузились ни СП, ни НР 
// Дополнены новыми  условиями алгоритмы распределения разницы между общей стоимостью и стоимостью по сумме ресурсов
//2.4.3.1 - добавлена проверка машинистов чтобы были машинистами в ресурсе 1с и оповещение если это не так, и обход таких элементов при поиске по наименованию
//2.4.3.2  - добавлена проверка и повещение при несовпадении ожидаемого типа ресурса в файле и в 1с (в файле машина а нашли ресурс с типом материал)
//2.4.3.3 - исправлен расчет СП для случаев когда в файл забыли записать накладные расходы

// 2.4.4 - добавлены функции работы с существующими УГПР: Добавленение ветки с данными загрузки УГПР + полная замена существующего УГПР
// 2.4.4.1 - для смет формата 2018 года исправлен расчет накладных расходов = если указан процент в работе то считаем по нему (зарплата с машинистами * % НР)

// 2.4.5 - реинжениринг расчетов корректировок по работам
// 2.4.5.1 - опция отключить автокорректировку ресурсов, кнопка расчета сметной прибыли по произвольной ставке	
//  Добавлено исключение оборудования из ручного расчета сметной прибыли
// 2.4.5.2 - исправлена ошибка копирования кода СНБ на подчиненные условные ресурсы
// добавлено создание  условных материалов когда сумма по работе превышает расчетную
// 2.4.5.3 - убрал лишние округление 
//  опция "Отключить автокоректирование ресурсов" - теперь рассчитывает ЗП по цене ЗП в стоимости позиции
//  и приоритет стоимости ресурсов берет по цене вместо стоимости  

//2.4.5.4 - добавлено установка режима загрузки при создании ресурсов
// добавлена проверка для обработки заполнения ресурса в закладке ресурсы
//2.4.5.5 - добавлена обработка смет с ресурсами без указания типа ресурса 
// Пока что считаем все такие ресурсы материальными - пока не будет выработано другое решение.
//2.4.5.6 - оборудование в материалы