# Область ПодключениеВнешнейОбработки

Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.4.115");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр("ru = 'Экспорт в Primavera'");
    Команда.Идентификатор = "ЭкспортВPrimavera";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Истина;
	
	//ТаблицаКоманд = ПолучитьТаблицуКоманд();
	//ДобавитьКоманду(ТаблицаКоманд,
	//"Экспорт в примавера",
	//"1",
	//"ОткрытиеФормы",
	//Истина,
	//"");
	//ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

# КонецОбласти

Процедура ОчиститьЭкспортныеТаблицы(ПроектГУИД = Неопределено) Экспорт
	
	// удаляем хранимыми процедурами.
	// так намного быстрее
	Если ПроектГУИД = Неопределено Тогда
		// удаляем все данные
		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_DeleteAllImportedData();
	Иначе
		// удаляем данные по проекту
		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_DeleteProjectImportedData(ПроектГУИД);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры	

Функция ПолучитьСписокФлажков() Экспорт
	
	Реквизиты = ЭтотОбъект.Метаданные().Реквизиты;
	Флажки = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип("Булево")) Тогда
			Флажки.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флажки;
	
КонецФункции	

Процедура УстановитьВсеФлажки(Флаг = Истина, Флажки = Неопределено) Экспорт
	
	Если Флажки = Неопределено Тогда
		Флажки = ПолучитьСписокФлажков();
	КонецЕсли;
	
	Для Каждого Флажок Из Флажки Цикл
		ЭтотОбъект[Флажок] = Флаг;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьРабочуюВерсиюПроекта(ПроектСсылка) Экспорт
	ВерсияОбъект = Справочники.ИНАГРО_Версия.СоздатьЭлемент();
	ВерсияОбъект.Наименование = "Версия 1 (рабочая)";
	ВерсияОбъект.Владелец = ПроектСсылка;
	// {{ Начало BI Group: Ержанұлы Б. 17.04.2018 10:10
	// Основание: Заявка № 141 670
	ВерсияОбъект.Организация = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "ИНАГРО_Организация");
	// }} Окончание  BI Group: Ержанұлы Б.
	ВерсияОбъект.ВидВерсии = Перечисления.ИНАГРО_ВидВерсии.Рабочая;
	ВерсияОбъект.ОбменДанными.Загрузка = Истина;
	ВерсияОбъект.Записать();
	Возврат ВерсияОбъект.Ссылка;
КонецФункции	

Функция ПолучитьСправочникПоНаименованию(ИмяСправочника,Наименование,Владелец=Неопределено, ОсновнаяЕдиница=Неопределено, Родитель=Неопределено);
	
	СправочникМенеджер = Справочники[ИмяСправочника];
	Если Владелец = Неопределено Тогда
		ЭлементСсылка = СправочникМенеджер.НайтиПоНаименованию(Наименование, Истина);
	Иначе	
		ЭлементСсылка = СправочникМенеджер.НайтиПоНаименованию(Наименование, Истина, , Владелец);
	КонецЕсли;
	
	Если ЭлементСсылка.Пустая() Тогда
		ЭлементОбъект = СправочникМенеджер.СоздатьЭлемент();
		ЭлементОбъект.Наименование = Наименование;
		Если Владелец <> Неопределено Тогда
			ЭлементОбъект.Владелец = Владелец;
		КонецЕсли;
		Если ОсновнаяЕдиница <> Неопределено Тогда
			ЭлементОбъект.ОсновнаяЕдиница = ОсновнаяЕдиница;
		КонецЕсли;
		Если Родитель <> Неопределено Тогда 
			ЭлементОбъект.Родитель = Родитель;
		КонецЕсли;
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
		ЭлементСсылка = ЭлементОбъект.Ссылка;
	//ИначеЕсли ОсновнаяЕдиница <> Неопределено Тогда
	//	ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
	//	ЭлементОбъект.ОсновнаяЕдиница = ОсновнаяЕдиница;	
	//	ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	//	ЭлементОбъект.Записать();
	КонецЕсли;
	
	Возврат ЭлементСсылка
	
КонецФункции	

Функция ПолучитьСправочникПоГУИДу(ИмяСправочника, ГУИД, Реквизиты, Родитель = Неопределено)
	Менеджер = Справочники[ИмяСправочника];
	ЭлементСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
	Если ЭлементОбъект = Неопределено Тогда
		ЭлементОбъект = Менеджер.СоздатьЭлемент();
		ЭлементОбъект.УстановитьСсылкуНового(ЭлементСсылка);
		ЗаполнитьЗначенияСвойств(ЭлементОбъект, Реквизиты);
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		Если Родитель <> Неопределено Тогда 
			ЭлементОбъект.Родитель = Родитель;
		КонецЕсли;
		ЭлементОбъект.Записать();
	КонецЕсли;
	Возврат ЭлементОбъект.Ссылка;
КонецФункции	

# Область ПроцедурыПоискаЭлементовСправочников

// Функция для поиска спправочника
// Параметры:
//		Отказ - признак, что возникла ошибка
//		ИмяСправочника - имя справочника, как задано в конфигураторе
//		СпособПоиска - как искать элемент справочника. Доступные значения:
//					"ПоИдентификатору" - поиск производится по внутреннему идентификатору
//					"ПоНаименованию" - поиск производится по наименованию
// 					"ПоРеквизиту" - поиск производится по реквизиту, имя реквизита и его значение задается в параметре "ПараметрыПоиска"
//					может быть массивом из элементов, в этом случае будет производиться поиск поочередно разными способавми
//		ПараметрыПоиска - структура, содержащая дополнительные переметры для поика (GUID, наменование, родитель, владелец, имя реквизита для поиска, значение реквизита для поиска)
//		Реквизиты - структура, содержащая реквизиты, для заполнения нового объекта или обновления найденного
//		СоздаватьНовый - признак, нужно ли создавать новый жлемент
//		ПерезаполнятьРеквизиты - признка, что нужно перезаполнить реквизиты
Функция ПолучитьСправочник(Отказ, ИмяСправочника, СпособПоиска = "ПоИдентификатору", ПараметрыПоиска, Реквизиты, СоздаватьНовый = Ложь, ПерезаполнятьРеквизиты = Ложь) Экспорт
	Перем ГУИД, ЭлементСсылкаГУИД, Наименование, Родитель, Владелец, ИмяРеквизита, ЗначениеРеквизита, ЭтоГруппа;
	
	ЭлементНайден = Ложь;
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	Если Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + "Справочник """ + ИмяСправочника + """ не найден в конфигурации!" + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	СправочникМенеджер = Справочники[ИмяСправочника];
	СправочникМетаданные = Метаданные.Справочники[ИмяСправочника];
	
	// определим возможные значения поиска для справочника
	Если СправочникМетаданные.Иерархический Тогда
		ПараметрыПоиска.Свойство("Родитель", Родитель);
	КонецЕсли;
	Если СправочникМетаданные.Владельцы.Количество() > 0 Тогда
		ПараметрыПоиска.Свойство("Владелец", Владелец);
	КонецЕсли;
	Если СправочникМетаданные.Иерархический Тогда
		Если СправочникМетаданные.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если НЕ ПараметрыПоиска.Свойство("ЭтоГруппа", ЭтоГруппа) Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СпособПоиска) = Тип("Строка") Тогда
		МассивСпособовПоиска = Новый Массив;
		МассивСпособовПоиска.Добавить(СпособПоиска);
	ИначеЕсли ТипЗнч(СпособПоиска) = Тип("Массив") Тогда
		МассивСпособовПоиска = СпособПоиска;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + "Не верно задан параметр  ""СпособПоиска""" + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Для Каждого ТекущийСпособПоиска Из МассивСпособовПоиска Цикл
	
		Если ТекущийСпособПоиска = "ПоИдентификатору" Тогда
			
			Если НЕ ПараметрыПоиска.Свойство("ГУИД", ГУИД) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не заполнен ""ГУИД""" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			Если ГУИД = "00000000-0000-0000-0000-000000000000" Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не заполнен ""ГУИД""" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			
			ЭлементСсылка = СправочникМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			Если ЭлементОбъект <> Неопределено Тогда
				ЭлементНайден = Истина;
				Прервать;
			Иначе
				ЭлементСсылкаГУИД = ЭлементСсылка;
			КонецЕсли;
			
			
		ИначеЕсли ТекущийСпособПоиска = "ПоНаименованию" Тогда
			
			Если НЕ ПараметрыПоиска.Свойство("Наименование", Наименование) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не заполнено ""Наименование""" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			
			ЭлементСсылка = СправочникМенеджер.НайтиПоНаименованию(Наименование, Истина, Родитель , Владелец);
			Если НЕ ЭлементСсылка.Пустая() Тогда
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
			
			
		ИначеЕсли ТекущийСпособПоиска = "ПоРеквизиту" Тогда
			
			Если НЕ ПараметрыПоиска.Свойство("ИмяРеквизита", ИмяРеквизита) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не заполнено ""ИмяРеквизита""" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ПараметрыПоиска.Свойство("ЗначениеРеквизита", ЗначениеРеквизита) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не заполнено ""ЗначениеРеквизита""" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			
			Если СправочникМетаданные.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "У справочника """ + ИмяСправочника + """ не найден реквизит """ + ИмяРеквизита + "" + Символы.ПС;
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
			Если СправочникМетаданные.Реквизиты[ИмяРеквизита].Индексирование <> Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать Тогда
			
				ЭлементСсылка = СправочникМенеджер.НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель, Владелец);
				Если НЕ ЭлементСсылка.Пустая() Тогда
					ЭлементНайден = Истина;
					Прервать;
				КонецЕсли;
				
			Иначе
				// реквизит не индексированный, найти сможем только запросом
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаСправочника.Ссылка
				|ИЗ
				|	Справочник."+ИмяСправочника+" КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника."+ИмяРеквизита+" = &ЗначениеРеквизита";
				
				Запрос.УстановитьПараметр("ЗначениеРеквизита",ЗначениеРеквизита);
				
				Если ЗначениеЗаполнено(Родитель) Тогда
					Запрос.Текст = Запрос.Текст + "
				|	И ТаблицаСправочника.Родитель В ИЕРАРХИИ(&Родитель)";
					Запрос.УстановитьПараметр("Родитель",Родитель);
				КонецЕсли;
					
				Если ЗначениеЗаполнено(Владелец) Тогда
					Запрос.Текст = Запрос.Текст + "
				|	И ТаблицаСправочника.Владелец = &Владелец";
					Запрос.УстановитьПараметр("Владелец",Владелец);
				КонецЕсли;
				
				Если ЭтоГруппа <> Неопределено Тогда
					Запрос.Текст = Запрос.Текст + "
				|	И ТаблицаСправочника.ЭтоГруппа = &ЭтоГруппа";
					Запрос.УстановитьПараметр("ЭтоГруппа",ЭтоГруппа);
				КонецЕсли;
				
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					ЭлементСсылка = СправочникМенеджер.ПустаяСсылка();
				Иначе
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					ЭлементСсылка = Выборка.Ссылка;
					ЭлементНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементНайден Тогда
		Если НЕ СоздаватьНовый Тогда 
			Возврат СправочникМенеджер.ПустаяСсылка();
		КонецЕсли;
		
		// нужно создать новый элемент
		
		Если ЭтоГруппа = Неопределено Тогда
			// если справочник не иерархический, то до сих пор значение неинициализировано
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
		Если ЭтоГруппа Тогда
			ЭлементОбъект = СправочникМенеджер.СоздатьГруппу();
		Иначе
			ЭлементОбъект = СправочникМенеджер.СоздатьЭлемент();
			Если ИмяСправочника = "СМ_ЕдиницыИзмеренияСмета" Тогда
				// хитрый справочник, у которого нужно мутить с реквизитом "СметныйКод"
				ЭлементОбъект.УстановитьНовыйКод();
				ЭлементОбъект.СметныйКод = Число(ЭлементОбъект.Код);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементСсылкаГУИД <> Неопределено Тогда
			ЭлементОбъект.УстановитьСсылкуНового(ЭлементСсылкаГУИД);
		КонецЕсли;
		
	ИначеЕсли НЕ ПерезаполнятьРеквизиты Тогда
		
		Возврат ЭлементСсылка;
		
	Иначе
		
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементОбъект, Реквизиты);
	ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		ЭлементОбъект.Родитель = Родитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ЭлементОбъект.Владелец = Владелец;
	КонецЕсли;
	
	ЭлементОбъект.Записать();
	
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции	

Функция ПолучитьЕдиницуИзмерения(ГУИД, НаименованиеПолное, Наименование)
	
	Отказ = Ложь;
	
	СпособПоиска = Новый Массив;
	СпособПоиска.Добавить("ПоИдентификатору");
	СпособПоиска.Добавить("ПоНаименованию");
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Наименование", Наименование);
	ПараметрыПоиска.Вставить("Владелец", Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
	ПараметрыПоиска.Вставить("ГУИД", ГУИД);
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("Наименование", Наименование);
	Реквизиты.Вставить("НаименованиеПолное", НаименованиеПолное);
	
	ЕдиницаИзмеренияERP = ПолучитьСправочник(Отказ, "УпаковкиЕдиницыИзмерения", СпособПоиска, ПараметрыПоиска, Реквизиты, Истина, Истина);
	
	СпособПоиска = Новый Массив;
	СпособПоиска.Добавить("ПоРеквизиту");
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("ИмяРеквизита", "ИНАГРО_ЕдиницаКлассификатора");
	ПараметрыПоиска.Вставить("ЗначениеРеквизита", ЕдиницаИзмеренияERP);
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("Наименование", Наименование);
	Реквизиты.Вставить("ИНАГРО_ЕдиницаКлассификатора", ЕдиницаИзмеренияERP);
	
	ЕдиницаИзмеренияСметная = ПолучитьСправочник(Отказ, "СМ_ЕдиницыИзмеренияСмета", СпособПоиска, ПараметрыПоиска, Реквизиты, Истина, Истина);
	
	Возврат ЕдиницаИзмеренияСметная;
	
КонецФункции

#КонецОбласти

Функция ПолучитьДлительность(НачалоПериода, КонецПериода, График)
	
	Длительность = 0;
	
	Если  НачалоПериода <> Дата(1,1,1)
		И КонецПериода <> Дата(1,1,1) 
		И КонецПериода >= НачалоПериода Тогда
		
		Длительность = Документы.ИНАГРО_УГПР.ДлительностьПоГрафикуДней(НачалоПериода, КонецПериода, График);
		
	КонецЕсли;
	
	Возврат Длительность;
	
КонецФункции	

Процедура ПроверитьСтрокуСоединения()
	СтрокаСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	Если СтрНайти(СтрокаСоединенияИБ,"bi_erp_prod_01")=0 Тогда
		ТекПараметры = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.ПолучитьОбщиеПараметрыСоединения();
		ПараметрыВнСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		ЗаполнитьЗначенияСвойств(ПараметрыВнСоед,ТекПараметры);
		ПараметрыВнСоед.СтрокаСоединения = СтрЗаменить(ТекПараметры.СтрокаСоединения,"_prod","_test");
		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.УстановитьОбщиеПараметрыСоединения(ПараметрыВнСоед);
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьДанные() Экспорт
	
	ПроверитьСтрокуСоединения();
	
	Объект = ЭтотОбъект;
	
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИНАГРО_УГПРРаботы.КлючСтроки
	|ПОМЕСТИТЬ втWBSиРаботы
	|ИЗ
	|	Документ.ИНАГРО_УГПР.Работы КАК ИНАГРО_УГПРРаботы
	|ГДЕ
	|	(ИНАГРО_УГПРРаботы.Ссылка = &Регистратор
	|			ИЛИ &Регистратор = ЗНАЧЕНИЕ(Документ.ИНАГРО_УГПР.ПустаяСсылка))
	|	И ИНАГРО_УГПРРаботы.Ссылка.Проект = &Проект
	|	И ИНАГРО_УГПРРаботы.Ссылка.Версия = &Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.КлючСтроки
	|ПОМЕСТИТЬ втРаботы
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.Проект = &Проект
	|	И ИНАГРО_УГПРРаботы.Версия = &Версия
	|	И (ИНАГРО_УГПРРаботы.КлючСтроки В
	|				(ВЫБРАТЬ
	|					втWBSиРаботы.КлючСтроки
	|				ИЗ
	|					втWBSиРаботы КАК втWBSиРаботы)
	|			ИЛИ ИНАГРО_УГПРРаботы.КлючСвязи В
	|				(ВЫБРАТЬ
	|					втWBSиРаботы.КлючСтроки
	|				ИЗ
	|					втWBSиРаботы КАК втWBSиРаботы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРМатериалы.Количество, 0)) КАК МатериалыКоличество,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРМатериалы.Сумма, 0)) КАК МатериалыСумма,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРРесурсыМашинные.Количество, 0)) КАК МашиныМеханизмыКоличество,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРРесурсыМашинные.Сумма, 0)) КАК МашиныМеханизмыСумма,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРРесурсыМашинные.СуммаЗПМашинистов, 0)) КАК МашиныМеханизмыСуммаЗПМашинистов,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРРесурсыТрудовые.Количество, 0)) КАК ТрудовыеКоличество,
	|	СУММА(ЕСТЬNULL(ИНАГРО_УГПРРесурсыТрудовые.Сумма, 0)) КАК ТрудовыеСумма
	|ПОМЕСТИТЬ СтоимостиРесурсов
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРМатериалы КАК ИНАГРО_УГПРМатериалы
	|		ПО ИНАГРО_УГПРРаботы.КлючСтроки = ИНАГРО_УГПРМатериалы.КлючСтроки
	|			И ИНАГРО_УГПРРаботы.Версия = ИНАГРО_УГПРМатериалы.Версия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРРесурсыТрудовые КАК ИНАГРО_УГПРРесурсыТрудовые
	|		ПО ИНАГРО_УГПРРаботы.КлючСтроки = ИНАГРО_УГПРРесурсыТрудовые.КлючСтроки
	|			И ИНАГРО_УГПРРаботы.Версия = ИНАГРО_УГПРРесурсыТрудовые.Версия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРРесурсыМашинные КАК ИНАГРО_УГПРРесурсыМашинные
	|		ПО ИНАГРО_УГПРРаботы.КлючСтроки = ИНАГРО_УГПРРесурсыМашинные.КлючСтроки
	|			И ИНАГРО_УГПРРаботы.Версия = ИНАГРО_УГПРРесурсыМашинные.Версия
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.Проект = &Проект
	|	И ИНАГРО_УГПРРаботы.Версия = &ВерсияВедомостьСтоимости
	|	И ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_ВидыРаботПроект
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Проект,
	|	ВложенныйЗапрос.Версия,
	|	ВложенныйЗапрос.КлючСтроки,
	|	ВложенныйЗапрос.КлючСвязи,
	|	ВложенныйЗапрос.Объем,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ВидРаботы,
	|	ВложенныйЗапрос.ПараметрСтроки,
	|	ВложенныйЗапрос.ВидРаботыШифрПозицииНорматива,
	|	ВложенныйЗапрос.ЭтоРабота,
	|	СтоимостиРесурсов.МатериалыКоличество,
	|	СтоимостиРесурсов.МатериалыСумма,
	|	СтоимостиРесурсов.МашиныМеханизмыКоличество,
	|	СтоимостиРесурсов.МашиныМеханизмыСумма,
	|	СтоимостиРесурсов.МашиныМеханизмыСуммаЗПМашинистов,
	|	СтоимостиРесурсов.ТрудовыеКоличество,
	|	СтоимостиРесурсов.ТрудовыеСумма,
	|	ВложенныйЗапрос.КодWBS,
	|	ВложенныйЗапрос.КороткоеИмя
	|ПОМЕСТИТЬ ВедомостьСтоимости
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИНАГРО_УГПРРаботы.Проект КАК Проект,
	|		ИНАГРО_УГПРРаботы.Версия КАК Версия,
	|		ИНАГРО_УГПРРаботы.КлючСтроки КАК КлючСтроки,
	|		ВЫБОР
	|			КОГДА ИНАГРО_УГПРРаботы.КлючСвязи = ""00000000-0000-0000-0000-000000000000""
	|				ТОГДА """"
	|			ИНАЧЕ ИНАГРО_УГПРРаботы.КлючСвязи
	|		КОНЕЦ КАК КлючСвязи,
	|		ИНАГРО_УГПРРаботы.Объем КАК Объем,
	|		ИНАГРО_УГПРРаботы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора КАК ЕдиницаИзмерения,
	|		ИНАГРО_УГПРРаботы.ВидРаботы КАК ВидРаботы,
	|		ВЫБОР
	|			КОГДА ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_КонструктивыПроекта
	|				ТОГДА ""BoQКонструктив""
	|			КОГДА ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_ВидыРаботПроект
	|				ТОГДА ""BoQВидРабот""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ПараметрСтроки,
	|		ИНАГРО_УГПРРаботы.ВидРаботы.ШифрПозицииНорматива КАК ВидРаботыШифрПозицииНорматива,
	|		ИНАГРО_УГПРРаботы.ЭтоРабота КАК ЭтоРабота,
	|		ИНАГРО_УГПРРаботы.КодWBS КАК КодWBS,
	|		ИНАГРО_УГПРРаботы.КороткоеИмя КАК КороткоеИмя
	|	ИЗ
	|		РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|	ГДЕ
	|		ИНАГРО_УГПРРаботы.Проект = &Проект
	|		И ИНАГРО_УГПРРаботы.Версия = &ВерсияВедомостьСтоимости) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостиРесурсов КАК СтоимостиРесурсов
	|		ПО ВложенныйЗапрос.Проект = СтоимостиРесурсов.Проект
	|			И ВложенныйЗапрос.Версия = СтоимостиРесурсов.Версия
	|			И ВложенныйЗапрос.КлючСтроки = СтоимостиРесурсов.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_СоответствияWBS.Версия,
	|	ИНАГРО_СоответствияWBS.ВерсияСоответствия КАК ВерсияBoQ,
	|	ИНАГРО_СоответствияWBS.КлючСтроки,
	|	ИНАГРО_СоответствияWBS.КлючСтрокиСоответствия КАК КлючСтрокиBoQ,
	|	""BoQСоответствия"" КАК ПараметрСтроки
	|ПОМЕСТИТЬ СвязиПроектов
	|ИЗ
	|	РегистрСведений.ИНАГРО_СоответствияWBS КАК ИНАГРО_СоответствияWBS
	|ГДЕ
	|	ИНАГРО_СоответствияWBS.Версия = &Версия
	|	И ИНАГРО_СоответствияWBS.ВерсияСоответствия = &ВерсияВедомостьСтоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючСтроки,
	|	ВложенныйЗапрос.Ресурс,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПараметрСтроки,
	|	ВложенныйЗапрос.ВидРесурса,
	|	ВложенныйЗапрос.Проект,
	|	ВложенныйЗапрос.Версия,
	|	ВложенныйЗапрос.СметныйТип
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.КлючСтроки КАК КлючСтроки,
	|		ВложенныйЗапрос.Ресурс КАК Ресурс,
	|		СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|		СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|		ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		МАКСИМУМ(""Ресурс"") КАК ПараметрСтроки,
	|		ВложенныйЗапрос.ВидРесурса КАК ВидРесурса,
	|		ВложенныйЗапрос.Проект КАК Проект,
	|		ВложенныйЗапрос.Версия КАК Версия,
	|		ВложенныйЗапрос.СметныйТип КАК СметныйТип
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ИНАГРО_УГПРМатериалы.КлючСтроки КАК КлючСтроки,
	|			ИНАГРО_УГПРМатериалы.Ресурс КАК Ресурс,
	|			СУММА(ИНАГРО_УГПРМатериалы.Количество) КАК Количество,
	|			СУММА(ИНАГРО_УГПРМатериалы.Сумма) КАК Сумма,
	|			ИНАГРО_УГПРМатериалы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора КАК ЕдиницаИзмерения,
	|			МАКСИМУМ(""RT_Mat"") КАК ВидРесурса,
	|			ИНАГРО_УГПРМатериалы.Проект КАК Проект,
	|			ИНАГРО_УГПРМатериалы.Версия КАК Версия,
	|			ВЫБОР
	|				КОГДА ИНАГРО_УГПРМатериалы.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Оборудование)
	|					ТОГДА 5
	|				ИНАЧЕ 2
	|			КОНЕЦ КАК СметныйТип
	|		ИЗ
	|			РегистрСведений.ИНАГРО_УГПРМатериалы КАК ИНАГРО_УГПРМатериалы
	|		ГДЕ
	|			ИНАГРО_УГПРМатериалы.Проект = &Проект
	|			И ИНАГРО_УГПРМатериалы.Версия = &Версия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИНАГРО_УГПРМатериалы.Ресурс,
	|			ИНАГРО_УГПРМатериалы.КлючСтроки,
	|			ИНАГРО_УГПРМатериалы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|			ИНАГРО_УГПРМатериалы.Проект,
	|			ИНАГРО_УГПРМатериалы.Версия,
	|			ВЫБОР
	|				КОГДА ИНАГРО_УГПРМатериалы.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Оборудование)
	|					ТОГДА 5
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИНАГРО_УГПРРесурсыТрудовые.КлючСтроки,
	|			ИНАГРО_УГПРРесурсыТрудовые.Ресурс,
	|			СУММА(ИНАГРО_УГПРРесурсыТрудовые.Количество),
	|			СУММА(ИНАГРО_УГПРРесурсыТрудовые.Сумма),
	|			ИНАГРО_УГПРРесурсыТрудовые.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|			МАКСИМУМ(""RT_Labor""),
	|			ИНАГРО_УГПРРесурсыТрудовые.Проект,
	|			ИНАГРО_УГПРРесурсыТрудовые.Версия,
	|			0
	|		ИЗ
	|			РегистрСведений.ИНАГРО_УГПРРесурсыТрудовые КАК ИНАГРО_УГПРРесурсыТрудовые
	|		ГДЕ
	|			ИНАГРО_УГПРРесурсыТрудовые.Проект = &Проект
	|			И ИНАГРО_УГПРРесурсыТрудовые.Версия = &Версия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИНАГРО_УГПРРесурсыТрудовые.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|			ИНАГРО_УГПРРесурсыТрудовые.КлючСтроки,
	|			ИНАГРО_УГПРРесурсыТрудовые.Проект,
	|			ИНАГРО_УГПРРесурсыТрудовые.Ресурс,
	|			ИНАГРО_УГПРРесурсыТрудовые.Версия
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИНАГРО_УГПРРесурсыМашинные.КлючСтроки,
	|			ИНАГРО_УГПРРесурсыМашинные.Ресурс,
	|			СУММА(ИНАГРО_УГПРРесурсыМашинные.Количество),
	|			СУММА(ИНАГРО_УГПРРесурсыМашинные.Сумма),
	|			ИНАГРО_УГПРРесурсыМашинные.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|			МАКСИМУМ(""RT_Equip""),
	|			ИНАГРО_УГПРРесурсыМашинные.Проект,
	|			ИНАГРО_УГПРРесурсыМашинные.Версия,
	|			ВЫБОР
	|				КОГДА ИНАГРО_УГПРРесурсыМашинные.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Транспортировка)
	|						ИЛИ ИНАГРО_УГПРРесурсыМашинные.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Перебазировка)
	|					ТОГДА 4
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|		ИЗ
	|			РегистрСведений.ИНАГРО_УГПРРесурсыМашинные КАК ИНАГРО_УГПРРесурсыМашинные
	|		ГДЕ
	|			ИНАГРО_УГПРРесурсыМашинные.Проект = &Проект
	|			И ИНАГРО_УГПРРесурсыМашинные.Версия = &Версия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИНАГРО_УГПРРесурсыМашинные.Ресурс,
	|			ИНАГРО_УГПРРесурсыМашинные.КлючСтроки,
	|			ИНАГРО_УГПРРесурсыМашинные.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|			ИНАГРО_УГПРРесурсыМашинные.Проект,
	|			ИНАГРО_УГПРРесурсыМашинные.Версия,
	|			ВЫБОР
	|				КОГДА ИНАГРО_УГПРРесурсыМашинные.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Транспортировка)
	|						ИЛИ ИНАГРО_УГПРРесурсыМашинные.Ресурс.ВидРесурса = ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.Перебазировка)
	|					ТОГДА 4
	|				ИНАЧЕ 3
	|			КОНЕЦ) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Ресурс,
	|		ВложенныйЗапрос.ЕдиницаИзмерения,
	|		ВложенныйЗапрос.КлючСтроки,
	|		ВложенныйЗапрос.ВидРесурса,
	|		ВложенныйЗапрос.Проект,
	|		ВложенныйЗапрос.Версия,
	|		ВложенныйЗапрос.СметныйТип) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ВЫБОР
	|		КОГДА ИНАГРО_УГПРРаботы.КлючСвязи = ""00000000-0000-0000-0000-000000000000""
	|			ТОГДА """"
	|		ИНАЧЕ ИНАГРО_УГПРРаботы.КлючСвязи
	|	КОНЕЦ КАК КлючСвязи,
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.ВидРаботы,
	|	СУММА(ИНАГРО_УГПРРаботы.Объем) КАК Объем,
	|	СУММА(ИНАГРО_УГПРРаботы.Сумма) КАК Сумма,
	|	СУММА(ИНАГРО_УГПРРаботы.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ИНАГРО_УГПРРаботы.НакладныеРасходы) КАК НакладныеРасходы,
	|	ИНАГРО_УГПРРаботы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора КАК ЕдиницаИзмерения,
	|	ИНАГРО_УГПРРаботы.НомерВСтруктуре КАК НомерВСтруктуре,
	|	NULL КАК ШифрПозицииНорматива,
	|	МАКСИМУМ(""Конструктив"") КАК ПараметрСтроки,
	|	NULL КАК Ресурс,
	|	NULL КАК Количество,
	|	NULL КАК ВидРесурса,
	|	NULL КАК Операция,
	|	NULL КАК ОбъемСобственный,
	|	NULL КАК ОбъемСубподряда,
	|	NULL КАК Контрагент,
	|	NULL КАК Подразделение,
	|	NULL КАК МатериалыКоличество,
	|	NULL КАК МатериалыСумма,
	|	NULL КАК МашиныМеханизмыКоличество,
	|	NULL КАК МашиныМеханизмыСумма,
	|	NULL КАК МашиныМеханизмыСуммаЗПМашинистов,
	|	NULL КАК ТрудовыеКоличество,
	|	NULL КАК ТрудовыеСумма,
	|	NULL КАК ВерсияBoQ,
	|	NULL КАК КлючСтрокиBoQ,
	|	ИНАГРО_УГПРРаботы.КороткоеИмя КАК КороткоеИмя,
	|	ИНАГРО_УГПРРаботы.КодWBS,
	|	NULL КАК РесурснаяСебестоимость,
	|	NULL КАК СметныйТип
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_КонструктивыПроекта
	|	И ИНАГРО_УГПРРаботы.КлючСтроки В
	|			(ВЫБРАТЬ
	|				втWBSиРаботы.КлючСтроки
	|			ИЗ
	|				втWBSиРаботы КАК втWBSиРаботы)
	|	И ИНАГРО_УГПРРаботы.Версия = &Версия
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.ВидРаботы,
	|	ИНАГРО_УГПРРаботы.НомерВСтруктуре,
	|	ИНАГРО_УГПРРаботы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ВЫБОР
	|		КОГДА ИНАГРО_УГПРРаботы.КлючСвязи = ""00000000-0000-0000-0000-000000000000""
	|			ТОГДА """"
	|		ИНАЧЕ ИНАГРО_УГПРРаботы.КлючСвязи
	|	КОНЕЦ,
	|	ИНАГРО_УГПРРаботы.КороткоеИмя,
	|	ИНАГРО_УГПРРаботы.КодWBS
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ВЫБОР
	|		КОГДА ИНАГРО_УГПРРаботы.КлючСвязи = ""00000000-0000-0000-0000-000000000000""
	|			ТОГДА """"
	|		ИНАЧЕ ИНАГРО_УГПРРаботы.КлючСвязи
	|	КОНЕЦ,
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.ВидРаботы,
	|	СУММА(ИНАГРО_УГПРРаботы.Объем),
	|	СУММА(ИНАГРО_УГПРРаботы.Сумма),
	|	СУММА(ИНАГРО_УГПРРаботы.СуммаСНДС),
	|	СУММА(ИНАГРО_УГПРРаботы.НакладныеРасходы),
	|	ИНАГРО_УГПРРаботы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|	ИНАГРО_УГПРРаботы.НомерВСтруктуре,
	|	ИНАГРО_УГПРРаботы.ВидРаботы.ШифрПозицииНорматива,
	|	МАКСИМУМ(""ВидРабот""),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СУММА(ЕСТЬNULL(ИНАГРО_РаспределениеРаботСрезПоследних.ОбъемСобственный, 0)),
	|	СУММА(ЕСТЬNULL(ИНАГРО_РаспределениеРаботСрезПоследних.ОбъемСубподряда, 0)),
	|	МАКСИМУМ(ИНАГРО_РаспределениеРаботСрезПоследних.Контрагент),
	|	МАКСИМУМ(ИНАГРО_РаспределениеРаботСрезПоследних.Подразделение),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИНАГРО_УГПРРаботы.КороткоеИмя,
	|	ИНАГРО_УГПРРаботы.КодWBS,
	|	ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0),
	|	NULL
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаспределениеРабот.СрезПоследних(&ТекущаяДата, ) КАК ИНАГРО_РаспределениеРаботСрезПоследних
	|		ПО ИНАГРО_УГПРРаботы.Проект = ИНАГРО_РаспределениеРаботСрезПоследних.Проект
	|			И ИНАГРО_УГПРРаботы.Версия = ИНАГРО_РаспределениеРаботСрезПоследних.Версия
	|			И ИНАГРО_УГПРРаботы.КлючСтроки = ИНАГРО_РаспределениеРаботСрезПоследних.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Ресурсы.КлючСтроки КАК КлючСтроки,
	|			СУММА(Ресурсы.Сумма) КАК Сумма,
	|			Ресурсы.Проект КАК Проект,
	|			Ресурсы.Версия КАК Версия
	|		ИЗ
	|			Ресурсы КАК Ресурсы
	|		ГДЕ
	|			Ресурсы.Ресурс.ВидРесурса <> ЗНАЧЕНИЕ(Перечисление.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Ресурсы.КлючСтроки,
	|			Ресурсы.Проект,
	|			Ресурсы.Версия) КАК ВложенныйЗапрос
	|		ПО ИНАГРО_УГПРРаботы.КлючСтроки = ВложенныйЗапрос.КлючСтроки
	|			И ИНАГРО_УГПРРаботы.Проект = ВложенныйЗапрос.Проект
	|			И ИНАГРО_УГПРРаботы.Версия = ВложенныйЗапрос.Версия
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_ВидыРаботПроект
	|	И ИНАГРО_УГПРРаботы.КлючСтроки В
	|			(ВЫБРАТЬ
	|				втРаботы.КлючСтроки
	|			ИЗ
	|				втРаботы КАК втРаботы)
	|	И ИНАГРО_УГПРРаботы.Версия = &Версия
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.ВидРаботы,
	|	ИНАГРО_УГПРРаботы.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора,
	|	ИНАГРО_УГПРРаботы.НомерВСтруктуре,
	|	ИНАГРО_УГПРРаботы.ВидРаботы.ШифрПозицииНорматива,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ВЫБОР
	|		КОГДА ИНАГРО_УГПРРаботы.КлючСвязи = ""00000000-0000-0000-0000-000000000000""
	|			ТОГДА """"
	|		ИНАЧЕ ИНАГРО_УГПРРаботы.КлючСвязи
	|	КОНЕЦ,
	|	ИНАГРО_УГПРРаботы.КороткоеИмя,
	|	ИНАГРО_УГПРРаботы.КодWBS,
	|	ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ресурсы.КлючСтроки,
	|	NULL,
	|	Ресурсы.Проект,
	|	Ресурсы.Версия,
	|	NULL,
	|	NULL,
	|	СУММА(Ресурсы.Сумма),
	|	NULL,
	|	NULL,
	|	Ресурсы.ЕдиницаИзмерения,
	|	NULL,
	|	NULL,
	|	Ресурсы.ПараметрСтроки,
	|	Ресурсы.Ресурс,
	|	СУММА(Ресурсы.Количество),
	|	Ресурсы.ВидРесурса,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ресурсы.СметныйТип
	|ИЗ
	|	Ресурсы КАК Ресурсы
	|ГДЕ
	|	Ресурсы.КлючСтроки В
	|			(ВЫБРАТЬ
	|				втРаботы.КлючСтроки
	|			ИЗ
	|				втРаботы КАК втРаботы)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ресурсы.Проект,
	|	Ресурсы.ПараметрСтроки,
	|	Ресурсы.ЕдиницаИзмерения,
	|	Ресурсы.КлючСтроки,
	|	Ресурсы.Ресурс,
	|	Ресурсы.ВидРесурса,
	|	Ресурсы.Версия,
	|	Ресурсы.СметныйТип
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИНАГРО_УГПРОперацииРабот.КлючСтроки,
	|	NULL,
	|	ИНАГРО_УГПРОперацииРабот.Регистратор.Проект,
	|	ИНАГРО_УГПРОперацииРабот.Версия,
	|	ИНАГРО_УГПРОперацииРабот.ВидРаботы,
	|	СУММА(ИНАГРО_УГПРОперацииРабот.Объем),
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИНАГРО_УГПРРаботы.ВидРаботы.ОсновнаяЕдиница.ИНАГРО_ЕдиницаКлассификатора,
	|	NULL,
	|	NULL,
	|	МАКСИМУМ(""Операция""),
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИНАГРО_УГПРОперацииРабот.Операция,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРОперацииРабот КАК ИНАГРО_УГПРОперацииРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_УГПР.Работы КАК ИНАГРО_УГПРРаботы
	|		ПО ИНАГРО_УГПРОперацииРабот.Регистратор = ИНАГРО_УГПРРаботы.Ссылка
	|			И ИНАГРО_УГПРОперацииРабот.КлючСтроки = ИНАГРО_УГПРРаботы.КлючСтроки
	|ГДЕ
	|	ИНАГРО_УГПРОперацииРабот.КлючСтроки В
	|			(ВЫБРАТЬ
	|				втРаботы.КлючСтроки
	|			ИЗ
	|				втРаботы КАК втРаботы)
	|	И ИНАГРО_УГПРОперацииРабот.Версия = &Версия
	|	И ИНАГРО_УГПРОперацииРабот.Проект = &Проект
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_УГПРРаботы.ВидРаботы.ОсновнаяЕдиница.ИНАГРО_ЕдиницаКлассификатора,
	|	ИНАГРО_УГПРОперацииРабот.КлючСтроки,
	|	ИНАГРО_УГПРОперацииРабот.Регистратор.Проект,
	|	ИНАГРО_УГПРОперацииРабот.ВидРаботы,
	|	ИНАГРО_УГПРОперацииРабот.Операция,
	|	ИНАГРО_УГПРОперацииРабот.Версия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьСтоимости.КлючСтроки,
	|	ВедомостьСтоимости.КлючСвязи,
	|	ВедомостьСтоимости.Проект,
	|	ВедомостьСтоимости.Версия,
	|	ВедомостьСтоимости.ВидРаботы,
	|	ВедомостьСтоимости.Объем,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВедомостьСтоимости.ЕдиницаИзмерения,
	|	NULL,
	|	ВедомостьСтоимости.ВидРаботыШифрПозицииНорматива,
	|	ВедомостьСтоимости.ПараметрСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВедомостьСтоимости.МатериалыКоличество,
	|	ВедомостьСтоимости.МатериалыСумма,
	|	ВедомостьСтоимости.МашиныМеханизмыКоличество,
	|	ВедомостьСтоимости.МашиныМеханизмыСумма,
	|	ВедомостьСтоимости.МашиныМеханизмыСуммаЗПМашинистов,
	|	ВедомостьСтоимости.ТрудовыеКоличество,
	|	ВедомостьСтоимости.ТрудовыеСумма,
	|	NULL,
	|	NULL,
	|	ВедомостьСтоимости.КороткоеИмя,
	|	ВедомостьСтоимости.КодWBS,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВедомостьСтоимости КАК ВедомостьСтоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиПроектов.КлючСтроки,
	|	NULL,
	|	NULL,
	|	СвязиПроектов.Версия,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СвязиПроектов.ПараметрСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СвязиПроектов.ВерсияBoQ,
	|	СвязиПроектов.КлючСтрокиBoQ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	СвязиПроектов КАК СвязиПроектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.КлючСтроки,
	|	Результат.КлючСвязи,
	|	Результат.Проект,
	|	Результат.Версия,
	|	Результат.ВидРаботы,
	|	Результат.Объем,
	|	Результат.Сумма,
	|	Результат.СуммаСНДС,
	|	Результат.НакладныеРасходы,
	|	Результат.ЕдиницаИзмерения,
	|	Результат.НомерВСтруктуре,
	|	Результат.ШифрПозицииНорматива,
	|	Результат.ПараметрСтроки,
	|	Результат.Ресурс,
	|	Результат.Количество,
	|	Результат.ВидРесурса,
	|	Результат.Операция,
	|	Результат.ОбъемСобственный,
	|	Результат.ОбъемСубподряда,
	|	Результат.Контрагент,
	|	Результат.Подразделение,
	|	Результат.МатериалыКоличество,
	|	Результат.МатериалыСумма,
	|	Результат.МашиныМеханизмыКоличество,
	|	Результат.МашиныМеханизмыСумма,
	|	Результат.МашиныМеханизмыСуммаЗПМашинистов,
	|	Результат.ТрудовыеКоличество,
	|	Результат.ТрудовыеСумма,
	|	Результат.ВерсияBoQ,
	|	Результат.КлючСтрокиBoQ,
	|	Результат.ЕдиницаИзмерения.Наименование,
	|	Результат.ЕдиницаИзмерения.НаименованиеПолное,
	|	Результат.Ресурс.Наименование,
	|	Результат.ВидРаботы.Наименование,
	|	Результат.Операция.Наименование,
	|	Результат.Контрагент.Наименование,
	|	Результат.Подразделение.Наименование,
	|	Результат.КороткоеИмя,
	|	Результат.КодWBS,
	|	Результат.РесурснаяСебестоимость,
	|	Результат.СметныйТип
	|ИЗ
	|	Результат КАК Результат";
	
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	//Запрос.УстановитьПараметр("Регистратор", Объект.ДокументУГПР);
	Запрос.УстановитьПараметр("Регистратор", Документы.ИНАГРО_УГПР.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версия", Объект.Версия);
	Запрос.УстановитьПараметр("ВерсияВедомостьСтоимости", Объект.ВерсияВедомостьСтоимостиРабот);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ПроектGUID = Строка(Объект.Проект.УникальныйИдентификатор());
	ПроектВедомостьСтоимостиРаботGUID = Строка(Объект.ВерсияВедомостьСтоимостиРабот.УникальныйИдентификатор());
	_ИмяПользователя = ИмяПользователя() + "/" + СтрокаСоединенияИнформационнойБазы();
	
	СообщениеОбОшибке = "";
	
	Если Не ЗначениеЗаполнено(Объект.Проект.ПлановаяДатаНачала) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + "В проекте " + Объект.Проект + " не заполнена плановая дата начала!" + Символы.ПС;
	КонецЕсли;
	
	Если СообщениеОбОшибке <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Сообщить();
		Если Объект.ОстанавливатьсяПоОшибке Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ОчищатьТаблицыПередВыгрузкой Тогда
		ОчиститьЭкспортныеТаблицы(ПроектGUID);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Если Объект.ВыгружатьПроект Тогда
			НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Projects.СоздатьОбъект();
			НовыйОбъект.Project_GUID_1C = ПроектGUID;
			НовыйОбъект.PLAN_START_DATE = Объект.Проект.ПлановаяДатаНачала;
			НовыйОбъект.Project_Name = ?(ЗначениеЗаполнено(Объект.Проект.ИНАГРО_ПолноеНаименование), Объект.Проект.ИНАГРО_ПолноеНаименование, Объект.Проект.Наименование);
			НовыйОбъект.Project_Short_Name = Объект.Проект.Наименование;
			НовыйОбъект._C_User = ИмяПользователя();
			НовыйОбъект.DateTimeAdd = ТекущаяДата();
			НовыйОбъект.host_name = _ИмяПользователя;
			
			//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
			ПараметрыБазыДанных = ПолучитьПараметрыБазыДанных();
			
			НовыйОбъект.BaseName1C = ПараметрыБазыДанных.BaseName1C;
			НовыйОбъект.ServerName1C = ПараметрыБазыДанных.ServerName1C;
			//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

			НовыйОбъект.записать();
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПараметрСтроки = "Конструктив" Тогда
				
				Если Объект.ВыгружатьWBS Тогда
					
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_WBS.СоздатьОбъект();
					НовыйОбъект.wbs_name = Выборка.ВидРаботыНаименование;
					НовыйОбъект.short_wbs_name = Выборка.КодWBS;
					НовыйОбъект.guid_1c = Выборка.КлючСтроки;
					НовыйОбъект.parent_guid_1c = Выборка.КлючСвязи;
					НовыйОбъект.proj_guid = ПроектGUID;
					НовыйОбъект.UserName = _ИмяПользователя;
					НовыйОбъект.DeleteFlag = Ложь;
					НовыйОбъект.Host = ИмяКомпьютера();
					НовыйОбъект.date = ТекущаяДата();
					//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
					ПараметрыБазыДанных = ПолучитьПараметрыБазыДанных();
					
					НовыйОбъект.BaseName1C = ПараметрыБазыДанных.BaseName1C;
					НовыйОбъект.ServerName1C = ПараметрыБазыДанных.ServerName1C;
					//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

					НовыйОбъект.Записать();
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ПараметрСтроки = "ВидРабот" Тогда
				
				Если Объект.ВыгружатьРаботы Тогда
					
					Если НЕ ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
						СообщениеОбОшибке = СообщениеОбОшибке + "В работе "	+ Выборка.ВидРаботыНаименование + " не заполнен классификатор единицы измерения!" + Символы.ПС;
					КонецЕсли;
					
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Task.СоздатьОбъект();
					НовыйОбъект.Task_Guid_1C = Выборка.КлючСтроки;
					НовыйОбъект.Proj_Guid_1C = ПроектGUID;
					НовыйОбъект.Wbs_Guid_1C = Выборка.КлючСвязи;
					НовыйОбъект.Task_Code = Выборка.КодWBS;
					НовыйОбъект.Task_Name = Выборка.ВидРаботыНаименование;
					//НовыйОбъект.Task_Duration = Выборка.Длительность;
					НовыйОбъект.unit_abbrev = Выборка.ЕдиницаИзмеренияНаименование;
					НовыйОбъект.unit_name = Выборка.ЕдиницаИзмеренияНаименованиеПолное;
					НовыйОбъект.uom_guid_1c = Строка(Выборка.ЕдиницаИзмерения.УникальныйИдентификатор());
					НовыйОбъект.Task_Cost = Выборка.Сумма;
					НовыйОбъект.Task_RsrcQty = Выборка.Объем;
					НовыйОбъект.task_normative_code = Выборка.ШифрПозицииНорматива;
					НовыйОбъект.Task_Price = ?(Выборка.Объем = 0, 0, -Выборка.РесурснаяСебестоимость / Выборка.Объем);
					НовыйОбъект.Task_Contract_Net_Price = ?(Выборка.Объем = 0, 0, Выборка.Сумма / Выборка.Объем);
					
					Если Выборка.ОбъемСобственный > 0 Тогда
						Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
							НовыйОбъект.Executor_GUID = Строка(Выборка.Подразделение.УникальныйИдентификатор());
							НовыйОбъект.Executor_Name = Выборка.ПодразделениеНаименование;
						КонецЕсли;
					ИначеЕсли Выборка.ОбъемСубподряда > 0 Тогда
						Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
							НовыйОбъект.Executor_GUID = Строка(Выборка.Контрагент.УникальныйИдентификатор());
							НовыйОбъект.Executor_Name = Выборка.КонтрагентНаименование;
						КонецЕсли;
						НовыйОбъект.Subcontractor = 1;
					КонецЕсли;
					
					НовыйОбъект.DeleteFlag = Ложь;
					НовыйОбъект.UserName = _ИмяПользователя;
					//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
					ПараметрыБазыДанных = ПолучитьПараметрыБазыДанных();
					
					НовыйОбъект.BaseName1C = ПараметрыБазыДанных.BaseName1C;
					НовыйОбъект.ServerName1C = ПараметрыБазыДанных.ServerName1C;
					//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

					НовыйОбъект.Записать();
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ПараметрСтроки = "Ресурс" Тогда
				                             
				Если Объект.ВыгружатьРесурсы Тогда
				
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Resources.СоздатьОбъект();
					НовыйОбъект.Rsrc_Name = Выборка.Ресурс.Наименование;
					НовыйОбъект.Rsrc_guid_1c = Строка(Выборка.Ресурс.УникальныйИдентификатор());
					НовыйОбъект.rsrc_type = Выборка.ВидРесурса;
					НовыйОбъект.Rsrc_Short_Name = Выборка.РесурсНаименование;
					НовыйОбъект.unit_abbrev = Выборка.ЕдиницаИзмеренияНаименование;
					НовыйОбъект.unit_name = Выборка.ЕдиницаИзмеренияНаименованиеПолное;
					НовыйОбъект.uom_guid_1c = Строка(Выборка.ЕдиницаИзмерения.УникальныйИдентификатор());
					НовыйОбъект.task_guid_1c = Выборка.КлючСтроки;
					НовыйОбъект.Rsrc_Qty = Выборка.Количество;
					НовыйОбъект.rsrc_rate = ?(Выборка.Количество = 0, 0, Выборка.Сумма / Выборка.Количество);
					НовыйОбъект.rsrc_est_type = Выборка.СметныйТип;
					НовыйОбъект.UserName = _ИмяПользователя;
					НовыйОбъект.Project_GUID = ПроектGUID;
					//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
					ПараметрыБазыДанных = ПолучитьПараметрыБазыДанных();
					
					НовыйОбъект.BaseName1C = ПараметрыБазыДанных.BaseName1C;
					НовыйОбъект.ServerName1C = ПараметрыБазыДанных.ServerName1C;
					//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

					НовыйОбъект.Записать();
				КонецЕсли;
			ИначеЕсли Выборка.ПараметрСтроки = "Операция" Тогда
				Если Объект.ВыгружатьОперации Тогда
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Steps.СоздатьОбъект();
					НовыйОбъект.Task_GUID_1C = Выборка.КлючСтроки;
					НовыйОбъект.Step_Name = Выборка.ОперацияНаименование;
					НовыйОбъект.Step_Description = Выборка.ОперацияНаименование;
					НовыйОбъект.value = Выборка.Объем;
					НовыйОбъект.uom_guid_1c = Строка(Выборка.ЕдиницаИзмерения.УникальныйИдентификатор());
					НовыйОбъект.step_guid_1c = Строка(Выборка.Операция.УникальныйИдентификатор());
					НовыйОбъект.UserName = _ИмяПользователя;
					НовыйОбъект.Project_GUID = ПроектGUID;
					//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
					ПараметрыБазыДанных = ПолучитьПараметрыБазыДанных();
					
					НовыйОбъект.BaseName1C = ПараметрыБазыДанных.BaseName1C;
					НовыйОбъект.ServerName1C = ПараметрыБазыДанных.ServerName1C;
					//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

					НовыйОбъект.Записать();
				КонецЕсли;
			ИначеЕсли Выборка.ПараметрСтроки = "BoQКонструктив" Тогда
				Если Объект.ВыгружатьWBSВедомостьСтоимостиРабот Тогда
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_WBS_BoQ.СоздатьОбъект();
					НовыйОбъект.wbs_name = Выборка.ВидРаботыНаименование;
					НовыйОбъект.short_wbs_name = Выборка.КодWBS;
					НовыйОбъект.guid_1c = Выборка.КлючСтроки;
					НовыйОбъект.parent_guid_1c = Выборка.КлючСвязи;
					НовыйОбъект.proj_guid = ПроектВедомостьСтоимостиРаботGUID;
					НовыйОбъект.UserName = _ИмяПользователя;
					НовыйОбъект.Записать();
				КонецЕсли;
			ИначеЕсли Выборка.ПараметрСтроки = "BoQВидРабот" Тогда
				Если Объект.ВыгружатьРаботыВедомостьСтоимостиРабот Тогда
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Task_BoQ.СоздатьОбъект();
					НовыйОбъект.Task_Guid_1C = Выборка.КлючСтроки;
					НовыйОбъект.Proj_Guid_1C = ПроектВедомостьСтоимостиРаботGUID;
					НовыйОбъект.Wbs_Guid_1C = Выборка.КлючСвязи;
					НовыйОбъект.Task_Code = Выборка.КодWBS;
					НовыйОбъект.Task_Name = Выборка.ВидРаботыНаименование;
					НовыйОбъект.unit_abbrev = Выборка.ЕдиницаИзмеренияНаименование;
					НовыйОбъект.unit_name = Выборка.ЕдиницаИзмеренияНаименованиеПолное;
					НовыйОбъект.uom_guid_1c = Строка(Выборка.ЕдиницаИзмерения.УникальныйИдентификатор());
					НовыйОбъект.Task_Cost = Выборка.Сумма;
					НовыйОбъект.Task_RsrcQty = Выборка.Объем;
					НовыйОбъект.task_normative_code = Выборка.ШифрПозицииНорматива;
					НовыйОбъект.BoQQtyLabor = Выборка.ТрудовыеКоличество;
					НовыйОбъект.BoQQtyMachines = Выборка.МашиныМеханизмыКоличество;
					НовыйОбъект.BoQQtyMaterial = Выборка.МатериалыКоличество;
					НовыйОбъект.BoQPriceLabor = ?(Выборка.ТрудовыеКоличество = 0, 0, Выборка.ТрудовыеСумма / Выборка.ТрудовыеКоличество);
					НовыйОбъект.BoQPriceMachines = ?(Выборка.МашиныМеханизмыКоличество = 0, 0, Выборка.МашиныМеханизмыСумма / Выборка.МашиныМеханизмыКоличество);
					НовыйОбъект.BoQPriceMaterial = ?(Выборка.МатериалыКоличество = 0, 0, Выборка.МатериалыСумма / Выборка.МатериалыКоличество);
					НовыйОбъект.UserName = _ИмяПользователя;
					НовыйОбъект.Записать();
				КонецЕсли;
			ИначеЕсли Выборка.ПараметрСтроки = "BoQСоответствия" Тогда
				Если Объект.ВыгружатьСоответствияРабот Тогда
					НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Import_BoQvsUGPR_Connections.СоздатьОбъект();
					НовыйОбъект.UGPR_Project_GUID_1C = ПроектGUID;
					НовыйОбъект.BoQ_Project_GUID_1C = ПроектВедомостьСтоимостиРаботGUID;
					НовыйОбъект.UGPR_Task_GUID_1C = Выборка.КлючСтроки;
					НовыйОбъект.BoQ_Task_GUID_1C = Выборка.КлючСтрокиBoQ;
					НовыйОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СообщениеОбОшибке <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Сообщить();
		//Если Объект.ОстанавливатьсяПоОшибке Тогда
		//	Возврат;
		//КонецЕсли;	
	КонецЕсли;

	#Область ВызовХранимыхПроцедур
	
	// Власть поменялась, не будем сразу вызывать хранимые процедуры.
	// пользователь должен посмотреть на те данные, которые приехали в ПрогрессТреккер
	
	
	//Если Объект.ФормироватьПроект Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_CreateProject(Объект.Проект.Наименование, Объект.Проект.Код, Объект.Проект.ПлановаяДатаНачала, ПроектGUID, _ИмяПользователя);
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьWBS Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_ImportWbs(ПроектGUID);
	//		Сообщить("Экспорт WBS");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьРаботы Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_ImportTasks(ПроектGUID);
	//		Сообщить("Экспорт работ");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьРесурсы Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_Import_Rsrc(ПроектGUID,);
	//		Сообщить("Экспорт ресурсов");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;	
	//
	//Если Объект.ФормироватьОперации Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_Import_TaskSteps(ПроектGUID);
	//		Сообщить("Экспорт операций");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;	
	//
	//Если Объект.ФормироватьПроектВедомостьСтоимостиРабот Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_CreateProject_BoQ(Объект.Проект.Наименование+"_BoQ", Объект.Проект.Код+"BoQ", Объект.Проект.ПлановаяДатаНачала, ПроектВедомостьСтоимостиРаботGUID, _ИмяПользователя);
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьWBSВедомостьСтоимостиРабот Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_ImportWbsBoQ(ПроектВедомостьСтоимостиРаботGUID);
	//		Сообщить("Экспорт WBS BoQ");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьРаботыВедомостьСтоимостиРабот Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_ImportTasksBoQ(ПроектВедомостьСтоимостиРаботGUID);
	//		Сообщить("Экспорт работ BoQ");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Если Объект.ФормироватьСоответствияРабот Тогда
	//	
	//	Попытка
	//		ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.dbo_ConnectUGPRvsBoQ(ПроектGUID,ПроектВедомостьСтоимостиРаботGUID,_ИмяПользователя);
	//		Сообщить("Экспорт соответствий работ");	
	//	Исключение 
	//		Сообщить(ОписаниеОшибки());	
	//		Если Объект.ОстанавливатьсяПоОшибке Тогда
	//			Возврат;
	//		КонецЕсли;	
	//	КонецПопытки;
	//	
	//КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры	

//{{ BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00
Функция ПолучитьПараметрыБазыДанных()
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	МассивСтрок = СтрРазделить(СтрокаСоединения,"""",);
	ServerName1C = "";
	BaseName1C = "";
	Если СтрНайти(СтрокаСоединения,"File")>0 Тогда
		ServerName1C = МассивСтрок[1];
		BaseName1C = МассивСтрок[1];
	Иначе
		ServerName1C = МассивСтрок[1];
		BaseName1C = МассивСтрок[3];
	КонецЕсли;
	
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("ServerName1C",ServerName1C);
	ПараметрыСоединения.Вставить("BaseName1C",BaseName1C);
	
	Возврат ПараметрыСоединения;
КонецФункции
//}} BI-Digital: Кашкинбаев Т.А. по заявке 170805 от 21.06.2018 11:00

Функция ЗагрузитьПроекты(СписокИдентификаторов=Неопределено) Экспорт
	
	ПроверитьСтрокуСоединения();
	
	Запрос = Новый Запрос;
	Если СписокИдентификаторов = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Outgoing_Projects.Project_Guid_1C
		|ИЗ
		|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_Projects КАК dbo_Outgoing_Projects";
		СписокИдентификаторов = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокИдентификаторов.Добавить(Выборка.Project_GUID_1C);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокИдентификаторов",СписокИдентификаторов);
	
	#Область Запрос
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_Outgoing_Projects.Project_GUID_1C,
	|	dbo_Outgoing_Projects.Project_Name,
	|	dbo_Outgoing_Projects.Project_Short_Name,
	|	dbo_Outgoing_Projects.ExportDateTime,
	|	dbo_Outgoing_Projects.PlanStartDate,
	|	dbo_Outgoing_Projects.plan_end_date
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_Projects КАК dbo_Outgoing_Projects
	|ГДЕ
	|	dbo_Outgoing_Projects.Project_GUID_1C В(&СписокИдентификаторов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	dbo_OutGoing_WBS.wbs_id,
	|	dbo_OutGoing_WBS.parent_wbs_id,
	|	dbo_OutGoing_WBS.wbs_name,
	|	dbo_OutGoing_WBS.short_wbs_name КАК short_wbs_name,
	|	dbo_OutGoing_WBS.guid_1c,
	|	dbo_OutGoing_WBS.parent_guid_1c,
	|	dbo_OutGoing_WBS.proj_guid КАК Project_Guid_1C,
	|	dbo_OutGoing_WBS.proj_node_flag,
	|	ВЫБОР
	|		КОГДА dbo_OutGoing_WBS.proj_node_flag = ""Y""
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокWBS,
	|	dbo_OutGoing_WBS.DeleteFlag
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_OutGoing_WBS КАК dbo_OutGoing_WBS
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_OutGoing_WBS.proj_guid,
	|	ПорядокWBS,
	|	short_wbs_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	dbo_Outgoing_TASKS.Task_Guid_1C,
	|	dbo_Outgoing_TASKS.Project_Guid_1C КАК Project_Guid_1C,
	|	dbo_Outgoing_TASKS.Wbs_Guid_1C,
	|	dbo_Outgoing_TASKS.Task_Code КАК Task_Code,
	|	dbo_Outgoing_TASKS.Task_Name,
	|	dbo_Outgoing_TASKS.unit_abbrev,
	|	dbo_Outgoing_TASKS.unit_name,
	|	dbo_Outgoing_TASKS.uom_guid_1c,
	|	dbo_Outgoing_TASKS.Rsrc_guid_1c,
	|	dbo_Outgoing_TASKS.Task_RsrcQty,
	|	dbo_Outgoing_TASKS.Subcontractor,
	|	dbo_Outgoing_TASKS.Executor_Name,
	|	dbo_Outgoing_TASKS.task_normative_code,
	|	dbo_Outgoing_TASKS.Task_Price,
	|	dbo_Outgoing_TASKS.Task_Contract_Net_Price,
	|	dbo_Outgoing_TASKS.restart_date,
	|	dbo_Outgoing_TASKS.reend_date,
	|	dbo_Outgoing_TASKS.act_start_date,
	|	dbo_Outgoing_TASKS.act_end_date,
	|	dbo_Outgoing_TASKS.Task_CATALOG_Guid_1C
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_TASKS КАК dbo_Outgoing_TASKS
	|
	|УПОРЯДОЧИТЬ ПО
	|	Project_Guid_1C,
	|	Task_Code
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	dbo_Outgoing_Resources.id,
	|	dbo_Outgoing_Resources.Project_GUID_1C КАК Project_Guid_1C,
	|	dbo_Outgoing_Resources.Rsrc_Name,
	|	dbo_Outgoing_Resources.Rsrc_guid_1c,
	|	dbo_Outgoing_Resources.rsrc_type,
	|	dbo_Outgoing_Resources.Rsrc_Short_Name,
	|	dbo_Outgoing_Resources.uom_guid_1c,
	|	dbo_Outgoing_Resources.rsrc_rate,
	|	dbo_Outgoing_Resources.rsrc_contract_rate,
	|	dbo_Outgoing_Resources.Rsrc_Qty,
	|	dbo_Outgoing_Resources.unit_abbrev,
	|	dbo_Outgoing_Resources.unit_name,
	|	dbo_Outgoing_Resources.UserName,
	|	dbo_Outgoing_Resources.res_normative_code,
	|	dbo_Outgoing_Resources.rsrc_est_type,
	|	dbo_Outgoing_Resources.Task_GUID_1C,
	|	dbo_Outgoing_Resources.pm_rsrc_id,
	|	dbo_Outgoing_Resources.Rsrc_Actual_Qty,
	|	dbo_Outgoing_Resources.act_start_date,
	|	dbo_Outgoing_Resources.act_end_date,
	|	dbo_Outgoing_Resources.target_start_date,
	|	dbo_Outgoing_Resources.target_end_date
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_Resources КАК dbo_Outgoing_Resources
	|
	|УПОРЯДОЧИТЬ ПО
	|	Project_Guid_1C
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	dbo_Outgoing_Actuals.project_guid_1c КАК project_guid_1c,
	|	dbo_Outgoing_Actuals.task_guid_1c,
	|	dbo_Outgoing_Actuals.rsrc_guid_1c,
	|	dbo_Outgoing_Actuals.ActualDate КАК ActualDate,
	|	dbo_Outgoing_Actuals.ActualQty,
	|	dbo_Outgoing_Actuals.Actual_GUID_1C
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_Actuals КАК dbo_Outgoing_Actuals
	|
	|УПОРЯДОЧИТЬ ПО
	|	project_guid_1c,
	|	ActualDate";
	
	#КонецОбласти
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПроекты = РезультатыЗапросов[0].Выбрать();
	ВыборкаWBS = РезультатыЗапросов[1].Выбрать();
	ВыборкаРаботы = РезультатыЗапросов[2].Выбрать();
	ВыборкаРесурсы = РезультатыЗапросов[3].Выбрать();
	ВыборкаФакт = РезультатыЗапросов[3].Выбрать();
	
	ЗапросУГПР = Новый Запрос;
	ЗапросУГПР.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_УГПР.Проект,
	|	ИНАГРО_УГПР.Версия,
	|	ИНАГРО_УГПР.Ссылка
	|ИЗ
	|	Документ.ИНАГРО_УГПР КАК ИНАГРО_УГПР";
	
	ВыборкаУГПР = ЗапросУГПР.Выполнить().Выбрать();
	
	СписокУГПР = Новый Массив;
	
	
	ЗапросРазделенныеРаботы = Новый Запрос;
	ЗапросРазделенныеРаботы.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.Проект,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ИНАГРО_УГПРРаботы.КлючИсходнойРаботы
	|ПОМЕСТИТЬ ДобавленныеСтроки
	|ИЗ
	|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.Проект = &Проект
	|	И ИНАГРО_УГПРРаботы.Версия = &Версия
	|	И ИНАГРО_УГПРРаботы.КлючИсходнойРаботы <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ИНАГРО_УГПРРаботы.КлючИсходнойРаботы,
	|	ИНАГРО_УГПРРаботы.Версия,
	|	ИНАГРО_УГПРРаботы.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючИсходнойСтроки КАК КлючИсходнойСтроки,
	|	ВложенныйЗапрос.КлючСтроки,
	|	ВложенныйЗапрос.Объем КАК Объем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИНАГРО_УГПРРаботы.КлючСтроки КАК КлючСтроки,
	|		ДобавленныеСтроки.КлючИсходнойРаботы КАК КлючИсходнойСтроки,
	|		СУММА(ИНАГРО_УГПРРаботы.Объем) КАК Объем
	|	ИЗ
	|		ДобавленныеСтроки КАК ДобавленныеСтроки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|			ПО ДобавленныеСтроки.Проект = ИНАГРО_УГПРРаботы.Проект
	|				И ДобавленныеСтроки.Версия = ИНАГРО_УГПРРаботы.Версия
	|				И ДобавленныеСтроки.КлючИсходнойРаботы = ИНАГРО_УГПРРаботы.КлючСтроки
	|	ГДЕ
	|		ИНАГРО_УГПРРаботы.Объем <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИНАГРО_УГПРРаботы.КлючСтроки,
	|		ДобавленныеСтроки.КлючИсходнойРаботы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИНАГРО_УГПРРаботы.КлючСтроки,
	|		ДобавленныеСтроки.КлючИсходнойРаботы,
	|		СУММА(ИНАГРО_УГПРРаботы.Объем)
	|	ИЗ
	|		ДобавленныеСтроки КАК ДобавленныеСтроки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
	|			ПО ДобавленныеСтроки.Проект = ИНАГРО_УГПРРаботы.Проект
	|				И ДобавленныеСтроки.Версия = ИНАГРО_УГПРРаботы.Версия
	|				И ДобавленныеСтроки.КлючСтроки = ИНАГРО_УГПРРаботы.КлючСтроки
	|	ГДЕ
	|		ИНАГРО_УГПРРаботы.Объем <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДобавленныеСтроки.КлючИсходнойРаботы,
	|		ИНАГРО_УГПРРаботы.КлючСтроки) КАК ВложенныйЗапрос";
	
	
	
	Пока ВыборкаПроекты.Следующий() Цикл
		
		#Область Проект		
		
		ПроектГУИД = ВыборкаПроекты.Project_Guid_1C;
		Реквизиты = Новый Структура("Наименование,ИНАГРО_ГрафикРаботы", ВыборкаПроекты.Project_Name, Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка());
		ПроектСсылка = ПолучитьСправочникПоГУИДу("Проекты", ПроектГУИД, Реквизиты);
		График = ПроектСсылка.ИНАГРО_ГрафикРаботы;
		
		
		ВерсияПроектаСсылка = Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(ПроектСсылка);
		Если ВерсияПроектаСсылка = Неопределено Тогда
			ВерсияПроектаСсылка = СоздатьРабочуюВерсиюПроекта(ПроектСсылка);
		КонецЕсли;
		
		ВыборкаУГПР.Сбросить();
		Если ВыборкаУГПР.НайтиСледующий(Новый Структура("Проект, Версия", ПроектСсылка, ВерсияПроектаСсылка)) Тогда
			УГПРОбъект = ВыборкаУГПР.Ссылка.ПолучитьОбъект();
		Иначе
			УГПРОбъект = Документы.ИНАГРО_УГПР.СоздатьДокумент();
			УГПРОбъект.Проект = ПроектСсылка;
			УГПРОбъект.Версия = ВерсияПроектаСсылка;
			УГПРОбъект.Дата = ВыборкаПроекты.ExportDateTime;
			УГПРОбъект.Записать();
		КонецЕсли;
		
		// Документ с периодами
		ДокументПериодыСсылка = Документы.ИНАГРО_УГПР.ДокументСПериодамиСсылка(УГПРОбъект.Ссылка);
		ДокументПериодыОбъект = ДокументПериодыСсылка.ПолучитьОбъект();
		
		ТаблицаПериоды = ДокументПериодыОбъект.РаботыПериод.Выгрузить();
		ТаблицаПериоды.Очистить();
		
		ТаблицаРаботы = УГПРОбъект.Работы.Выгрузить();
		ТаблицаРаботы.Колонки.Добавить("Обработано");
		ТаблицаРаботы.ЗаполнитьЗначения(Ложь, "Обработано");
		
		// Документ 
		
		// Папка для добавления новых ресурсов
		НаименованиеРодителя = "Ресурсы проекта " + СокрЛП(ВыборкаПроекты.Project_Name);
		РодительСсылка = Справочники.СМ_Ресурсы.НайтиПоНаименованию(НаименованиеРодителя,Истина,Справочники.СМ_Ресурсы.Инагро_РесурсыПроектов);
		Если РодительСсылка.Пустая() ИЛИ НЕ РодительСсылка.ЭтоГруппа Тогда
			РодительОбъект = Справочники.СМ_Ресурсы.СоздатьГруппу();
			РодительОбъект.Наименование = НаименованиеРодителя;
			РодительОбъект.Родитель = Справочники.СМ_Ресурсы.Инагро_РесурсыПроектов;
			РодительОбъект.ОбменДанными.Загрузка = Истина;
			РодительОбъект.Записать();
			РодительСсылка = РодительОбъект.Ссылка;
		КонецЕсли;
		
		
		ЗапросРазделенныеРаботы.УстановитьПараметр("Проект", ПроектСсылка);
		ЗапросРазделенныеРаботы.УстановитьПараметр("Версия", ВерсияПроектаСсылка);
		
		ТаблицаРазделенныеРаботы = ЗапросРазделенныеРаботы.Выполнить().Выгрузить();
		
		СтруктураПоиска = Новый Структура("Project_Guid_1C", ПроектГУИД);
		#КонецОбласти		

		#Область WBS
		// WBS
		ВыборкаWBS.Сбросить();
		Пока ВыборкаWBS.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыборкаWBS.Project_Guid_1C <> ПроектГУИД Тогда
				Прервать;
			КонецЕсли;
			
			Если ВыборкаWBS.proj_node_flag = "Y" Тогда
				//это Корневая WBS, ее добавлять не нужно
				КлючКорня = ВыборкаWBS.guid_1c;
				Продолжить;
			КонецЕсли;
			
			Строки = ТаблицаРаботы.НайтиСтроки(Новый Структура("КлючСтроки", ВыборкаWBS.guid_1c));
			Если Строки.Количество() = 0 Тогда
				Строка = ТаблицаРаботы.Добавить();
			Иначе
				Строка = Строки[0];
			КонецЕсли;
			
			Строка.Обработано = Истина;
			Строка.КлючСтроки = ВыборкаWBS.guid_1c;
			Если ВыборкаWBS.parent_guid_1c = КлючКорня Тогда
				Строка.КлючСвязи = "00000000-0000-0000-0000-000000000000";
			Иначе	
				Строка.КлючСвязи = ВыборкаWBS.parent_guid_1c;
			КонецЕсли;
			Строка.КодWBS = ВыборкаWBS.short_wbs_name;
			Строка.ВидРаботы = ПолучитьСправочникПоНаименованию("ИНАГРО_КонструктивыПроекта",ВыборкаWBS.wbs_name,ПроектСсылка);
			Строка.ЭтоРабота = Ложь;
			
		КонецЦикла;
		
		#КонецОбласти		
		
		#Область Работы		
		
		ИдентификаторыРабот = Новый Соответствие;
		
		//Работы
		ВыборкаРаботы.Сбросить();
		Пока ВыборкаРаботы.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыборкаРаботы.Project_Guid_1C <> ПроектГУИД Тогда
				Прервать;
			КонецЕсли;
			
			Строки = ТаблицаРаботы.НайтиСтроки(Новый Структура("КлючСтроки", ВыборкаРаботы.Task_Guid_1C));
			Если Строки.Количество() = 0 Тогда
				Строка = ТаблицаРаботы.Добавить();
			Иначе
				Строка = Строки[0];
			КонецЕсли;
			
			Строка.Обработано = Истина;
			Строка.КлючСтроки = ВыборкаРаботы.Task_Guid_1C;
			Строка.КлючСвязи = ВыборкаРаботы.Wbs_Guid_1C;
			Строка.КодWBS = ВыборкаРаботы.Task_Code;
			
			ЕдиницаИзмеренияСсылка = ПолучитьЕдиницуИзмерения(ВыборкаРаботы.uom_guid_1c, ВыборкаРаботы.unit_name, ВыборкаРаботы.unit_abbrev);
			
			Строка.ВидРаботы = ПолучитьСправочникПоНаименованию("ИНАГРО_ВидыРаботПроект",ВыборкаРаботы.Task_Name,ПроектСсылка, ЕдиницаИзмеренияСсылка);
			Строка.ЭтоРабота = Истина;
			Строка.ЕдиницаИзмерения = ЕдиницаИзмеренияСсылка;
			Строка.Объем = ВыборкаРаботы.Task_RsrcQty;
			Строка.Цена = ВыборкаРаботы.Task_Contract_Net_Price;
			Строка.Сумма = Строка.Цена * Строка.Объем;
			
			//Строка.ЦенаСНДС = -ВыборкаРаботы.Task_Price;
			//Строка.СуммаСНДС = Строка.ЦенаСНДС * Строка.Объем;
			
			ИдентификаторыРабот.Вставить(Строка.КлючСтроки, Строка.ВидРаботы);
			
			
			РазделенныеСтроки = ТаблицаРазделенныеРаботы.НайтиСтроки(Новый Структура("КлючИсходнойСтроки",ВыборкаРаботы.Task_Guid_1C));
			
			// добавим период работы
			
			// Сначала определим один период или несколько
			
			Если  ВыборкаРаботы.restart_date <> Дата(1,1,1)
				И ВыборкаРаботы.reend_date <> Дата(1,1,1) 
				И НачалоДня(ВыборкаРаботы.restart_date) <= НачалоДня(ВыборкаРаботы.reend_date) Тогда
				
				Если НачалоМесяца(ВыборкаРаботы.restart_date) = НачалоМесяца(ВыборкаРаботы.reend_date) Тогда
					// месяц один, делить не нужно
					
					Если РазделенныеСтроки.Количество() = 0 Тогда
						СтрокаПериоды = ТаблицаПериоды.Добавить();
						СтрокаПериоды.КлючСтроки	= Строка.КлючСтроки;
						СтрокаПериоды.НачалоПериода = ВыборкаРаботы.restart_date;
						СтрокаПериоды.КонецПериода	= ВыборкаРаботы.reend_date;
						СтрокаПериоды.Объем			= Строка.Объем;
						СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
						СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
						СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
						
					Иначе
						Для Каждого РазделеннаяСтрока Из РазделенныеСтроки Цикл
							СтрокаПериоды = ТаблицаПериоды.Добавить();
							СтрокаПериоды.КлючСтроки	= РазделеннаяСтрока.КлючСтроки;
							СтрокаПериоды.НачалоПериода = ВыборкаРаботы.restart_date;
							СтрокаПериоды.КонецПериода	= ВыборкаРаботы.reend_date;
							СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
							СтрокаПериоды.Объем			= РазделеннаяСтрока.Объем;
							СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
							СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
							
						КонецЦикла	
					КонецЕсли;
				
					
				Иначе
					
					
					ТекНачало = НачалоДня(ВыборкаРаботы.restart_date);
					ТекКонец = НачалоДня(ВыборкаРаботы.reend_date);
					ОбщаяДлительность = ПолучитьДлительность(ТекНачало, ТекКонец, График);
					
					Пока ТекНачало <= ТекКонец Цикл
						
						Если РазделенныеСтроки.Количество() = 0 Тогда
							СтрокаПериоды = ТаблицаПериоды.Добавить();
							СтрокаПериоды.КлючСтроки	= Строка.КлючСтроки;
							СтрокаПериоды.НачалоПериода = ТекНачало;
							СтрокаПериоды.КонецПериода	= Мин(КонецМесяца(ТекНачало),ТекКонец);
							СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
							СтрокаПериоды.Объем			= Строка.Объем * СтрокаПериоды.Длительность / ОбщаяДлительность;
							СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
							СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
							
						Иначе
							Для Каждого РазделеннаяСтрока Из РазделенныеСтроки Цикл
								СтрокаПериоды = ТаблицаПериоды.Добавить();
								СтрокаПериоды.КлючСтроки	= РазделеннаяСтрока.КлючСтроки;
								СтрокаПериоды.НачалоПериода = ТекНачало;
								СтрокаПериоды.КонецПериода	= Мин(КонецМесяца(ТекНачало),ТекКонец);
								СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
								СтрокаПериоды.Объем			= РазделеннаяСтрока.Объем * СтрокаПериоды.Длительность / ОбщаяДлительность;
								СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
								СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
								
							КонецЦикла	
						КонецЕсли;
						
						ТекНачало = НачалоМесяца(ДобавитьМесяц(ТекНачало,1));
						
					КонецЦикла;
					
				КонецЕсли;
			Иначе
				// какой-то даты не хватает
				Если РазделенныеСтроки.Количество() = 0 Тогда
					СтрокаПериоды = ТаблицаПериоды.Добавить();
					СтрокаПериоды.КлючСтроки	= Строка.КлючСтроки;
					СтрокаПериоды.НачалоПериода = ВыборкаРаботы.restart_date;
					СтрокаПериоды.КонецПериода	= ВыборкаРаботы.reend_date;
					СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
					СтрокаПериоды.Объем			= Строка.Объем;
					СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
					СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
					
				Иначе
					Для Каждого РазделеннаяСтрока Из РазделенныеСтроки Цикл
						СтрокаПериоды = ТаблицаПериоды.Добавить();
						СтрокаПериоды.КлючСтроки	= РазделеннаяСтрока.КлючСтроки;
						СтрокаПериоды.НачалоПериода = ВыборкаРаботы.restart_date;
						СтрокаПериоды.КонецПериода	= ВыборкаРаботы.reend_date;
						СтрокаПериоды.Длительность = ПолучитьДлительность(СтрокаПериоды.НачалоПериода, СтрокаПериоды.КонецПериода, График);
						СтрокаПериоды.Объем			= РазделеннаяСтрока.Объем;
						СтрокаПериоды.ТипСроков		= Перечисления.ЕдиницыИзмеренияВремени.День;
						СтрокаПериоды.ВидРаботы		= Строка.ВидРаботы;
						
					КонецЦикла	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Строки = ТаблицаРаботы.НайтиСтроки(Новый Структура("Обработано", Ложь));
		Для Каждого Строка Из Строки Цикл
			ТаблицаРаботы.Удалить(Строка);
		КонецЦикла;
		
		ТаблицаРаботы.Колонки.Удалить("Обработано");
		ТаблицаРаботы.Сортировать("КодWBS");
		УГПРОбъект.Работы.Загрузить(ТаблицаРаботы);
		
		ДокументПериодыОбъект.РаботыПериод.Загрузить(ТаблицаПериоды);
		ДокументПериодыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		#КонецОбласти		
		
		#Область Ресурсы
		//Ресурсы
		
		ТаблицаРесурсыМатериальные = УГПРОбъект.РесурсыМатериалы.Выгрузить();
		ТаблицаРесурсыМатериальные.Колонки.Добавить("Обработано");
		ТаблицаРесурсыМатериальные.ЗаполнитьЗначения(Ложь, "Обработано");
		
		ТаблицаРесурсыТрудовые = УГПРОбъект.РесурсыТрудовые.Выгрузить();
		ТаблицаРесурсыТрудовые.Колонки.Добавить("Обработано");
		ТаблицаРесурсыТрудовые.ЗаполнитьЗначения(Ложь, "Обработано");
		
		ТаблицаРесурсыМашинные = УГПРОбъект.РесурсыМашинные.Выгрузить();
		ТаблицаРесурсыМашинные.Колонки.Добавить("Обработано");
		ТаблицаРесурсыМашинные.ЗаполнитьЗначения(Ложь, "Обработано");
		
		ВыборкаРесурсы.Сбросить();
		Пока ВыборкаРесурсы.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыборкаРесурсы.Project_Guid_1C <> ПроектГУИД Тогда
				Прервать;
			КонецЕсли;
			
			ЕдиницаИзмеренияСсылка = ПолучитьЕдиницуИзмерения(ВыборкаРесурсы.uom_guid_1c, ВыборкаРесурсы.unit_name, ВыборкаРесурсы.unit_abbrev);
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Наименование",ВыборкаРесурсы.Rsrc_Name);
			Реквизиты.Вставить("ДлинноеНаименование",ВыборкаРесурсы.Rsrc_Name);
			Реквизиты.Вставить("ЕдиницаИзмерения",ЕдиницаИзмеренияСсылка);
			
			Если ВыборкаРесурсы.rsrc_type = "RT_Mat" Тогда
				
				РабочаяТаблица = ТаблицаРесурсыМатериальные;
				
				Реквизиты.Вставить("ВидРесурса",Перечисления.СМ_ВидыРесурсов.Материалы);
				Реквизиты.Вставить("ИНАГРО_ТипРесурсов", Перечисления.ИНАГРО_ТипыРесурсов.Материальные);
				
			ИначеЕсли ВыборкаРесурсы.rsrc_type = "RT_Labor" Тогда	
				
				РабочаяТаблица = ТаблицаРесурсыТрудовые;
				
				Реквизиты.Вставить("ВидРесурса",Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаРабочих);
				Реквизиты.Вставить("ИНАГРО_ТипРесурсов", Перечисления.ИНАГРО_ТипыРесурсов.ТрудовыеРесурсы);
				
			ИначеЕсли ВыборкаРесурсы.rsrc_type = "RT_Equip" Тогда	
				
				РабочаяТаблица = ТаблицаРесурсыМашинные;
				
				Реквизиты.Вставить("ВидРесурса",Перечисления.СМ_ВидыРесурсов.МашиныИМеханизмы);
				Реквизиты.Вставить("ИНАГРО_ТипРесурсов", Перечисления.ИНАГРО_ТипыРесурсов.МашиныИМеханизмы);
				
			КонецЕсли;
			
			РесурсСсылка = ПолучитьСправочникПоГУИДу("СМ_Ресурсы", ВыборкаРесурсы.Rsrc_guid_1c, Реквизиты, РодительСсылка);

			Строки = РабочаяТаблица.НайтиСтроки(Новый Структура("КлючСтроки,Ресурс", ВыборкаРесурсы.Task_Guid_1C, РесурсСсылка));
			Если Строки.Количество() = 0 Тогда
				Строка = РабочаяТаблица.Добавить();
			Иначе
				Строка = Строки[0];
			КонецЕсли;
			Строка.Обработано = Истина;
			Строка.КлючСтроки = ВыборкаРесурсы.Task_Guid_1C;
			Строка.Ресурс = РесурсСсылка;
			Строка.Количество = ВыборкаРесурсы.Rsrc_Qty;
			Строка.Цена = - ВыборкаРесурсы.rsrc_rate;
			Строка.Сумма = Строка.Цена * Строка.Количество;
			
			Строка.ВидРаботы = ИдентификаторыРабот.Получить(Строка.КлючСтроки);
			
		КонецЦикла;
		
		Строки = ТаблицаРесурсыМатериальные.НайтиСтроки(Новый Структура("Обработано", Ложь));
		Для Каждого Строка Из Строки Цикл
			ТаблицаРесурсыМатериальные.Удалить(Строка);
		КонецЦикла;
		ТаблицаРесурсыМатериальные.Колонки.Удалить("Обработано");
		УГПРОбъект.РесурсыМатериалы.Загрузить(ТаблицаРесурсыМатериальные);
		
		Строки = ТаблицаРесурсыТрудовые.НайтиСтроки(Новый Структура("Обработано", Ложь));
		Для Каждого Строка Из Строки Цикл
			ТаблицаРесурсыТрудовые.Удалить(Строка);
		КонецЦикла;
		ТаблицаРесурсыТрудовые.Колонки.Удалить("Обработано");
		УГПРОбъект.РесурсыТрудовые.Загрузить(ТаблицаРесурсыТрудовые);
		
		Строки = ТаблицаРесурсыМашинные.НайтиСтроки(Новый Структура("Обработано", Ложь));
		Для Каждого Строка Из Строки Цикл
			ТаблицаРесурсыМашинные.Удалить(Строка);
		КонецЦикла;
		ТаблицаРесурсыМашинные.Колонки.Удалить("Обработано");
		УГПРОбъект.РесурсыМашинные.Загрузить(ТаблицаРесурсыМашинные);
		
		#КонецОбласти		
		
		#Область факт
		//ВыборкаФакт.Сбросить();
		//ТекущаяДата = Дата(1,1,1,0,0,0);
		//Пока ВыборкаФакт.НайтиСледующий(СтруктураПоиска) Цикл
		//	
		//	Если ВыборкаРаботы.Project_Guid_1C <> ПроектГУИД Тогда
		//		Прервать;
		//	КонецЕсли;	
		//	
		//	Если ТекущаяДата <> ВыборкаФакт.ActualDate Тогда
		//		// новая дата, нужны новые документы
		//	КонецЕсли;	
		//	
		//КонецЦикла;	
		#КонецОбласти
		
		Если НЕ ПроектСсылка.ИНАГРО_ЗагружатьТолькоПериоды И УГПРОбъект.Статус <> Перечисления.СтатусыПланов.Утвержден  Тогда
		
			Если УГПРОбъект.ПометкаУдаления Тогда
				УГПРОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
			УГПРОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		СписокУГПР.Добавить(УГПРОбъект.Ссылка);
		 
	КонецЦикла;
	
	Возврат СписокУГПР;
	
КонецФункции

#Область Факт

Процедура ВыгрузитьФакт() Экспорт
	
	ПроверитьСтрокуСоединения();
	
	Объект = ЭтотОбъект;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_УчетВыполненныхРаботОбороты.Проект,
	|	ИНАГРО_УчетВыполненныхРаботОбороты.КлючСтроки,
	|	ИНАГРО_УчетВыполненныхРаботОбороты.ОбъемРаботыОборот,
	|	ИНАГРО_УчетВыполненныхРаботОбороты.СуммаОборот,
	|	ИНАГРО_УчетВыполненныхРаботОбороты.Регистратор,
	|	ИНАГРО_УчетВыполненныхРаботОбороты.ПериодДень
	|ИЗ
	|	РегистрНакопления.ИНАГРО_УчетВыполненныхРабот.Обороты(, , Авто, Проект = &Проект) КАК ИНАГРО_УчетВыполненныхРаботОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты.КлючСтроки,
	|	ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты.ДатаФакт КАК ПериодДень,
	|	ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты.Ресурс,
	|	ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты.Регистратор,
	|	ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты.КоличествоРесурсаОборот
	|ИЗ
	|	РегистрНакопления.ИНАГРО_УчетРаботыТрудовыхРесурсов.Обороты(, , Авто, Проект = &Проект) КАК ИНАГРО_УчетРаботыТрудовыхРесурсовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_УчетРаботыТехникиОбороты.Регистратор,
	|	ИНАГРО_УчетРаботыТехникиОбороты.ДатаВыполнения КАК ПериодДень,
	|	ИНАГРО_УчетРаботыТехникиОбороты.КлючСтроки,
	|	ИНАГРО_УчетРаботыТехникиОбороты.Ресурс,
	|	ИНАГРО_УчетРаботыТехникиОбороты.КоличествоРесурсаОборот
	|ИЗ
	|	РегистрНакопления.ИНАГРО_УчетРаботыТехники.Обороты(, , Авто, Проект = &Проект) КАК ИНАГРО_УчетРаботыТехникиОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИНАГРО_РасходМатериаловОбороты.Ресурс,
	|	ИНАГРО_РасходМатериаловОбороты.КлючСтроки,
	|	ИНАГРО_РасходМатериаловОбороты.КоличествоРесурсаОборот,
	|	ИНАГРО_РасходМатериаловОбороты.ПериодДень,
	|	ИНАГРО_РасходМатериаловОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.ИНАГРО_РасходМатериалов.Обороты(, , Авто, Проект = &Проект) КАК ИНАГРО_РасходМатериаловОбороты";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	
	ПроектGUID = Строка(Объект.Проект.УникальныйИдентификатор());
	
	Если Объект.ОчищатьТаблицыПередВыгрузкой Тогда
		ОчиститьЭкспортныеТаблицы(ПроектGUID);
	КонецЕсли;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаФизобъемовРабот = РезультатыЗапросов[0].Выбрать();
	ВыборкаТрудовыхРесурсов = РезультатыЗапросов[1].Выбрать();
	ВыборкаМашинИМеханизмов = РезультатыЗапросов[2].Выбрать();
	ВыборкаМатериалов = РезультатыЗапросов[3].Выбрать();
	
	Пока ВыборкаФизобъемовРабот.Следующий() Цикл
		//Сообщить("Есть физобъемы");
		НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Actuals.СоздатьОбъект();
		НовыйОбъект.ActualDate = ВыборкаФизобъемовРабот.ПериодДень;
		НовыйОбъект.ActualQty = ВыборкаФизобъемовРабот.ОбъемРаботыОборот;
		НовыйОбъект.IS_PHV = 1;
		НовыйОбъект.project_guid_1c = ПроектGUID;
		НовыйОбъект.task_guid_1c = ВыборкаФизобъемовРабот.КлючСтроки;
		НовыйОбъект.Actual_GUID_1C = Строка(ВыборкаФизобъемовРабот.Регистратор.УникальныйИдентификатор());
		НовыйОбъект.RSRC_TYPE = "RT_Mat";
		НовыйОбъект.ExportDate = ТекущаяДата();
		НовыйОбъект.UserName1C = Строка(ПараметрыСеанса.ТекущийПользователь);
		НовыйОбъект.Записать();
	КонецЦикла;
	
	Пока ВыборкаТрудовыхРесурсов.Следующий() Цикл
		//Сообщить("Есть трудовые");
		НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Actuals.СоздатьОбъект();
		НовыйОбъект.ActualDate = ВыборкаТрудовыхРесурсов.ПериодДень;
		НовыйОбъект.ActualQty = ВыборкаТрудовыхРесурсов.КоличествоРесурсаОборот;
		НовыйОбъект.IS_PHV = 0;
		НовыйОбъект.project_guid_1c = ПроектGUID;
		НовыйОбъект.task_guid_1c = ВыборкаТрудовыхРесурсов.КлючСтроки;
		НовыйОбъект.Actual_GUID_1C = Строка(ВыборкаТрудовыхРесурсов.Регистратор.УникальныйИдентификатор());
		НовыйОбъект.rsrc_guid_1c = Строка(ВыборкаТрудовыхРесурсов.Ресурс.УникальныйИдентификатор());
		НовыйОбъект.RSRC_TYPE = "RT_Labor";
		НовыйОбъект.ExportDate = ТекущаяДата();
		НовыйОбъект.UserName1C = Строка(ПараметрыСеанса.ТекущийПользователь);
		НовыйОбъект.Записать();
	КонецЦикла;
	
	Пока ВыборкаМашинИМеханизмов.Следующий() Цикл
		//Сообщить("Есть машины");
		НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Actuals.СоздатьОбъект();
		НовыйОбъект.ActualDate = ВыборкаМашинИМеханизмов.ПериодДень;
		НовыйОбъект.ActualQty = ВыборкаМашинИМеханизмов.КоличествоРесурсаОборот;
		НовыйОбъект.IS_PHV = 0;
		НовыйОбъект.project_guid_1c = ПроектGUID;
		НовыйОбъект.task_guid_1c = ВыборкаМашинИМеханизмов.КлючСтроки;
		НовыйОбъект.Actual_GUID_1C = Строка(ВыборкаМашинИМеханизмов.Регистратор.УникальныйИдентификатор());
		НовыйОбъект.rsrc_guid_1c = Строка(ВыборкаМашинИМеханизмов.Ресурс.УникальныйИдентификатор());
		НовыйОбъект.RSRC_TYPE = "RT_Equip";
		НовыйОбъект.ExportDate = ТекущаяДата();
		НовыйОбъект.UserName1C = Строка(ПараметрыСеанса.ТекущийПользователь);
		НовыйОбъект.Записать();
	КонецЦикла;
	
	Пока ВыборкаМатериалов.Следующий() Цикл
		//Сообщить("Есть материалы");
		НовыйОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_Incoming_Actuals.СоздатьОбъект();
		НовыйОбъект.ActualDate = ВыборкаМатериалов.ПериодДень;
		НовыйОбъект.ActualQty = ВыборкаМатериалов.КоличествоРесурсаОборот;
		НовыйОбъект.IS_PHV = 0;
		НовыйОбъект.project_guid_1c = ПроектGUID;
		НовыйОбъект.task_guid_1c = ВыборкаМатериалов.КлючСтроки;
		НовыйОбъект.Actual_GUID_1C = Строка(ВыборкаМатериалов.Регистратор.УникальныйИдентификатор());
		НовыйОбъект.rsrc_guid_1c = Строка(ВыборкаМатериалов.Ресурс.УникальныйИдентификатор());
		НовыйОбъект.RSRC_TYPE = "RT_Mat";
		НовыйОбъект.ExportDate = ТекущаяДата();
		НовыйОбъект.UserName1C = Строка(ПараметрыСеанса.ТекущийПользователь);
		НовыйОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ЭкспортКлассификаторов

Процедура ВыгрузитьРесурсы() Экспорт
	
	ТипРесурса = Новый Соответствие;
	ТипРесурса.Вставить(Перечисления.ИНАГРО_ТипыРесурсов.Материальные, "RT_Mat");
	ТипРесурса.Вставить(Перечисления.ИНАГРО_ТипыРесурсов.МашиныИМеханизмы, "RT_Equip");
	ТипРесурса.Вставить(Перечисления.ИНАГРО_ТипыРесурсов.ТрудовыеРесурсы, "RT_Labor");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СМ_Ресурсы.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.СМ_Ресурсы КАК СМ_Ресурсы
	|ГДЕ
	|	СМ_Ресурсы.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СМ_Ресурсы.КаталогBIGroup))
	|	И НЕ СМ_Ресурсы.ЭтоГруппа
	|	И НЕ СМ_Ресурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СМ_Ресурсы.Ссылка,
	|	СМ_Ресурсы.Родитель,
	|	СМ_Ресурсы.Наименование,
	|	СМ_Ресурсы.ИНАГРО_ТипРесурсов,
	|	СМ_Ресурсы.ЕдиницаИзмерения,
	|	СМ_Ресурсы.ДлинноеНаименование,
	|	СМ_Ресурсы.Код
	|ИЗ
	|	Справочник.СМ_Ресурсы КАК СМ_Ресурсы
	|ГДЕ
	|	СМ_Ресурсы.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СМ_Ресурсы.КаталогBIGroup))
	|	И НЕ СМ_Ресурсы.ЭтоГруппа
	|	И НЕ СМ_Ресурсы.ПометкаУдаления";
	
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	Выборка.Следующий();
	КоличествоЗаписей = Выборка.КоличествоЗаписей;
	ТекущаяЗапись = 0;
	ТекущийПроцент = 0;
	
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущаяЗапись = ТекущаяЗапись + 1;
		Процент = Окр(ТекущаяЗапись/КоличествоЗаписей,2)*100;
		Если Процент <> ТекущийПроцент Тогда
			ТекущийПроцент = Процент;
			ДлительныеОперации.СообщитьПрогресс(Процент, "Выгрузка классификатора ресурсов");
		КонецЕсли;
		
		ГУИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		РесурсСсылка = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_RSRC_CORP_CATALOG.НайтиПоПолю("RSRC_GUID_1C", ГУИД);
		Если РесурсСсылка.Пустая() Тогда
			РесурсОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_RSRC_CORP_CATALOG.СоздатьОбъект();
			РесурсОбъект.RSRC_GUID_1C = ГУИД;
		Иначе
			РесурсОбъект = РесурсСсылка.ПолучитьОбъект();
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			РесурсОбъект.PARENT_RSRC_GUID_1C = Строка(Выборка.Родитель.УникальныйИдентификатор());
		Иначе	
			РесурсОбъект.PARENT_RSRC_GUID_1C = "";
		КонецЕсли;
		РесурсОбъект.RSNB_CODE = Выборка.Код;
		РесурсОбъект.RSRC_NAME = Выборка.ДлинноеНаименование;
		РесурсОбъект.RSRC_SHORT_NAME = Выборка.Наименование;
		
		Единица = Неопределено;
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора) Тогда
			Единица = Выборка.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора;
		Иначе
			Единица = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		РесурсОбъект.RSRC_TYPE = ТипРесурса.Получить(Выборка.ИНАГРО_ТипРесурсов);
		РесурсОбъект.UOM_GUID_1C = Строка(Единица.УникальныйИдентификатор());
		
		РесурсОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьРаботы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СМ_НормативныеСборники.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.СМ_НормативныеСборники КАК СМ_НормативныеСборники
	|ГДЕ
	|	НЕ СМ_НормативныеСборники.ЭтоГруппа
	|	И НЕ СМ_НормативныеСборники.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СМ_НормативныеСборники.Ссылка,
	|	СМ_НормативныеСборники.Родитель,
	|	СМ_НормативныеСборники.Наименование,
	|	СМ_НормативныеСборники.ЕдиницаИзмерения,
	|	СМ_НормативныеСборники.ДлинноеНаименование,
	|	СМ_НормативныеСборники.КодНормативнойРасценки
	|ИЗ
	|	Справочник.СМ_НормативныеСборники КАК СМ_НормативныеСборники
	|ГДЕ
	|	НЕ СМ_НормативныеСборники.ЭтоГруппа
	|	И НЕ СМ_НормативныеСборники.ПометкаУдаления";
	
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	Выборка.Следующий();
	КоличествоЗаписей = Выборка.КоличествоЗаписей;
	ТекущаяЗапись = 0;
	ТекущийПроцент = 0;
	
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущаяЗапись = ТекущаяЗапись + 1;
		Процент = Окр(ТекущаяЗапись/КоличествоЗаписей,2)*100;
		Если Процент <> ТекущийПроцент Тогда
			ТекущийПроцент = Процент;
			ДлительныеОперации.СообщитьПрогресс(Процент, "Выгрузка классификатора видов работ");
		КонецЕсли;
		
		ГУИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		РаботаСсылка = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_ACTIVITIES_CORP_CATALOG.НайтиПоПолю("ACT_GUID_1C", ГУИД);
		Если РаботаСсылка.Пустая() Тогда
			РаботаОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_ACTIVITIES_CORP_CATALOG.СоздатьОбъект();
			РаботаОбъект.ACT_GUID_1C = ГУИД;
		Иначе
			РаботаОбъект = РаботаСсылка.ПолучитьОбъект();
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Ссылка.Родитель) Тогда
			РаботаОбъект.PARENT_ACT_GUID_1C = Строка(Выборка.Родитель.УникальныйИдентификатор());
		Иначе	
			РаботаОбъект.PARENT_ACT_GUID_1C = "";
		КонецЕсли;
		РаботаОбъект.ACT_NAME = Выборка.ДлинноеНаименование;
		РаботаОбъект.ACT_SHORT_NAME = Выборка.Наименование;
		
		Единица = Неопределено;
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора) Тогда
			Единица = Выборка.ЕдиницаИзмерения.ИНАГРО_ЕдиницаКлассификатора;
		Иначе
			Единица = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		Если ЗначениеЗаполнено(Единица) Тогда
			РаботаОбъект.UOM_GUID_1C = Строка(Единица.УникальныйИдентификатор());
		Иначе
			РаботаОбъект.UOM_GUID_1C = "";
		КонецЕсли;
		РаботаОбъект.RSNB_CODE = Выборка.КодНормативнойРасценки;
		
		РаботаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьЕдиницы() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиЕдиницыИзмерения.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.Наименование,
	|	УпаковкиЕдиницыИзмерения.Код,
	|	УпаковкиЕдиницыИзмерения.НаименованиеПолное
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	Выборка.Следующий();
	КоличествоЗаписей = Выборка.КоличествоЗаписей;
	ТекущаяЗапись = 0;
	ТекущийПроцент = 0;
	
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущаяЗапись = ТекущаяЗапись + 1;
		Процент = Окр(ТекущаяЗапись/КоличествоЗаписей,2)*100;
		Если Процент <> ТекущийПроцент Тогда
			ТекущийПроцент = Процент;
			ДлительныеОперации.СообщитьПрогресс(Процент, "Выгрузка классификатора единиц измерения");
		КонецЕсли;
		ГУИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		ЕдиницаСсылка = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_UOM_CORP_CATALOG.НайтиПоПолю("UOM_GUID_1C", ГУИД);
		Если ЕдиницаСсылка.Пустая() Тогда
			ЕдиницаОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo__C_UOM_CORP_CATALOG.СоздатьОбъект();
			ЕдиницаОбъект.UOM_GUID_1C = ГУИД;
		Иначе
			ЕдиницаОбъект = ЕдиницаСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЕдиницаОбъект.UOM_ABBR = Выборка.Наименование;
		ЕдиницаОбъект.UOM_NAME = Выборка.НаименованиеПолное;
		
		ЕдиницаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВыгрузитьПроекты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Проекты.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	Проекты.Наименование,
	|	Проекты.Код,
	|	Проекты.ИНАГРО_ПолноеНаименование
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления";
	
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	Выборка.Следующий();
	КоличествоЗаписей = Выборка.КоличествоЗаписей;
	ТекущаяЗапись = 0;
	ТекущийПроцент = 0;
	
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущаяЗапись = ТекущаяЗапись + 1;
		Процент = Окр(ТекущаяЗапись/КоличествоЗаписей,2)*100;
		Если Процент <> ТекущийПроцент Тогда
			ТекущийПроцент = Процент;
			ДлительныеОперации.СообщитьПрогресс(Процент, "Выгрузка классификатора проектов");
		КонецЕсли;
		ГУИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		ПроектСсылка = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_ERP_1C_PROJECTS.НайтиПоПолю("ProjectGUID", ГУИД);
		Если ПроектСсылка.Пустая() Тогда
			ПроектОбъект = ВнешниеИсточникиДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблицы.dbo_ERP_1C_PROJECTS.СоздатьОбъект();
			ПроектОбъект.ProjectGUID = ГУИД;
		Иначе
			ПроектОбъект = ПроектСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ПроектОбъект.ProjectName = Выборка.Наименование;
		ПроектОбъект.ProjectShortName = Выборка.Наименование;
		
		ПроектОбъект.Записать();
	КонецЦикла;
	
	
КонецПроцедуры	

# КонецОбласти

#Область ОтключенныйФункционал

Процедура ЗагрузитьДанныеПоПериодамВУГПР(ТаблицаФормы) Экспорт
	
	// пока отключу
	Возврат;
	
	Объект = ЭтотОбъект;
	ПроектGUID = Строка(Объект.Проект.УникальныйИдентификатор());
	
	Запрос = Новый Запрос;
	
	// Запрос к внешнему источнику данных для выборки всех данных
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo_Outgoing_TASKS.Project_Guid_1C КАК ПроектGUID,
	|	dbo_Outgoing_TASKS.Start КАК НачалоПериода,
	|	dbo_Outgoing_TASKS.Finish КАК КонецПериода,
	|	dbo_Outgoing_TASKS.Task_Guid_1C КАК КлючСтроки,
	|	dbo_Outgoing_TASKS.Ссылка
	|ИЗ
	|	ВнешнийИсточникДанных.ИНАГРО_ИнтеграционнаяБазаДанных.Таблица.dbo_Outgoing_TASKS КАК dbo_Outgoing_TASKS
	|ГДЕ
	|	dbo_Outgoing_TASKS.Project_Guid_1C = &ПроектGUID
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектGUID,
	|	КлючСтроки";
	
	Запрос.УстановитьПараметр("ПроектGUID", ПроектGUID);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИсточник = РезультатЗапроса.Выбрать();
	
	ВыборкаИсточник = Запрос.Выполнить().Выбрать();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_УГПРРаботы.КлючСтроки,
	|	ИНАГРО_УГПРРаботы.ВидРаботы,
	|	ИНАГРО_УГПРРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИНАГРО_УГПР.Работы КАК ИНАГРО_УГПРРаботы
	|ГДЕ
	|	ИНАГРО_УГПРРаботы.Ссылка В(&Ссылка)
	|	И ИНАГРО_УГПРРаботы.Ссылка.Проект = &Проект
	|	И ИНАГРО_УГПРРаботы.Ссылка.Версия = &Версия
	|	И ИНАГРО_УГПРРаботы.ВидРаботы ССЫЛКА Справочник.ИНАГРО_ВидыРаботПроект
	|ИТОГИ ПО
	|	Ссылка";
	
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументУГПР);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("Версия", Объект.Версия);
	
	
	ТаблицаСтрокДляУдаления = Новый ТаблицаЗначений();
	ТаблицаСтрокДляУдаления.Колонки.Добавить("СтрокаСсылка");
	
	ВыборкаУГПР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУГПР.Следующий() Цикл
		
		Если ТаблицаФормы = Неопределено Тогда
			УГПРОбъект = ВыборкаУГПР.Ссылка.ПолучитьОбъект();
			ТаблицаФормы = УГПРОбъект.РаботыПериод;
		Иначе
			УГПРОбъект = Неопределено;
		КонецЕсли;
		
		ТаблицаФормы.Очистить();
		
		ВыборкаРабот = ВыборкаУГПР.Выбрать();
		Пока ВыборкаРабот.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("КлючСтроки", ВыборкаРабот.КлючСтроки);
			
			ВыборкаИсточник.Сбросить();
			Пока ВыборкаИсточник.НайтиСледующий(СтруктураПоиска) Цикл
				НоваяСтрока = ТаблицаФормы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРабот);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИсточник);
			КонецЦикла;
		КонецЦикла;
		Если УГПРОбъект <> Неопределено Тогда
			УГПРОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//Результат = Запрос.Выполнить();
	//
	//ТаблицаПроектовИВерсий = Новый ТаблицаЗначений;
	//ТаблицаПроектовИВерсий.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	//ТаблицаПроектовИВерсий.Колонки.Добавить("Версия", Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_Версия"));
	//ТаблицаПроектовИВерсий.Колонки.Добавить("ПроектGUID", Новый ОписаниеТипов("Строка"));
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	НоваяСтрока = ТаблицаПроектовИВерсий.Добавить();
	//	НоваяСтрока.ПроектGUID = Выборка.Project_GUID_1C;
	//	НоваяСтрока.Проект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Project_GUID_1C));
	//	НоваяСтрока.Версия = Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(НоваяСтрока.Проект);
	//	
	//КонецЦикла;	
	
	
КонецПроцедуры	

# КонецОбласти
