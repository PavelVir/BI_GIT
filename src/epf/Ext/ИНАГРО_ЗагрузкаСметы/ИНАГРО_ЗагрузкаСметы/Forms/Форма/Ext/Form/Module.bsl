
&НаСервереБезКонтекста
Функция ОпределитьЭлементУГПР(Позиция)
	
	Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
		
		Если Позиция.Определитель.ВидРасценки = Перечисления.СМ_ВидыРасценки.Материал Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СМ_Ресурсы.Ссылка
			|ИЗ
			|	Справочник.СМ_Ресурсы КАК СМ_Ресурсы
			|ГДЕ
			|	СМ_Ресурсы.Код = &ШифрРасценки";
			
			Запрос.УстановитьПараметр("ШифрРасценки", Позиция.ШифрРасценки);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат  ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРабота(Позиция)
	
	Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
		
		Определитель = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(Позиция, "Определитель");
		ВидРасценки =  ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(Определитель, "ВидРасценки");
		
		Если ВидРасценки = Перечисления.СМ_ВидыРасценки.Работа Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМатериал(Позиция)
	
	Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
		
		Если Позиция.Определитель.ВидРасценки = Перечисления.СМ_ВидыРасценки.Материал Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстВидимость()
	
	Элементы.Смета.Доступность = не Объект.Проект.Пустая();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	ТекСтрока = Элементы.РаботыДЗ2.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		КлючСтроки = ТекСтрока.КлючСтроки;
		ЭтоРабота =  ТекСтрока.ЭтоРабота;
		
		ЭтаФорма.Элементы.ТаблицаСоответствий.ТолькоПросмотр = не ЭтоРабота;

		Если КлючСтроки = "" или КлючСтроки = Неопределено Тогда
			
			ЭтаФорма.Элементы.ТаблицаСоответствий.ОтборСтрок = Неопределено;
			
		иначе
			
			ЭтаФорма.Элементы.ТаблицаСоответствий.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЛокальнойСмете(ОбъектСмета)
	
	ОбъектАкт=Неопределено;
	
	ЭлементКорня = СМ_СметаВызовСервера.ПолучитьСсылкуНаДокумент(ОбъектСмета);

	Текст = СМ_СметныйСоставВызовСервера.ПолучитьТекстЗапросаНаДеревоСмет(ОбъектАкт);

	Текст = СтрЗаменить(Текст,"[ДопРеквизитСмета]","");
	Текст = СтрЗаменить(Текст,"[ДопРеквизитРаздел]","");
	Текст = СтрЗаменить(Текст,"[ДопРеквизитПозиция]","");
	Текст = СтрЗаменить(Текст,"[ДопУсловиеРаздел]","");
	Текст = СтрЗаменить(Текст,"[ДопУсловиеПозиция]","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка",ЭлементКорня);
	Запрос.УстановитьПараметр("ИтогРаздела",Справочники.СМ_ИтогиПоРазделу.ИтогоПоРазделу);
	
	ИтогПоСмете = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователяСмета","ИтогСметыДляДерева");
	Если Не ИтогПоСмете = Неопределено
		И ИтогПоСмете.Пустая() Тогда
		ИтогПоСмете = Справочники.СМ_ИтогиПоГлавам.НайтиПоРеквизиту("Идентификатор","ИП4");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИтогСметы",ИтогПоСмете);
	Запрос.УстановитьПараметр("ВидРасценкиОборудование", Перечисления.СМ_ВидыРасценки.Оборудование);
	Запрос.УстановитьПараметр("ВидРасценкиМатериал", Перечисления.СМ_ВидыРасценки.Материал);
	Запрос.УстановитьПараметр("ЭтоАкт", ОбъектАкт <> Неопределено);
	Запрос.УстановитьПараметр("АктВыполненныхРабот", СМ_СметаВызовСервера.ПолучитьСсылкуНаДокумент(ОбъектАкт));
	
	ТабДерева = Запрос.Выполнить().Выгрузить();
	/////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////
	
	ТабДерева.Сортировать("НомерВПределахСметы");
	
	Для каждого СтрокаТЗ  Из ТабДерева Цикл
		
		Если СтрокаТЗ.Расчет Тогда
			
			Позиция =  СтрокаТЗ.Ссылка;
			Родитель = СтрокаТЗ.ИДРодителя;

			НС = Объект.ПозицииСметы.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЗ);
			
			Если Родитель <> Неопределено и Позиция <> Объект.Смета Тогда
				НС.КлючСвязи = Родитель.УникальныйИдентификатор();
			иначе
				НС.КлючСвязи = 	"00000000-0000-0000-0000-000000000000";
			КонецЕсли;
			
			НС.КлючСтроки = Позиция.УникальныйИдентификатор();

			Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
				НС.ВидРасценки = Позиция.Определитель.ВидРасценки;
				НС.ЕдиницаИзмерения = Позиция.ЕдиницаИзмерения;
				НС.ШифрРасценки = Позиция.ШифрРасценки;
			КонецЕсли;
			
			//НС.ЭлементУГПР  = ОпределитьЭлементУГПР(Позиция);
			
			НС.ЭтоРабота = ЭтоРабота(Позиция);
			НС.ЭтоМатериал = ЭтоМатериал(Позиция);
			
		КонецЕсли; //Если СтрокаТЗ.Расчет
		
	КонецЦикла;
	
	//Объект.ПозицииСметы.Сортировать("ВидРасценки Убыв");

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоСметеНаСервере()
	
	Объект.ПозицииСметы.Очистить();
	Объект.СтруктураУГПР.Очистить();
	Объект.ТаблицаСоответствий.Очистить();
	ЛимитированныеЗатраты.Очистить();

	/////////////////////////////////////////////////////////////////////
	// использовано методику из :
	/////СМ_СметныйСоставВызовСервера.ВывестиОбновитьДерево(Объект.Смета, ДеревоЗначений,,Истина);
	/////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////

	Если Тип("ДокументСсылка.СМ_ЛокальнаяСмета") = ТипЗнч(Объект.Смета) Тогда
		
		ЗаполнитьПоЛокальнойСмете(Объект.Смета);
		
	ИначеЕсли   Тип("ДокументСсылка.СМ_ОбъектнаяСмета") = ТипЗнч(Объект.Смета)  Тогда
		
		НС = Объект.ПозицииСметы.Добавить();
		НС.КлючСвязи = 	"00000000-0000-0000-0000-000000000000";
		НС.КлючСтроки = Объект.Смета.УникальныйИдентификатор();
		НС.Ссылка = Объект.Смета;
		НС.НаименованиеЭлемента = Объект.Смета.Наименование;
		НС.ЭтоРабота = Ложь;
		НС.ЭтоМатериал = Ложь;

		ТЧЛокальныеСметы = Объект.Смета.ЛокальныеСметы;
		
		Для каждого СтрОбъектСмета Из ТЧЛокальныеСметы Цикл
			
			Если СтрОбъектСмета.Расчет Тогда
				ЗаполнитьПоЛокальнойСмете(СтрОбъектСмета.ЛокальнаяСмета);
			КонецЕсли; //Если СтрОбъектСмета.Расчет Тогда
			
		КонецЦикла;//Для каждого СтрОбъектСмета Из ТЧЛокальныеСметы Цикл

	ИначеЕсли   Тип("ДокументСсылка.СМ_СводнаяСмета") = ТипЗнч(Объект.Смета)  Тогда
		
		НС = Объект.ПозицииСметы.Добавить();
		НС.КлючСвязи = 	"00000000-0000-0000-0000-000000000000";
		НС.КлючСтроки = Объект.Смета.УникальныйИдентификатор();
		НС.Ссылка = Объект.Смета;
		НС.НаименованиеЭлемента = Объект.Смета.Наименование;
		НС.ЭтоРабота = Ложь;
		НС.ЭтоМатериал = Ложь;

		ТЧСметы = Объект.Смета.Сметы;
		
		Для каждого СтрОбъектСмета Из ТЧСметы Цикл
			
			Если СтрОбъектСмета.Расчет Тогда
				
				ОбъектСмета = СтрОбъектСмета.Смета;
				
				Если Тип("ДокументСсылка.СМ_ЛокальнаяСмета") = ТипЗнч(ОбъектСмета) Тогда
					
					ЗаполнитьПоЛокальнойСмете(ОбъектСмета);
					
				ИначеЕсли   Тип("ДокументСсылка.СМ_ОбъектнаяСмета") = ТипЗнч(ОбъектСмета)  Тогда
					
					НС = Объект.ПозицииСметы.Добавить();
					НС.КлючСвязи = 	 Объект.Смета.УникальныйИдентификатор(); // сводная смета
					НС.КлючСтроки = ОбъектСмета.УникальныйИдентификатор(); // объектная
					НС.Ссылка = ОбъектСмета;
					НС.НаименованиеЭлемента = ОбъектСмета.Наименование;
					НС.ЭтоРабота = Ложь;
					НС.ЭтоМатериал = Ложь;
					
					ТЧЛокальныеСметы = ОбъектСмета.ЛокальныеСметы;
					
					Для каждого СтрОбъектСмета2 Из ТЧЛокальныеСметы Цикл
						
						Если СтрОбъектСмета2.Расчет Тогда
							ЗаполнитьПоЛокальнойСмете(СтрОбъектСмета2.ЛокальнаяСмета);
						КонецЕсли;
						
					КонецЦикла; //Для каждого СтрОбъектСмета2 Из ТЧЛокальныеСметы Цикл
					
				КонецЕсли; //Если  ТипЗнч(ОбъектСмета)
				
			КонецЕсли;//Если СтрОбъектСмета.Расчет Тогда
			
		КонецЦикла; //Для каждого СтрОбъектСмета Из ТЧСметы Цикл

	иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

	ПозицииСметы_в_ДЗ();
	
	ВыбратьЛЗ();

	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ВыбратьЛЗ()
	
	// Лим Затраты
	МассивЛокСмет = новый Массив;
	МассивОбСмет = новый Массив;
	
	Для каждого текСтр Из Объект.ПозицииСметы Цикл
		
		Если ТипЗнч(текСтр.Ссылка)=Тип("ДокументСсылка.СМ_ЛокальнаяСмета")  Тогда // по локальным сметам
			МассивЛокСмет.Добавить(текСтр.Ссылка);
		КонецЕсли;
  		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМ_ИтогиПоГлавам.Смета,
	|	СМ_ИтогиПоГлавам.Итог КАК ЛЗ,
	|	СУММА(СМ_ИтогиПоГлавам.ПрямЗатраты) КАК СуммаБазис,
	|	СУММА(СМ_ИтогиПоГлавам.ТекПрямЗатраты) КАК СуммаТек,
	|	СМ_ИтогиПоГлавам.Итог.Наименование КАК ЛЗНаименование
	|ИЗ
	|	РегистрСведений.СМ_ИтогиПоГлавам КАК СМ_ИтогиПоГлавам
	|ГДЕ
	|	СМ_ИтогиПоГлавам.Итог ССЫЛКА Справочник.СМ_ЛимитированныеЗатраты
	|	И СМ_ИтогиПоГлавам.Смета ССЫЛКА Документ.СМ_ЛокальнаяСмета
	|	И СМ_ИтогиПоГлавам.Смета В(&МассивЛокСмет)
	|
	|СГРУППИРОВАТЬ ПО
	|	СМ_ИтогиПоГлавам.Смета,
	|	СМ_ИтогиПоГлавам.Итог";
	
	Запрос.УстановитьПараметр("МассивЛокСмет", МассивЛокСмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = ЛимитированныеЗатраты.Добавить();
 		ЗаполнитьЗначенияСвойств(нс, Выборка);
		
		Если  СтрНайти(Выборка.ЛЗНаименование, "НДС") <> 0 Тогда
			НС.Вид = 1;
		КонецЕсли;
		
		Если  СтрНайти(Выборка.ЛЗНаименование, "прибыль") <> 0 Тогда
			НС.Вид = 2;
		КонецЕсли;
		
		Если  СтрНайти(Выборка.ЛЗНаименование, "расходы") <> 0 Тогда
			НС.Вид = 3;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПозицииСметы_в_ДЗКлиент()

	ТекКлючСтроки="";
	ТекСтр = Элементы.РаботыДЗ.ТекущаяСтрока;
	
	Если ТекСтр <> Неопределено Тогда
		
		СтрокаДЗ = РаботыДЗ.НайтиПоИдентификатору(ТекСтр);
		
		Если СтрокаДЗ <> Неопределено Тогда
			
			ТекКлючСтроки =  СтрокаДЗ.КлючСтроки;
			
		КонецЕсли;
		
	КонецЕсли;

	ПозицииСметы_в_ДЗ();

	Для Каждого Строка ИЗ РаботыДЗ.ПолучитьЭлементы() Цикл
		Элементы.РаботыДЗ.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

	НайденнаяСтрока = ПолучитьВеткуПоКлючуСтроки(РаботыДЗ, ТекКлючСтроки);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.РаботыДЗ.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПозицииСметы_в_ДЗ()
	
	тДерево = РеквизитФормыВЗначение("РаботыДЗ");
	
	тДерево.Строки.Очистить();
	
	//
	//Если  Тип("ДокументСсылка.СМ_СводнаяСмета") = ТипЗнч(Объект.Смета) или 
	//	Объект.Смета.ИДРодителя = Неопределено 
	//	или Объект.Смета.ИДРодителя.Пустая() Тогда
		
	КореньДерева = "00000000-0000-0000-0000-000000000000";
	
	//	
	//ИначеЕсли  Тип("ДокументСсылка.СМ_ОбъектнаяСмета") = ТипЗнч(Объект.Смета) тогда 
	//	
	//	КореньДерева = "00000000-0000-0000-0000-000000000000";
	//	//КореньДерева = Строка(Объект.Смета.УникальныйИдентификатор());
	//	
	//иначе
	//	
	//	КореньДерева = Строка(Объект.Смета.ИДРодителя.УникальныйИдентификатор());
	//	
	//КонецЕсли;

	ПреобразоватьВДЗРекурсия(тДерево, Объект.ПозицииСметы, КореньДерева);
	
	ЗначениеВРеквизитФормы(тДерево, "РаботыДЗ");

КонецПроцедуры

&НаСервере
Процедура СтруктураУГПР_в_ДЗСервер()
	
	тДерево = РеквизитФормыВЗначение("РаботыДЗ2");
	тДерево.Строки.Очистить();
	
	ПреобразоватьВДЗРекурсия(тДерево, Объект.СтруктураУГПР,  "00000000-0000-0000-0000-000000000000");
	
	ЗначениеВРеквизитФормы(тДерево, "РаботыДЗ2");

КонецПроцедуры

&НаКлиенте
Процедура СтруктураУГПР_в_ДЗ()

	ТекКлючСтроки="";
	ТекСтр = Элементы.РаботыДЗ2.ТекущаяСтрока;
	
	Если ТекСтр <> Неопределено Тогда
		
		СтрокаДЗ = РаботыДЗ2.НайтиПоИдентификатору(ТекСтр);
		
		Если СтрокаДЗ <> Неопределено Тогда
			
			ТекКлючСтроки =  СтрокаДЗ.КлючСтроки;
			
		КонецЕсли;
		
	КонецЕсли;

	СтруктураУГПР_в_ДЗСервер();

	Для Каждого Строка ИЗ РаботыДЗ2.ПолучитьЭлементы() Цикл
		Элементы.РаботыДЗ2.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

	НайденнаяСтрока = ПолучитьВеткуПоКлючуСтроки(РаботыДЗ2, ТекКлючСтроки);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.РаботыДЗ2.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		НС = Таблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НС, СтрокаДерева);
		
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений()

&НаСервере
Процедура РаботыДЗ2_В_СтруктураУГПР_Сервер()
	тДерево = РеквизитФормыВЗначение("РаботыДЗ2");
	Объект.СтруктураУГПР.Очистить();
	ВыгрузитьДеревоЗначенийВТаблицуЗначений(тДерево, Объект.СтруктураУГПР);
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	
	Если Объект.Смета.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РаботыДЗ2.ПолучитьЭлементы().Очистить();
	
	Состояние("Чтения данных сметы ... ");
	
	СметаПриИзменении("");
	
	ПроверитьНаличиеСтруктуры();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВДЗРекурсия(тДерево, тТаблица, ГУИД)
	
	тПоиск = Новый Структура("КлючСвязи", ГУИД);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	
	Для Каждого тСтр Из тМассив Цикл

		новСтр = тДерево.Строки.Добавить();
		
		новСтр.Картинка = ?(тСтр.ЭтоРабота, 5, 0);
		новСтр.Картинка = ?(тСтр.ЭтоМатериал, 3, новСтр.Картинка);
		
		ЗаполнитьЗначенияСвойств(новСтр, тСтр);
		
		ПреобразоватьВДЗРекурсия(новСтр, тТаблица, тСтр.КлючСтроки);

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьРекурсия(РаботыДЗ.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРекурсия(тЭлементы, Дерево= "РаботыДЗ")
	Для Каждого тСтр Из тЭлементы Цикл
		тСтрЭлементы = тСтр.ПолучитьЭлементы();
		СвернутьРекурсия(тСтрЭлементы, Дерево);
		Элементы[Дерево].Свернуть(тСтр.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	тЭлементы = РаботыДЗ.ПолучитьЭлементы();
	
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы.РаботыДЗ.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗWBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//СМ_Материал = ПредопределенноеЗначение("Перечисление.СМ_ВидыРасценки.Материал");
	//СМ_Оборудование = ПредопределенноеЗначение("Перечисление.СМ_ВидыРасценки.Оборудование");
	//СМ_Работа = ПредопределенноеЗначение("Перечисление.СМ_ВидыРасценки.Работа");
	//СМ_ПозицияЛокальнойСметы = Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы");
	//СМ_РазделЛокальнойСметы =  Тип("ДокументСсылка.СМ_РазделЛокальнойСметы");
	//
	//ТекущиеДанные = Элементы.РаботыДЗ.ТекущиеДанные;
	//
	//МассивТипов = Новый Массив;
	
	//Если ТипЗнч(ТекущиеДанные.Ссылка) = СМ_РазделЛокальнойСметы Тогда
	//	
	//	МассивТипов.Добавить(Тип("СправочникСсылка.ИНАГРО_Конструктивы"));
	//	МассивТипов.Добавить(Тип("СправочникСсылка.ИНАГРО_ПодКонструктив"));
	//	МассивТипов.Добавить(Тип("СправочникСсылка.ИНАГРО_СтроительныеОбъекты"));
	// 	
	//
	//ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = СМ_ПозицияЛокальнойСметы
	//	и  (ТекущиеДанные.ВидРасценки = СМ_Материал или ТекущиеДанные.ВидРасценки = СМ_Оборудование) Тогда
	//	
	//	МассивТипов.Добавить(Тип("СправочникСсылка.СМ_Ресурсы"));
	//	
	//	
	//ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = СМ_ПозицияЛокальнойСметы
	//	и  (ТекущиеДанные.ВидРасценки =СМ_Работа) Тогда
	//	
	//	МассивТипов.Добавить(Тип("СправочникСсылка.ИНАГРО_ВидыРабот"));
	//  	
	//КонецЕсли;
	
	//
	//
	//
	//Элементы.РаботыДЗWBS.ОграничениеТипа  = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)
	
	Пока НЕ НовыйРодитель = Неопределено Цикл
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НовыйРодитель.ЭтоРабота Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)
	
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	
	// Источник может быть уже перенесен
	// Это происходит если выделены несколько элементов
	// одной и той же ветви дерева на разных уровнях иерархии
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		// Добавляем в корень
		НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

	Если Приемник <> Неопределено Тогда
		НоваяСтрока.КлючСвязи = Приемник.КлючСтроки;
	иначе
		НоваяСтрока.КлючСвязи = "00000000-0000-0000-0000-000000000000";
	КонецЕсли; //Если Родитель <> Неопределено

	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
		[КолПодчиненныхСтрок - ОбратныйИндекс];
		СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	
	Если Источник.ПолучитьРодителя() = Неопределено Тогда
		РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
	Иначе
		Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементУГПР(Команда)
	
	ТекущиеДанные = Элементы.РаботыДЗ.ТекущиеДанные;
	
	ВыделенныеСтроки =  Элементы.РаботыДЗ.ВыделенныеСтроки;
	
	ВыделенныеСтрокиКоличество = ВыделенныеСтроки.Количество();
	
	Если ВыделенныеСтрокиКоличество > 1 Тогда
		//
		//Для каждого ТекСтрока Из  ВыделенныеСтроки Цикл
		//	ДобавитьЭлементУГПРПоСтроке(РаботыДЗ.НайтиПоИдентификатору(ТекСтрока));	
		//КонецЦикла;
		
		// создаем в обратном порядке чтобы первыми стали открытые окна форм, которые должны создаваться первыми
		Для ОбратныйИндекс = 1 По ВыделенныеСтрокиКоличество Цикл
			ТекСтрока = ВыделенныеСтроки.Получить(ВыделенныеСтрокиКоличество - ОбратныйИндекс);
			ДобавитьЭлементУГПРПоСтроке(РаботыДЗ.НайтиПоИдентификатору(ТекСтрока));
		КонецЦикла; //Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		
		ПодключитьОбработчикОжидания("СкрытьСтрокиДЗ", 2, истина);
		
	иначе
		
		ДобавитьЭлементУГПРПоСтроке(ТекущиеДанные);
		
		СкрытьСтрокиДЗ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементУГПРПоСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Отобрано Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоРабота Тогда
		// 1
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЭлемента);
		ПараметрыФормы.Вставить("Владелец", Объект.Проект);
		ПараметрыФормы.Вставить("ШифрПозицииНорматива", ТекущиеДанные.ШифрРасценки);
		ПараметрыФормы.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);

		ЭлементWBS = НайтиРаботу(ПараметрыФормы, не УказыватьКлассификаторы);
		
		Если ЭлементWBS.Пустая() Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьВидРаботы_Оповещение", ЭтаФорма, ТекущиеДанные.ПолучитьИдентификатор());
			ОткрытьФорму("Справочник.ИНАГРО_ВидыРаботПроект.Форма.ФормаЭлемента", ПараметрыФормы , ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		иначе
			ОбработатьВидРаботы_Оповещение(ЭлементWBS, ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;

	иначеЕсли ТекущиеДанные.ЭтоМатериал Тогда  
		//2
		
		ДобавитьВТекущуюПозицию_Оповещение(ТекущиеДанные.ПолучитьИдентификатор());

	иначе  
		// 3

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЭлемента);
		ПараметрыФормы.Вставить("Владелец", Объект.Проект);
		ПараметрыФормы.Вставить("УровеньСметы", ОпределитьУровеньСметы(ТекущиеДанные.Ссылка));
		
		ЭлементWBS = НайтиКонструктив(ПараметрыФормы, не УказыватьКлассификаторы);
		
		Если ЭлементWBS.Пустая() Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьКонструктив_Оповещение", ЭтаФорма, ТекущиеДанные.ПолучитьИдентификатор());
			ОткрытьФорму("Справочник.ИНАГРО_КонструктивыПроекта.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		иначе
			ОбработатьКонструктив_Оповещение(ЭлементWBS, ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьУровеньСметы(Позиция)
	
	Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ЛокальнаяСмета") Тогда
		
		Возврат  Перечисления.ИНАГРО_УровеньСметы.ЛокальнаяСмета;
 	
	ИначеЕсли ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ОбъектнаяСмета") Тогда
		
		Возврат  Перечисления.ИНАГРО_УровеньСметы.ОбъектнаяСмета;
		
	ИначеЕсли ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_СводнаяСмета") Тогда
		
		Возврат  Перечисления.ИНАГРО_УровеньСметы.СводнаяСмета;
		
	ИначеЕсли ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_РазделЛокальнойСметы") Тогда
		
		Возврат  Перечисления.ИНАГРО_УровеньСметы.РазделСметы;
 
 	ИначеЕсли ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
		
		Возврат  Перечисления.ИНАГРО_УровеньСметы.ПустаяСсылка();
 		
	КонецЕсли;

	Возврат Перечисления.ИНАГРО_УровеньСметы.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКонструктив(ПараметрыПоиска, СоздаватьАвто = Ложь)
	Возврат Справочники.ИНАГРО_КонструктивыПроекта.НайтиПоПараметрам(ПараметрыПоиска, СоздаватьАвто);
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРаботу(ПараметрыПоиска, СоздаватьАвто = Ложь)
	Возврат Справочники.ИНАГРО_ВидыРаботПроект.НайтиПоПараметрам(ПараметрыПоиска, СоздаватьАвто);
КонецФункции

&НаКлиенте
Процедура ОбработатьКонструктив_Оповещение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено или Результат.Пустая() Тогда
		возврат;
	КонецЕсли;

	НовСсылка = Результат;
	
	КлючСвязи = "00000000-0000-0000-0000-000000000000";
	
	ТекущиеДанные = Элементы.РаботыДЗ2.ТекущиеДанные;
	ТекущиеДанныеСмета = РаботыДЗ.НайтиПоИдентификатору(Параметры);
	
	Если ТекущиеДанныеСмета <> Неопределено Тогда
		
		Если  ТекущиеДанные  <> Неопределено Тогда 

			Родитель = РаботыДЗ2.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
			
			Если не ТекущиеДанные.ЭтоРабота Тогда
				
				КлючСвязи = ТекущиеДанные.КлючСтроки;
				
			Иначе  	
				
				Родитель = ТекущиеДанные.ПолучитьРодителя();
				
				Если Родитель <> Неопределено Тогда
					КлючСвязи = Родитель.КлючСтроки;
					Родитель =  РаботыДЗ2.НайтиПоИдентификатору(Родитель.ПолучитьИдентификатор());
				КонецЕсли; //Если Родитель <> Неопределено
				
			КонецЕсли;

		КонецЕсли;

		СтруктураОтбораРабот = Новый Структура("ПозицияЛокальнойСметы", ТекущиеДанныеСмета.Ссылка);
		ВыборкаСтрок =  Объект.ТаблицаСоответствий.НайтиСтроки(СтруктураОтбораРабот);
		
		Если ВыборкаСтрок.Количество()  Тогда
			Возврат;
		КонецЕсли;

		НС = Объект.СтруктураУГПР.Добавить();
		НС.ВидРаботы = НовСсылка;
		НС.КлючСвязи = КлючСвязи;
		НС.КлючСтроки = Новый УникальныйИдентификатор;

		//СтруктураУГПР_в_ДЗ();
		
		Если  ТекущиеДанные  <> Неопределено Тогда 
			СтрокаСтруктуры = Родитель.ПолучитьЭлементы().Добавить();
		иначе
			СтрокаСтруктуры = РаботыДЗ2.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаСтруктуры, НС);
		
		АктивизироватьСтроку(НС.КлючСтроки);
		
		НС2 = Объект.ТаблицаСоответствий.Добавить();
		ЗаполнитьЗначенияСвойств(НС2, НС);
		
		НС2.ПозицияЛокальнойСметы = ТекущиеДанныеСмета.Ссылка;
		НС2.НаименованиеЭлемента = ТекущиеДанныеСмета.НаименованиеЭлемента;
		НС2.Основная = Истина;
		НС2.КлючСтрокиСмета = ТекущиеДанныеСмета.КлючСтроки;
		ТекущиеДанныеСмета.Отобрано = истина;
		
		ПозицииСметы_Отобрано(ТекущиеДанныеСмета.КлючСтроки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииСметы_Отобрано(КлючСтроки, Отобрано)
	
	СтруктураОтбора = новый Структура;
	СтруктураОтбора.Вставить("КлючСтроки", КлючСтроки);
	МассивСтрок = Объект.ПозицииСметы.НайтиСтроки(СтруктураОтбора);
	Для каждого ТекСтр Из МассивСтрок Цикл
		ТекСтр.Отобрано = Отобрано;
	КонецЦикла;
	
	Ветка = ПолучитьВеткуПоКлючуСтроки(РаботыДЗ, КлючСтроки);
	Если Ветка <> Неопределено Тогда
		Ветка.Отобрано = Отобрано;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВидРаботы_Оповещение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено или Результат.Пустая() Тогда
		возврат;
	КонецЕсли;

	НовСсылка = Результат;
	
	КлючСвязи = "00000000-0000-0000-0000-000000000000";
	
	ТекущиеДанные = Элементы.РаботыДЗ2.ТекущиеДанные;
	ТекущиеДанныеСмета = РаботыДЗ.НайтиПоИдентификатору(Параметры);
	
	ОбъемРабот = 0;

	Если ТекущиеДанныеСмета <> Неопределено и ТекущиеДанные <> Неопределено Тогда
		
		ОбъемРабот = ТекущиеДанныеСмета.ОбъемРабот;
		
		Родитель = РаботыДЗ2.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());

		Если не  ТекущиеДанные.ЭтоРабота Тогда
			
			КлючСвязи = ТекущиеДанные.КлючСтроки;
			
		Иначе  	
			
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если Родитель <> Неопределено Тогда
				
				КлючСвязи = Родитель.КлючСтроки;
				Родитель =  РаботыДЗ2.НайтиПоИдентификатору(Родитель.ПолучитьИдентификатор());
				
			КонецЕсли; //Если Родитель <> Неопределено
			
		КонецЕсли;

		СтруктураОтбораРабот = Новый Структура("ПозицияЛокальнойСметы", ТекущиеДанныеСмета.Ссылка);
		ВыборкаСтрок =  Объект.ТаблицаСоответствий.НайтиСтроки(СтруктураОтбораРабот);
		
		Если ВыборкаСтрок.Количество()  Тогда
			Возврат;
		КонецЕсли;

		НС = Объект.СтруктураУГПР.Добавить();
		НС.ВидРаботы = НовСсылка;
		НС.КлючСвязи = КлючСвязи;
		НС.КлючСтроки = Новый УникальныйИдентификатор;
		НС.ОбъемРабот =  ОбъемРабот;
		НС.ЕдиницаИзмерения = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовСсылка, "ОсновнаяЕдиница");
		НС.ЭтоРабота = Истина;
		НС.ШифрРасценки = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовСсылка, "ШифрПозицииНорматива");
		
 		СтрокаСтруктуры = Родитель.ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.Картинка = 5;
		ЗаполнитьЗначенияСвойств(СтрокаСтруктуры, НС);

		АктивизироватьСтроку(НС.КлючСтроки);

		НС2 = Объект.ТаблицаСоответствий.Добавить();
		ЗаполнитьЗначенияСвойств(НС2, НС);
		
		НС2.ПозицияЛокальнойСметы = ТекущиеДанныеСмета.Ссылка;
		НС2.НаименованиеЭлемента = ТекущиеДанныеСмета.НаименованиеЭлемента;
		НС2.Основная = Истина;
		НС2.КлючСтрокиСмета = ТекущиеДанныеСмета.КлючСтроки;
		ТекущиеДанныеСмета.Отобрано = истина;
		
		ПозицииСметы_Отобрано(ТекущиеДанныеСмета.КлючСтроки, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтроку(ТекКлючСтроки)
	
	НайденнаяСтрока = ПолучитьВеткуПоКлючуСтроки(РаботыДЗ2, ТекКлючСтроки);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.РаботыДЗ2.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьСтрокиДЗ()

	Если СпособВыводаДерева=1 Тогда
		
		МассивКУдалению = Новый Массив;
		
 		СкрытьСтрокиДЗ_Рекурсивно(РаботыДЗ, МассивКУдалению);
		
		Для каждого Стр Из МассивКУдалению Цикл
			СкрытьСтрокуДерева(Стр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСтрокиДЗ_Рекурсивно(Дерево, МассивКУдалению)
	
	Для Каждого Ветка Из Дерево.ПолучитьЭлементы() Цикл
		
		СкрытьСтрокиДЗ_Рекурсивно(Ветка, МассивКУдалению);
		
		Если Ветка.ЭтоРабота и Ветка.Отобрано Тогда
			МассивКУдалению.добавить(Ветка.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если Ветка.ЭтоМатериал и Ветка.Отобрано Тогда
			МассивКУдалению.добавить(Ветка.ПолучитьИдентификатор());
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьСтрокуДерева(Идентификатор)
	
	ВыбраннаяСтрока = РаботыДЗ.НайтиПоИдентификатору(Идентификатор);
	
	Если ВыбраннаяСтрока.ПолучитьРодителя() = Неопределено Тогда  // корень
		
		РаботыДЗ.ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
		
	иначе
		
		ТекущийРодитель = ВыбраннаяСтрока.ПолучитьРодителя();
		
		ТекущийРодитель.ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	УстВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2ПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущееПоле = Элемент.ТекущийЭлемент;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьДоступностьРеквизитов(Элемент, ТекущиеДанные, ТекущееПоле);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов(Элемент, ТекущиеДанные, ТекущееПоле)
	
	Если ТекущееПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКонструктив = не ТекущиеДанные.ЭтоРабота;
	
	СтруктураТолькоЧтение = Новый Структура;
	СтруктураТолькоЧтение.Вставить(Элемент.Имя + "ОбъемРабот", ЭтоКонструктив);
	СтруктураТолькоЧтение.Вставить(Элемент.Имя + "ЕдиницаИзмерения", Истина);
	СтруктураТолькоЧтение.Вставить(Элемент.Имя + "ШифрРасценки", Истина);

	ТолькоЧтение = Истина;
	
	Если СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение) Тогда
		
		ТекущееПоле.ТолькоПросмотр = ТолькоЧтение;
		
	иначе // СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение)
		
		ТекущееПоле.ТолькоПросмотр = Ложь;
		
	КонецЕсли; // СтруктураТолькоЧтение.Свойство(ТекущееПоле.Имя, ТолькоЧтение)

КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2ПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = ложь;

	РеквизитДерево = ЭтаФорма[Элемент.Имя];
	
	ИДНовыйРодитель = Строка;
	
	// Если НовыйРодитель = Неопределено => Корень дерева
	
	НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,
	РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));
	
	МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;
	
	Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл
		
		Если ТипЗнч(ИДПереносимыйЭлемент) = тип("Число")  Тогда
			
			ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(
			ИДПереносимыйЭлемент);
			
			Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,
				НовыйРодитель) Тогда
				ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЗапуститьДобавление = ложь;
	СтандартнаяОбработка=Ложь;
	
	РеквизитДерево = ЭтаФорма[Элемент.Имя];
	
	ИДПриемник = Строка;
	
	// Если ИДПриемник = Неопределено => Корень дерева
	Приемник = ?(ИДПриемник = Неопределено, Неопределено,
	РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));
	
	МассивИДИсточник = ПараметрыПеретаскивания.Значение;
	
	Для Каждого ИДИсточник Из МассивИДИсточник Цикл
		
		Если ТипЗнч(ИДИсточник) = тип("Число")  Тогда
			
			Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
			НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево,Приемник,Источник);
			
			// Производится копирование в корень
			// Для "красоты" развернем вновь созданную ветвь
			Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
				Элементы["РаботыДЗ2"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(),
				Истина);
			КонецЕсли;

		иначе	
			
			ЗапуститьДобавление = Истина;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ЗапуститьДобавление и  НЕ Приемник = Неопределено Тогда
		
		Элементы.РаботыДЗ2.ТекущаяСтрока =  Приемник.ПолучитьИдентификатор();
		
		ДобавитьЭлементУГПР("");
		Возврат;
	КонецЕсли;
	
	// Для "красоты" развернем ветвь-родителя
	Если НЕ Приемник = Неопределено Тогда
		Элементы["РаботыДЗ2"].Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	РаботыДЗ2_В_СтруктураУГПР_Сервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2ПриИзменении(Элемент)
	
	РаботыДЗ2_В_СтруктураУГПР_Сервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2ПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборы", 0.4, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТекущуюПозицию(Команда)

	ТекущиеДанные = Элементы.РаботыДЗ.ТекущиеДанные;
	
	ВыделенныеСтроки =  Элементы.РаботыДЗ.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для каждого ТекСтрока Из  ВыделенныеСтроки Цикл
			ДобавитьВТекущуюПозицию_Оповещение(ТекСтрока);
		КонецЦикла;
		
		ПодключитьОбработчикОжидания("СкрытьСтрокиДЗ", 2, истина);
		
	иначе
		
		ДобавитьВТекущуюПозицию_Оповещение(ТекущиеДанные.ПолучитьИдентификатор());
		
		СкрытьСтрокиДЗ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТекущуюПозицию_Оповещение(Идентификатор)
	
	ТекущиеДанныеСмета = РаботыДЗ.НайтиПоИдентификатору(Идентификатор);
	
	ТекущиеДанные = Элементы.РаботыДЗ2.ТекущиеДанные;
	
	Если ТекущиеДанныеСмета<> Неопределено и ТекущиеДанные <> Неопределено Тогда

		Если ТекущиеДанные.ЭтоРабота  Тогда
			
			СтруктураОтбораРабот = Новый Структура("ПозицияЛокальнойСметы", ТекущиеДанныеСмета.Ссылка);
			ВыборкаСтрок =  Объект.ТаблицаСоответствий.НайтиСтроки(СтруктураОтбораРабот);
			
			Если ВыборкаСтрок.Количество()  Тогда
				Возврат;
			КонецЕсли;
			
			// 1
			
			НС2 = Объект.ТаблицаСоответствий.Добавить();

			ЗаполнитьЗначенияСвойств(НС2, ТекущиеДанныеСмета);
			
			НС2.КлючСтроки = ТекущиеДанные.КлючСтроки;
			НС2.ВидРаботы =  ТекущиеДанные.ВидРаботы;
			НС2.ПозицияЛокальнойСметы = ТекущиеДанныеСмета.Ссылка;
			НС2.Основная = Ложь;
			НС2.КлючСтрокиСмета = ТекущиеДанныеСмета.КлючСтроки;
			
			ТекущиеДанныеСмета.Отобрано = истина;
			
			ПозицииСметы_Отобрано(ТекущиеДанныеСмета.КлючСтроки, Истина);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СметаПриИзменении(Элемент)
	
	Состояние("Чтение данных сметы ... ");
	
	ЗаполнитьПоСметеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗ2ПередУдалением(Элемент, Отказ)
	
	Отказ = истина;
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОпов = Новый ОписаниеОповещения("РаботыДЗПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока));
		
		ПоказатьВопрос(ОписаниеОпов, НСтр("ru = 'Хотите удалить работу/конструктив?';"+ " en = 'Do you want to continue?'"), Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДЗПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ВыбраннаяСтрока = РаботыДЗ2.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор());
		
		УдалитьСвязанныеРесурсыРекурсивно(ВыбраннаяСтрока);
		
		Если ВыбраннаяСтрока.ПолучитьРодителя() = Неопределено Тогда  // корень
			
			РаботыДЗ2.ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
			
		иначе
			
			ВыбраннаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
			
		КонецЕсли;

		РаботыДЗ2_В_СтруктураУГПР_Сервер();
		
		ПозицииСметы_в_ДЗКлиент();
		
		СкрытьСтрокиДЗ();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  УдалитьСвязанныеРесурсыРекурсивно(Дерево)
	
	УдалитьСвязанныеРесурсы(Дерево.КлючСтроки);

	Для Каждого Ветка Из Дерево.ПолучитьЭлементы() Цикл
		
		УдалитьСвязанныеРесурсыРекурсивно(Ветка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеРесурсы(КлючСтроки)
	
	ТабличныеЧасти = Новый Массив;
	
	ТабличныеЧасти.Добавить(Объект.ТаблицаСоответствий);
	
	Для каждого ТЧ Из ТабличныеЧасти Цикл
		
		ПараметрыОтбора = Новый Структура("КлючСтроки", КлючСтроки);
		
		НайденныеСтроки = ТЧ.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого НайдСтрока Из НайденныеСтроки Цикл
			
			ТекСтрока = ТЧ.Индекс(НайдСтрока);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Проект",  Объект.Проект);
			СтруктураОтбора.Вставить("ПозицияЛокальнойСметы",  НайдСтрока.ПозицияЛокальнойСметы);
			СтруктураОтбора.Вставить("Основная",  НайдСтрока.Основная);
			СтруктураОтбора.Вставить("КлючСтроки",  НайдСтрока.КлючСтроки);

			УдалитьЗаписьРегистраСоответствий(СтруктураОтбора);
			 			
			ТЧ.Удалить(ТекСтрока);
			
			ПозицииСметы_Отобрано(НайдСтрока.КлючСтрокиСмета, Ложь);
			
		КонецЦикла;

	КонецЦикла; // Для каждого ТЧ Из ТабличныеЧасти Цикл

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписьРегистраСоответствий(ТекСтрока)
	
	МенеджерЗаписи = РегистрыСведений.ИНАГРО_СоответствияСметаУГПР.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекСтрока);
	МенеджерЗаписи.Прочитать();
	
	Попытка
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТЧПоВидуРесурса(ВидРесурса)
	
	ТаблицаРесурсов = "РесурсыМатериалы";
	
	Если ВидРесурса = Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаМашинистов 
		или ВидРесурса = Перечисления.СМ_ВидыРесурсов.ЗатратыТрудаРабочих  Тогда
		
		ТаблицаРесурсов = "РесурсыТрудовые";
		
	иначеЕсли ВидРесурса = Перечисления.СМ_ВидыРесурсов.МашиныИМеханизмы 
		или ВидРесурса = Перечисления.СМ_ВидыРесурсов.Оборудование  Тогда
		
		ТаблицаРесурсов = "РесурсыМашинные";
		
	КонецЕсли;
	
	Возврат  ТаблицаРесурсов;
	
КонецФункции

&НаСервере
Процедура СоздатьУГПР(ДанныеФормы)
	
	СтруктураУГПР = Объект.СтруктураУГПР;
	ТаблицаСоответствий = Объект.ТаблицаСоответствий;
	
	НовыйДок = Документы.ИНАГРО_УГПР.СоздатьДокумент();
	НовыйДок.Дата = ТекущаяДата();
	НовыйДок.УстановитьНовыйНомер();
	НовыйДок.Статус = Перечисления.СтатусыПланов.ВПодготовке;
	НовыйДок.Проект = Объект.Проект;
	НовыйДок.Организация = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Проект, "ИНАГРО_Организация");

	Для каждого ТекСтрока  Из СтруктураУГПР Цикл
		НС = НовыйДок.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ТекСтрока);
		НС.Объем = ТекСтрока.ОбъемРабот;
	КонецЦикла;  // Для каждого ТекСтрока  Из СтруктураУГПР Цикл

	Для каждого ТекСтрока  Из ТаблицаСоответствий Цикл
		
		Позиция =  ТекСтрока.ПозицияЛокальнойСметы;

		//  1 определяем объем основной работы для пересчета норм по ресурсам
		ОбъемРабот = 0;
		
		Если ТекСтрока.ЭтоРабота Тогда
			
			Если ТекСтрока.Основная  Тогда
				ОбъемРабот = Позиция.ОбъемРабот;
			иначе
				
				НайдСтроки = СтруктураУГПР.НайтиСтроки(Новый Структура("КлючСтроки", ТекСтрока.КлючСтроки) );
				
				Если НайдСтроки.Количество() Тогда
					ОбъемРабот = НайдСтроки[0].ОбъемРабот;
				иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибки в структуре УГПР, проверьте данные");
				КонецЕсли;
				
			КонецЕсли; //Если ТекСтрока.Основная  Тогда	
			
		КонецЕсли; // Если ЭтоРабота(Позиция) Тогда

		// 2 заполняем ресурсы 
		ПозицииСписок = Новый СписокЗначений;
		ПозицииСписок.Добавить(Позиция);
		
		таблРесурсов = СМ_СметаРасчетВызовСервера.ПолучитьТаблицуСтоимостиРесурсовСметы(ПозицииСписок);

		Для каждого ТекСтрРес  Из таблРесурсов Цикл
			
			ТаблицаРесурсов = НовыйДок[ИмяТЧПоВидуРесурса(ТекСтрРес.ВидРесурса)];
			
			НС = ТаблицаРесурсов.Добавить();
			
			Если ТекСтрока.ЭтоРабота Тогда 
				НС.Ресурс =  ТекСтрРес.Ресурс;
			КонецЕсли;
			
			Если ТекСтрока.ЭтоМатериал  Тогда  //материал ищем по шифру  
				НС.Ресурс =  ОпределитьЭлементУГПР(Позиция);
			КонецЕсли;
			
			НС.КлючСтроки =  ТекСтрока.КлючСтроки;
			НС.ВидРаботы =  ТекСтрока.ВидРаботы;
			
			НС.Количество = ТекСтрРес.РасходПоНорме;
			НС.Цена = ТекСтрРес.ЦенаТекущая;
			НС.Сумма = НС.Количество * НС.Цена;
			
			// 	НС.НормаРасхода = ТекСтрРес.НормаРасхода; // клиент требует пересчитывать
			
			//Пересчет норм
			Если ОбъемРабот <> 0 Тогда
				НС.НормаРасхода = НС.Количество / ОбъемРабот;	
			КонецЕсли;

		КонецЦикла; //Для каждого ТекСтрРес  Из таблРесурсов Цикл
		
		// 3 - операции 
		
		Если ТипЗнч(Позиция)=Тип("ДокументСсылка.СМ_ПозицияЛокальнойСметы") Тогда
			
			Для каждого СтрокаСостава Из Позиция.СоставРабот Цикл
				
				Операция = Справочники.ИНАГРО_Операции.СоздатьНайтиЭлемент(СтрокаСостава.НаименованиеРаботы);
				
				Если не Операция.Пустая() Тогда
					НССОстава = НовыйДок.СоставРабот.Добавить();
					НССОстава.КлючСтроки = ТекСтрока.КлючСтроки;
					НССОстава.ВидРаботы = ТекСтрока.ВидРаботы;
					НССОстава.Операция = Операция;
				КонецЕсли; //Если не Операция.Пустая() Тогда
				
			КонецЦикла; //Для каждого СтрокаСостава Из Позиция.СоставРабот Цикл
			
		КонецЕсли;

	КонецЦикла; //Для каждого ТекСтрока  Из ТаблицаСоответствий Цикл

	НайденныеСтроки = ЛимитированныеЗатраты.НайтиСтроки(Новый Структура("Вид", 2));
	СметнаяПрибыль=0;
	Для каждого Стр Из НайденныеСтроки Цикл	СметнаяПрибыль = СметнаяПрибыль + Стр.СуммаТек; КонецЦикла;
	НовыйДок.СметнаяПрибыль = СметнаяПрибыль;
	
	НайденныеСтроки = ЛимитированныеЗатраты.НайтиСтроки(Новый Структура("Вид", 1));
	НДС=0;
	Для каждого Стр Из НайденныеСтроки Цикл	НДС = НДС + Стр.СуммаТек; КонецЦикла;
	НовыйДок.НДС = НДС;

	НайденныеСтроки = ЛимитированныеЗатраты.НайтиСтроки(Новый Структура("Вид", 3));
	НР=0;
	Для каждого Стр Из НайденныеСтроки Цикл	НР = НР + Стр.СуммаТек; КонецЦикла;
	НовыйДок.НакладныеРасходыРаспред = НР;

	НайденныеСтроки = ЛимитированныеЗатраты.НайтиСтроки(Новый Структура("Вид", 0));
	ВсякоРазно = 0;
	Для каждого Стр Из НайденныеСтроки Цикл	ВсякоРазно = ВсякоРазно + Стр.СуммаТек; КонецЦикла;
	НовыйДок.НакладныеРасходыРаспред = НовыйДок.НакладныеРасходыРаспред +ВсякоРазно;

	ЗначениеВДанныеФормы(НовыйДок, ДанныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестивУГПРНаСервере(ДанныеФормы)
	
	Если Объект.СтруктураУГПР.Количество() Тогда
		
		СоздатьУГПР(ДанныеФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестивУГПР(Команда)

	Форма = ПолучитьФорму("Документ.ИНАГРО_УГПР.Форма.ФормаДокумента");
	
	ДанныеФормы = Форма.Объект;
	
	ПеренестивУГПРНаСервере(ДанныеФормы);
	
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	
	СохранитьСоответствияНаСервере();
	
	Форма.Открыть();
	Форма.РаботыДЗОбновитьНаСервере(); // 1 последовательность важна  - создаем дерево из таблиц документа
	Форма.РаспределитьНРиПрибыльНаСервере(); // 2 

	//ПоказатьЗначение(, УГПР);

КонецПроцедуры

&НаКлиенте
Процедура СметаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка 			= Ложь;
	ОписаниеОЗакрытииФормыВыбораЛС 	= Новый ОписаниеОповещения("ПриЗакрытииФормыПодбораЛС", ЭтаФорма);
	
	СтруктураПараметров 			= Новый Структура;
	СтруктураПараметров.Вставить("ВключатьОС", Истина);
	СтруктураПараметров.Вставить("ВключатьСС", Истина);
	СтруктураПараметров.Вставить("БезПомеченных", Истина);
	СтруктураПараметров.Вставить("ОтборСтройка", Истина);
	СтруктураПараметров.Вставить("ЭлементКорня", Объект.Смета);
	
	ОткрытьФорму("Обработка.СМ_ДеревоСметПростое.Форма.ФормаУпр", СтруктураПараметров, ЭтаФорма, ,,, ОписаниеОЗакрытииФормыВыбораЛС, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыПодбораЛС(ТекЛС,ТекПараметр) Экспорт
	
	Если ТекЛС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Смета = ТекЛС;
	
	СметаПриИзменении("");
	
	ПроверитьНаличиеСтруктуры();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеСтруктуры()
	
	Если ЕстьСоответствия(Объект.Проект) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для проекта есть полная/частичная структура УГПР? Загрузить';"
		+ " en = 'Load saved structure?'"), Режим, 0);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСуществующуюСтруктуруУГПР();

	Если Объект.ТаблицаСоответствий.Количество() Тогда
		
		Для каждого СтрокаСоответ Из Объект.ТаблицаСоответствий Цикл
			
			ПозицииСметы_Отобрано(СтрокаСоответ.КлючСтрокиСмета, Истина);
			
		КонецЦикла;
		
		ПозицииСметы_в_ДЗКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСуществующуюСтруктуруУГПР()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИНАГРО_СоответствияСметаУГПР.Проект,
	|	ИНАГРО_СоответствияСметаУГПР.ПозицияЛокальнойСметы,
	|	ИНАГРО_СоответствияСметаУГПР.Основная,
	|	ИНАГРО_СоответствияСметаУГПР.КлючСтроки,
	|	ИНАГРО_СоответствияСметаУГПР.ОбъемРабот,
	|	ИНАГРО_СоответствияСметаУГПР.РаспределениеСметнойСтоимости,
	|	ИНАГРО_СоответствияСметаУГПР.НаименованиеЭлемента,
	|	ИНАГРО_СоответствияСметаУГПР.КлючСтрокиСмета,
	|	ИНАГРО_СоответствияСметаУГПР.ЭтоРабота,
	|	ИНАГРО_СоответствияСметаУГПР.ЭтоМатериал,
	|	ИНАГРО_СоответствияСметаУГПР.ВидРаботы,
	|	ИНАГРО_СоответствияСметаУГПР.КлючСвязи,
	|	ИНАГРО_СоответствияСметаУГПР.ВидРаботы.ОсновнаяЕдиница КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ИНАГРО_СоответствияСметаУГПР КАК ИНАГРО_СоответствияСметаУГПР
	|ГДЕ
	|	ИНАГРО_СоответствияСметаУГПР.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ХэшКлючей = Новый Соответствие;
		
		Пока Выборка.Следующий()  Цикл
			
			Если ЕстьВхождениеВТекущуюСмету(Выборка.КлючСтрокиСмета, Объект.ПозицииСметы, ХэшКлючей) Тогда 
				
				Если Выборка.Основная Тогда
					НС = Объект.СтруктураУГПР.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Выборка);
				КонецЕсли;
				
				НС = Объект.ТаблицаСоответствий.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);

			КонецЕсли; //Если ЕстьВхождениеВТекущуюСмету
			
		КонецЦикла; //Пока Выборка.Следующий()  Цикл
		
		Если Объект.СтруктураУГПР.Количество() Тогда
			СтруктураУГПР_в_ДЗСервер();
		КонецЕсли;
		
	КонецЕсли; //Если не РезультатЗапроса.Пустой() Тогда

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьВхождениеВТекущуюСмету(Ключ, ТЧПозицииСметы, ХэшКлючей)
	
	НайденноеЗначение = Неопределено;
	
	//Если ХэшКлючей.Свойство("_"+Ключ, НайденноеЗначение) Тогда
	//	Возврат НайденноеЗначение;	
	//КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСтроки", Ключ);
	
	МассивНайдСтрок = ТЧПозицииСметы.НайтиСтроки(СтруктураОтбора);
	
	РезультатФункции = 	МассивНайдСтрок.Количество();
	
	//ХэшКлючей.Вставить("_"+Ключ, РезультатФункции);
	
	Возврат  РезультатФункции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСоответствия(Проект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИНАГРО_СоответствияСметаУГПР.Проект
	|ИЗ
	|	РегистрСведений.ИНАГРО_СоответствияСметаУГПР КАК ИНАГРО_СоответствияСметаУГПР
	|ГДЕ
	|	ИНАГРО_СоответствияСметаУГПР.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();

КонецФункции

&НаКлиенте
Процедура ТаблицаСоответствийПослеУдаления(Элемент)
	СкрытьСтрокиДЗ();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствийПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено  Тогда
		
		Если  ТекущиеДанные.Основная Тогда
			Возврат;
		КонецЕсли;
 		
		ПозицииСметы_Отобрано(ТекущиеДанные.КлючСтрокиСмета, Ложь);
 		
 		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Проект",  Объект.Проект);
		СтруктураОтбора.Вставить("ПозицияЛокальнойСметы",  ТекущиеДанные.ПозицияЛокальнойСметы);
		СтруктураОтбора.Вставить("Основная",  ТекущиеДанные.Основная);
		СтруктураОтбора.Вставить("КлючСтроки",  ТекущиеДанные.КлючСтроки);

 		УдалитьЗаписьРегистраСоответствий(СтруктураОтбора);
		
		ПозицииСметы_в_ДЗКлиент();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоРаботам(Команда)
	
	ТекущиеДанные = Элементы.РаботыДЗ.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено и (ТекущиеДанные.ЭтоРабота или ТекущиеДанные.ЭтоМатериал) Тогда
		
		Если ТекущиеДанные.Отобрано Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОЗакрытииФормыВыбора 	= Новый ОписаниеОповещения("ПриЗакрытииФормыРаспределения", ЭтаФорма, ТекущиеДанные.ПолучитьИдентификатор());
		
		СтруктураПараметров 			= Новый Структура;
		СтруктураПараметров.Вставить("СтруктураУГПР", Объект.СтруктураУГПР);
		СтруктураПараметров.Вставить("ВидРаботы", ТекущиеДанные.НаименованиеЭлемента);
		
		ОткрытьФорму("Обработка.ИНАГРО_ЗагрузкаСметы.Форма.ФормаВыбораWBS", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОЗакрытииФормыВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыРаспределения(Результат, ТекПараметр) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючСтроки  Из Результат Цикл
		
		//КлючСтроки.Ключ
		//КлючСтроки.Значение
		
		ТекущиеДанныеСмета = РаботыДЗ.НайтиПоИдентификатору(ТекПараметр);
		ТекущиеДанные =  ПолучитьВеткуПоКлючуСтроки(РаботыДЗ2, КлючСтроки.Ключ);
		
		Если ТекущиеДанныеСмета <> Неопределено и ТекущиеДанные <> Неопределено Тогда
			
			// 1
			НС2 = Объект.ТаблицаСоответствий.Добавить();
			
			ЗаполнитьЗначенияСвойств(НС2, ТекущиеДанныеСмета);
			
			НС2.КлючСтроки = ТекущиеДанные.КлючСтроки;
			НС2.ВидРаботы =  ТекущиеДанные.ВидРаботы;
			НС2.ПозицияЛокальнойСметы = ТекущиеДанныеСмета.Ссылка;
			НС2.Основная = Ложь;
			НС2.КлючСтрокиСмета = ТекущиеДанныеСмета.КлючСтроки;
			НС2.РаспределениеСметнойСтоимости = КлючСтроки.Значение;
			
			ТекущиеДанныеСмета.Отобрано = истина;
			
			ПозицииСметы_Отобрано(ТекущиеДанныеСмета.КлючСтроки, Истина);

		КонецЕсли; //Если ТекущиеДанныеСмета <> Неопределено Тогда

	КонецЦикла;//  Для каждого КлючСтроки  Из Результат Цикл
	
	СкрытьСтрокиДЗ();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВеткуПоКлючуСтроки(Дерево, КлючСтроки)      
	
	Для Каждого Ветка Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Ветка.КлючСтроки = КлючСтроки Тогда
			
			Возврат Ветка;
			
		Иначе
			
			НайденнаяСтрока = ПолучитьВеткуПоКлючуСтроки(Ветка, КлючСтроки);
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СохранитьСоответствия(Команда)
	СохранитьСоответствияНаСервере();
	
	ПоказатьПредупреждение(, "Сохранено!", 20);
КонецПроцедуры

&НаСервере
Процедура СохранитьСоответствияНаСервере()
	
	НачатьТранзакцию();
	
	Для каждого СтрокаСоотв Из Объект.ТаблицаСоответствий  Цикл
		
		МенеджерЗаписи = РегистрыСведений.ИНАГРО_СоответствияСметаУГПР.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаСоотв);
		
		МенеджерЗаписи.Проект = Объект.Проект;
		
		МенеджерЗаписи.Записать(истина);
		
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАналогичнуюСтруктуру(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьУГПРСтруктуру", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Текущая структура УГПР будет утеряна, продолжить?",РежимДиалогаВопрос.ДаНет, 60);

КонецПроцедуры

//Вынести в отдельную процедуру
&НаКлиенте
Процедура ОчиститьУГПРСтруктуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.СтруктураУГПР.Очистить();
		Объект.ТаблицаСоответствий.Очистить();

		Для каждого ТекущиеДанныеСмета Из Объект.ПозицииСметы Цикл
			
			ТекущиеДанныеСмета.Отобрано = истина;
			ПозицииСметы_Отобрано(ТекущиеДанныеСмета.КлючСтроки, Истина);

			Если ТекущиеДанныеСмета.ЭтоРабота  Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Наименование", ТекущиеДанныеСмета.НаименованиеЭлемента);
				ПараметрыФормы.Вставить("Владелец", Объект.Проект);
				ПараметрыФормы.Вставить("ШифрПозицииНорматива", ТекущиеДанныеСмета.ШифрРасценки);
				ПараметрыФормы.Вставить("ЕдиницаИзмерения", ТекущиеДанныеСмета.ЕдиницаИзмерения);
				
				ЭлементWBS = НайтиРаботу(ПараметрыФормы, истина);
				
			ИначеЕсли  ТекущиеДанныеСмета.ЭтоМатериал  Тогда
				//TODO - помещать материалы в работу 
				
				Продолжить;
				
			иначе			
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Наименование", ТекущиеДанныеСмета.НаименованиеЭлемента);
				ПараметрыФормы.Вставить("Владелец", Объект.Проект);
				ПараметрыФормы.Вставить("УровеньСметы", ОпределитьУровеньСметы(ТекущиеДанныеСмета.Ссылка));
				
				ЭлементWBS = НайтиКонструктив(ПараметрыФормы, истина);
				
			КонецЕсли;
			
			НС = Объект.СтруктураУГПР.Добавить();
			НС.ВидРаботы = ЭлементWBS;
			ЗаполнитьЗначенияСвойств(НС, ТекущиеДанныеСмета);

			Если  ТекущиеДанныеСмета.Ссылка = Объект.Смета Тогда  // дерево начинаем с "нуля"
				НС.КлючСвязи = 	"00000000-0000-0000-0000-000000000000";
			КонецЕсли;
			
			//НС.КлючСвязи = КлючСвязи;
			//НС.КлючСтроки = Новый УникальныйИдентификатор;
			// TODO ключи переназначить обязательно!!!

			НС2 = Объект.ТаблицаСоответствий.Добавить();
			ЗаполнитьЗначенияСвойств(НС2, НС);
			НС2.ПозицияЛокальнойСметы = ТекущиеДанныеСмета.Ссылка;
			НС2.НаименованиеЭлемента = ТекущиеДанныеСмета.НаименованиеЭлемента;
			НС2.Основная = Истина;
			НС2.КлючСтрокиСмета = ТекущиеДанныеСмета.КлючСтроки;

		КонецЦикла;
		
		СтруктураУГПР_в_ДЗСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	Элементы.ПозицииСметы.Видимость = Отладка;
	Элементы.СтруктураУГПР.Видимость = Отладка;
	Элементы.ТаблицаСоответствий1.Видимость = Отладка;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРС(Команда)
	
	Отбор = Новый Структура;
    Отбор.Вставить("Проект",Объект.Проект);
 	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
 	ОткрытьФорму("РегистрСведений.ИНАГРО_СоответствияСметаУГПР.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеУГПР(Команда)
	СвернутьРекурсия(РаботыДЗ2.ПолучитьЭлементы(), "РаботыДЗ2");
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеУГПР(Команда)
	
	тЭлементы = РаботыДЗ2.ПолучитьЭлементы();
	
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы.РаботыДЗ2.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОсновнойРаботой(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствий.ТекущиеДанные;
	
	Если  ТекущиеДанные <> Неопределено Тогда
		
		Если не ТекущиеДанные.ЭтоРабота Тогда
			Возврат;
		КонецЕсли;

		Ветка = ПолучитьВеткуПоКлючуСтроки(РаботыДЗ2, ТекущиеДанные.КлючСтроки);
		
		Если Ветка <> Неопределено Тогда

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЭлемента);
			ПараметрыФормы.Вставить("Владелец", Объект.Проект);
			ПараметрыФормы.Вставить("ШифрПозицииНорматива", ТекущиеДанные.ШифрРасценки);
			ПараметрыФормы.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
			
			ЭлементWBS = НайтиРаботу(ПараметрыФормы, истина);

			Если ЭлементWBS.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			// 1 меняем значения в дереве
			Ветка.ВидРаботы = ЭлементWBS;
			Ветка.ЕдиницаИзмерения =  ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементWBS, "ОсновнаяЕдиница");
			Ветка.ОбъемРабот = ТекущиеДанные.ОбъемРабот;
			Ветка.ШифрРасценки =  ТекущиеДанные.ШифрРасценки;

			//2 меняем в таблице дерева
			ПараметрыОтбора = Новый Структура("КлючСтроки",  ТекущиеДанные.КлючСтроки);
			ИскомыеСтроки = Объект.СтруктураУГПР.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтр Из ИскомыеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ТекСтр, Ветка);
			КонецЦикла;
			
			//3 изменим представление работы в соответствиях
			
			ПараметрыОтбора = Новый Структура("КлючСтроки",  ТекущиеДанные.КлючСтроки);
			ИскомыеСтроки = Объект.ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого ТекСтр Из ИскомыеСтроки Цикл //только вид работ заменить
				 ТекСтр.ВидРаботы = ЭлементWBS;
				 ТекущиеДанные.Основная = Ложь;
 			КонецЦикла;
			
			ТекущиеДанные.Основная = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

