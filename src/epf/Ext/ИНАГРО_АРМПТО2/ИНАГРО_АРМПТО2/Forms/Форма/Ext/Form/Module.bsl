 
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Схема = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет1");
	
 	Настройки = КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
 	
	// Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Версия", );
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки1);
	
 	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки1);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки1, УникальныйИдентификатор);

	//Очищаем поле табличного документа
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
 	Результат.ПоказатьУровеньГруппировокСтрок(1);

 	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
 	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
 	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеДЗ= Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеДЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);

	СформироватьНаСервереДиаграмму(ДанныеДЗ);

КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервереДиаграмму(ДанныеДЗ)
	
 	ДиаграммаГанта.Очистить();
 	ДиаграммаГанта.Обновление = ложь;

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ИНАГРО_УчетВыполненныхРаботОбороты.Проект,
	//	|	МАКСИМУМ(ИНАГРО_УчетВыполненныхРаботОбороты.ПериодДень) КАК КонецРаботыФакт,
	//	|	МИНИМУМ(ИНАГРО_УчетВыполненныхРаботОбороты.ПериодДень) КАК НачалоРаботыФакт
	//	|ПОМЕСТИТЬ ВТ_Факт
	//	|ИЗ
	//	|	РегистрНакопления.ИНАГРО_УчетВыполненныхРабот.Обороты(, , Авто, ) КАК ИНАГРО_УчетВыполненныхРаботОбороты
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ИНАГРО_УчетВыполненныхРаботОбороты.Проект
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ИНАГРО_УГПРПараметрыВыполненияРабот.Версия.Владелец КАК Проект,
	//	|	МИНИМУМ(ИНАГРО_УГПРПараметрыВыполненияРабот.НачалоРаботыПлан) КАК НачалоРаботыПлан,
	//	|	МАКСИМУМ(ИНАГРО_УГПРПараметрыВыполненияРабот.КонецРаботыПлан) КАК КонецРаботыПлан,
	//	|	МАКСИМУМ(ВТ_Факт.КонецРаботыФакт) КАК КонецРаботыФакт,
	//	|	МИНИМУМ(ВТ_Факт.НачалоРаботыФакт) КАК НачалоРаботыФакт
	//	|ИЗ
	//	|	ВТ_Факт КАК ВТ_Факт
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_УГПРПараметрыВыполненияРабот КАК ИНАГРО_УГПРПараметрыВыполненияРабот
	//	|		ПО ИНАГРО_УГПРПараметрыВыполненияРабот.Версия.Владелец = ВТ_Факт.Проект
	//	|ГДЕ
	//	|	ИНАГРО_УГПРПараметрыВыполненияРабот.Версия.ВидВерсии = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидВерсии.Рабочая)
	//	|	И ИНАГРО_УГПРПараметрыВыполненияРабот.НачалоРаботыПлан >= &НачалоРаботы
	//	|	И ИНАГРО_УГПРПараметрыВыполненияРабот.КонецРаботыПлан <= &КонецРаботы
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ИНАГРО_УГПРПараметрыВыполненияРабот.Версия.Владелец";
	//	
	//	
	//Запрос.УстановитьПараметр("НачалоРаботы", СтандартныйПериод.ДатаНачала);
	//Запрос.УстановитьПараметр("КонецРаботы", СтандартныйПериод.ДатаОкончания);
	//
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	
	//	Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Проект);
	//	
	//	Серия = ДиаграммаГанта.УстановитьСерию("План");
	//	
	//	Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
	// 	Интервал = Значение.Добавить();
	// 	Интервал.Начало = Выборка.НачалоРаботыПлан;
	// 	Интервал.Конец = Выборка.КонецРаботыПлан;
	//	
	//	Серияфакт = ДиаграммаГанта.УстановитьСерию("Факт");
	//	
	//	Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серияфакт);
	//	Интервал = Значение.Добавить();
	// 	Интервал.Начало = Выборка.НачалоРаботыФакт;
	// 	Интервал.Конец = Выборка.КонецРаботыФакт;
	//	
	//	
	//КонецЦикла;

	Для каждого СтрокаДЗ Из ДанныеДЗ.Строки  Цикл // корень дерева

		Если СтрокаДЗ.Версия <> Неопределено или  СтрокаДЗ.НачалоРаботыПлан <> null и СтрокаДЗ.КонецРаботыПлан <> null Тогда
			
			Точка = ДиаграммаГанта.УстановитьТочку(СтрокаДЗ.Версия);
			
			Серия = ДиаграммаГанта.УстановитьСерию("План");
			Серияфакт = ДиаграммаГанта.УстановитьСерию("Факт");

			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
			Интервал = Значение.Добавить();
			Интервал.Начало = СтрокаДЗ.НачалоРаботыПлан;
			Интервал.Конец = СтрокаДЗ.КонецРаботыПлан;

			Для каждого СтрокаДЗ_Версия Из СтрокаДЗ.Строки  Цикл // версии
				
				ВывестиДеревоВДиаграммуРекурсивно(СтрокаДЗ_Версия.Строки, Точка, Серия, Серияфакт);
				
			КонецЦикла;
 			
 		КонецЕсли;

	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоВДиаграммуРекурсивно(ДанныеДЗ, ТочкаРодитель, Серия, Серияфакт)
	
	Для каждого СтрокаДЗ Из ДанныеДЗ  Цикл
		
		Точка = ДиаграммаГанта.УстановитьТочку(СтрокаДЗ.ВидРаботы, ТочкаРодитель);
 		
		Если СтрокаДЗ.НачалоРаботыПлан <> null и СтрокаДЗ.КонецРаботыПлан <> null Тогда
  			
			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
			Интервал = Значение.Добавить();
			Интервал.Начало = СтрокаДЗ.НачалоРаботыПлан;
			Интервал.Конец = СтрокаДЗ.КонецРаботыПлан;
			
		КонецЕсли;
		
		Если СтрокаДЗ.НачалоРаботыФакт <> null и СтрокаДЗ.КонецРаботыФакт <> null Тогда
			
 			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серияфакт);
			Интервал = Значение.Добавить();
			Интервал.Начало = СтрокаДЗ.НачалоРаботыФакт;
			Интервал.Конец = СтрокаДЗ.КонецРаботыФакт;
			
 		КонецЕсли;

		ВывестиДеревоВДиаграммуРекурсивно(СтрокаДЗ.Строки, Точка, Серия, Серияфакт)

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПлан(Команда)
	ОткрытьФорму("Документ.ИНАГРО_УГПР.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПринятьРаботы(Команда)
	ОткрытьФорму("Документ.ИНАГРО_АктОПриемкеВыполненныхРабот.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РеализоватьРаботы(Команда)
	ОткрытьФорму("Документ.ИНАГРО_РеализацияСтроительныхРабот.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	//Получаем схему из макета
	СхемаКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет1");
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКД);

	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);

	СтандартныйПериод.ДатаНачала = НачалоГода(ТекущаяДата());
	СтандартныйПериод.ДатаОкончания = КонецГода(ТекущаяДата());
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ЗначениеРасш = ПолучитьПараметрыРасшифровки(Расшифровка);

	Если ЗначениеРасш <> Неопределено и ЗначениеРасш <> null Тогда
		ПоказатьЗначение(, ЗначениеРасш);
	КонецЕсли;

//	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыРасшифровки(Расшифровка )
			
 	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ПолучитьИзВременногоХранилища(ДанныеРасшифровки), КомпоновщикНастроекКомпоновкиДанных, Истина);

	Для каждого ТекПоле Из МассивПолей Цикл
		
		Возврат  ТекПоле.Значение;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПринятьВнРаботы(Команда)
	ОткрытьФорму("Документ.ИНАГРО_СправкаОВыполненныхРаботах.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура Актирование(Команда)
	ОткрытьФорму("Отчет.ИНАГРО_АктированиеРабот.Форма");
КонецПроцедуры

