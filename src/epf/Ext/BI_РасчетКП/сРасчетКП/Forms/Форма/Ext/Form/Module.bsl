
&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	УстановитьОтборыСвязей();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Проект = Параметры.Проект;
	Версия = Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(Проект) ;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСвязей()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.ВзаимосвязиРабот, "Проект", 
		Проект, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.ВзаимосвязиРабот, "Версия", 
		Версия, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

	Работы.Очистить();
	ТаблицаСвязей.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ВзаимосвязиРабот.КлючСтрокиА,
		|	ИНАГРО_ВзаимосвязиРабот.КлючСтрокиБ,
		|	ИНАГРО_ВзаимосвязиРабот.ВидРаботыА,
		|	ИНАГРО_ВзаимосвязиРабот.ВидРаботыБ,
		|	ИНАГРО_ВзаимосвязиРабот.Запаздывание,
		|	ИНАГРО_ВзаимосвязиРабот.ТипСвязи
		|ПОМЕСТИТЬ ВТ_ВзаимосвязиПроекта
		|ИЗ
		|	РегистрСведений.ИНАГРО_ВзаимосвязиРабот КАК ИНАГРО_ВзаимосвязиРабот
		|ГДЕ
		|	ИНАГРО_ВзаимосвязиРабот.Проект = &Проект
		|	И ИНАГРО_ВзаимосвязиРабот.Версия = &Версия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИНАГРО_УГПРРаботы.КлючСтроки,
		|	ИНАГРО_УГПРРаботы.ДлительностьДни,
		|	ИНАГРО_УГПРРаботы.КодWBS,
		|	ИНАГРО_УГПРРаботы.ВидРаботы,
		|	ИНАГРО_УГПРРаботы.НомерВСтруктуре,
		|	ИНАГРО_УГПРРаботы.КлючСвязи
		|ПОМЕСТИТЬ ВТ_РаботыПроекта
		|ИЗ
		|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
		|ГДЕ
		|	ИНАГРО_УГПРРаботы.Проект = &Проект
		|	И ИНАГРО_УГПРРаботы.Версия = &Версия
		|	И ИНАГРО_УГПРРаботы.ЭтоРабота
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВзаимосвязиПроекта.КлючСтрокиА) КАК КоличчествоВходов,
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ КАК КлючСтроки
		|ПОМЕСТИТЬ ВТ_РасчетВходов
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА КАК КлючСтроки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВзаимосвязиПроекта.КлючСтрокиБ) КАК КоличествоВыходов
		|ПОМЕСТИТЬ ВТ_РасчетОкончаний
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА,
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ,
		|	ВТ_ВзаимосвязиПроекта.ВидРаботыА,
		|	ВТ_ВзаимосвязиПроекта.ВидРаботыБ,
		|	ВТ_ВзаимосвязиПроекта.Запаздывание,
		|	ВТ_ВзаимосвязиПроекта.ТипСвязи,
		|	ЕСТЬNULL(ВТ_РаботыПроекта.КодWBS, 0) КАК КодWBSА
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботыПроекта КАК ВТ_РаботыПроекта
		|		ПО ВТ_ВзаимосвязиПроекта.КлючСтрокиА = ВТ_РаботыПроекта.КлючСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РаботыПроекта.КлючСтроки,
		|	ВТ_РаботыПроекта.КлючСвязи,
		|	ВТ_РаботыПроекта.ВидРаботы,
		|	ВТ_РаботыПроекта.КодWBS,
		|	ВТ_РаботыПроекта.ДлительностьДни,
		|	ЕСТЬNULL(ВТ_РасчетОкончаний.КоличествоВыходов, 0) КАК КоличествоВыходов,
		|	ЕСТЬNULL(ВТ_РасчетВходов.КоличчествоВходов, 0) КАК КоличествоВходов
		|ИЗ
		|	ВТ_РаботыПроекта КАК ВТ_РаботыПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетОкончаний КАК ВТ_РасчетОкончаний
		|		ПО ВТ_РаботыПроекта.КлючСтроки = ВТ_РасчетОкончаний.КлючСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетВходов КАК ВТ_РасчетВходов
		|		ПО ВТ_РаботыПроекта.КлючСтроки = ВТ_РасчетВходов.КлючСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_РаботыПроекта.НомерВСтруктуре,
		|	ВТ_РаботыПроекта.КодWBS";
	
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСвязей = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить();
	ВыборкаСвязей.Индексы.Добавить("КлючСтрокиА");
	ВыборкаСвязей.Индексы.Добавить("КлючСтрокиБ");
	
	Выборка  = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяРабота = Работы.Добавить();
 		ЗаполнитьЗначенияСвойств(ТекущаяРабота, Выборка);
		
		ЗаполнитьПредшественников(ТекущаяРабота, ВыборкаСвязей, ТаблицаСвязей);
 			
	КонецЦикла;

	 РасчетПутиОтНачала(Работы, ТаблицаСвязей);
	 
	 РасчетПутиОтКонца(Работы, ТаблицаСвязей);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетПутиОтКонца(Работы, ТаблицаСвязей)
	
 	// выбираем стартовые работы и запускаем расчет
	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КоличествоВыходов", 0));

	Для каждого СтартоваяРабота Из МассивСтрокРабот Цикл
		РасчетПутиРекурсивноОбратный(Работы, СтартоваяРабота, ТаблицаСвязей);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетПутиРекурсивноОбратный(Работы, ТекущаяРабота, ТаблицаСвязей)

	Если ТекущаяРабота.КоличествоВыходов <> 0 Тогда  // последние работы не пересчитываем
		
		МинимальноеЗначение = Неопределено;
		
 		МассивПоследователей = МассивПоследователейПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
		
		Для каждого КлючПоследователя Из МассивПоследователей Цикл
			
			МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КлючСтроки", КлючПоследователя));
			
			Для каждого СтрокаВыборки Из МассивСтрокРабот Цикл
				
				Если МинимальноеЗначение = Неопределено
					или  МинимальноеЗначение > СтрокаВыборки.ПВН - ТекущаяРабота.ДлительностьДни Тогда
					МинимальноеЗначение = СтрокаВыборки.ПВН - ТекущаяРабота.ДлительностьДни;
				КонецЕсли;
				
 			КонецЦикла;
			
		КонецЦикла;
		
		Если МинимальноеЗначение <> Неопределено  Тогда
			ТекущаяРабота.ПВН = МинимальноеЗначение;
			ТекущаяРабота.РезервВремени = ТекущаяРабота.ПВН -  ТекущаяРабота.РВН;
 			ТекущаяРабота.Критическая =	(ТекущаяРабота.РезервВремени = 0);
 		КонецЕсли;
 		
	иначе
		
		ТекущаяРабота.ПВН = ТекущаяРабота.РВН;
		
	КонецЕсли;

	// РЕКУРСИЯ  - ПЕРЕБОР предшественников	
	
	МассивПредшественников = МассивПредшественниковПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
 	Для каждого ЭлементПредшественник  из МассивПредшественников Цикл
		
		МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КлючСтроки", ЭлементПредшественник));
		
		Если МассивСтрокРабот.Количество() Тогда
			РасчетПутиРекурсивноОбратный(Работы, МассивСтрокРабот[0], ТаблицаСвязей);
		КонецЕсли;
 		
	КонецЦикла;

 КонецФункции

&НаСервереБезКонтекста
Процедура РасчетПутиОтНачала(Работы, ТаблицаСвязей)
	
 	// выбираем стартовые работы и запускаем расчет
	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("ПредшественникиWBS", ""));

	Для каждого СтартоваяРабота Из МассивСтрокРабот Цикл
		РасчетПутиРекурсивно(Работы, СтартоваяРабота, ТаблицаСвязей);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетПутиРекурсивно(Работы, ТекущаяРабота, ТаблицаСвязей)

	// ПЕРЕБОР ПРЕДШЕСТВЕННИКОВ
	МассивПредшественников = МассивПредшественниковПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
	МаксимальнаяДлительность = 0;
	
	Для каждого ЭлементПредшественник Из МассивПредшественников Цикл
		
		Если ЭлементПредшественник =  "00000000-0000-0000-0000-000000000000" Тогда
			МаксимальнаяДлительность = 0;  Прервать; // это стартовая работа				
		КонецЕсли; //Если ЭлементПредшественник =  "00000000-0000-0000-0000-000000000000"
		
		МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КлючСтроки", ЭлементПредшественник));
		
		Для каждого СтрокаВыборки Из МассивСтрокРабот Цикл
			МаксимальнаяДлительность = Макс(СтрокаВыборки.РВН+СтрокаВыборки.ДлительностьДни, МаксимальнаяДлительность);
		КонецЦикла;
		
	КонецЦикла;  //Для каждого ЭлементПредшественник Из МассивПредшественников Цикл
	
	//МаксимальнаяДлительность = МаксимальнаяДлительность + ТекущаяРабота.ДлительностьДни;
	
	ТекущаяРабота.РВН = Макс(МаксимальнаяДлительность,  ТекущаяРабота.РВН);

	// РЕКУРСИЯ  - ПЕРЕБОР ПОСЛЕДОВАТЕЛЕЙ	
	
	МассивПоследователей = МассивПоследователейПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
 	Для каждого КлючПоследователя Из МассивПоследователей Цикл
		
		МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КлючСтроки", КлючПоследователя));
		
		Если МассивСтрокРабот.Количество() Тогда
			РасчетПутиРекурсивно(Работы, МассивСтрокРабот[0], ТаблицаСвязей);
		КонецЕсли;
 		
	КонецЦикла;
  	
 КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПредшественников(ТекущаяРабота, ВыборкаСвязей, ТаблицаСвязей)
	
	МассивСтрокСвязи = ВыборкаСвязей.НайтиСтроки(Новый Структура("КлючСтрокиБ", ТекущаяРабота.КлючСтроки));
	
	Если МассивСтрокСвязи.Количество() = 1 Тогда
		
		ТекущаяРабота.ПредшественникиWBS = МассивСтрокСвязи[0].КодWBSА;
 		
		ДобавитьСвязьВТаблицу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки,  МассивСтрокСвязи[0].КлючСтрокиА);
		
 	иначе
		
		Для каждого ЭлементМассива Из МассивСтрокСвязи Цикл
			
			ТекущаяРабота.ПредшественникиWBS = ТекущаяРабота.ПредшественникиWBS + ?(ЗначениеЗаполнено(ТекущаяРабота.ПредшественникиWBS),";","")
				+ ЭлементМассива.КодWBSА ;
 			
			ДобавитьСвязьВТаблицу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки,  ЭлементМассива.КлючСтрокиА);
			
		КонецЦикла;
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьСвязьВТаблицу(ТаблицаСвязей, КлючСтроки, КлючСтрокиПредшественник)
	
	ТекущаяСвязь = ТаблицаСвязей.Добавить();
	ТекущаяСвязь.КлючСтроки = КлючСтроки;
	ТекущаяСвязь.КлючСтрокиПредшественника = КлючСтрокиПредшественник;
 	
КонецФункции

&НаСервереБезКонтекста
Функция МассивПредшественниковПоКлючу(ТаблицаСвязей, КлючСтроки)
	
	Рез = новый Массив;
	
	МассивСтрокРабот = ТаблицаСвязей.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	Для каждого ТекущаяРабота Из МассивСтрокРабот Цикл
		Рез.Добавить(ТекущаяРабота.КлючСтрокиПредшественника);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивПоследователейПоКлючу(ТаблицаСвязей, КлючСтроки)
	
	Рез = новый Массив;
	
	МассивСтрокРабот = ТаблицаСвязей.НайтиСтроки(Новый Структура("КлючСтрокиПредшественника", КлючСтроки));
	
	Для каждого ТекущаяРабота Из МассивСтрокРабот Цикл
		Рез.Добавить(ТекущаяРабота.КлючСтроки);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция  ПроектПриИзмененииНаСервере(Проект)
	Возврат  Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(Проект) ;
КонецФункции

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Версия = ПроектПриИзмененииНаСервере(Проект);
	
	УстановитьОтборыСвязей();

КонецПроцедуры   
 