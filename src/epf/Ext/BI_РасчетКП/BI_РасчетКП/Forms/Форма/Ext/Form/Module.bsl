
&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	УстановитьОтборыСвязей();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Проект = Параметры.Проект;
	Версия = Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(Проект) ;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Состояние("Расчет графика", 33);
	
	ЗаполнитьНаСервере();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДиаграмма Тогда
		СформироватьДаграммуСервер();
	КонецЕсли;
	
	Состояние("Расчет графика завершен", 100);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСвязей()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.ВзаимосвязиРабот, "Проект", 
		Проект, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.ВзаимосвязиРабот, "Версия", 
		Версия, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()

	Элементы.ДатаНачала.Доступность = (ВариантПланирования = 0);
	Элементы.ДатаОкончания.Доступность = (ВариантПланирования = 1);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

	Работы.Очистить();
	ТаблицаСвязей.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ВзаимосвязиРабот.КлючСтрокиА,
		|	ИНАГРО_ВзаимосвязиРабот.КлючСтрокиБ,
		|	ИНАГРО_ВзаимосвязиРабот.ВидРаботыА,
		|	ИНАГРО_ВзаимосвязиРабот.ВидРаботыБ,
		|	ИНАГРО_ВзаимосвязиРабот.Запаздывание,
		|	ИНАГРО_ВзаимосвязиРабот.ТипСвязи
		|ПОМЕСТИТЬ ВТ_ВзаимосвязиПроекта
		|ИЗ
		|	РегистрСведений.ИНАГРО_ВзаимосвязиРабот КАК ИНАГРО_ВзаимосвязиРабот
		|ГДЕ
		|	ИНАГРО_ВзаимосвязиРабот.Проект = &Проект
		|	И ИНАГРО_ВзаимосвязиРабот.Версия = &Версия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИНАГРО_УГПРРаботы.КлючСтроки,
		|	ИНАГРО_УГПРРаботы.ДлительностьДни,
		|	ИНАГРО_УГПРРаботы.КодWBS,
		|	ИНАГРО_УГПРРаботы.ВидРаботы,
		|	ИНАГРО_УГПРРаботы.НомерВСтруктуре,
		|	ИНАГРО_УГПРРаботы.КлючСвязи,
		|	ИНАГРО_УГПРРаботы.ЭтоРабота
		|ПОМЕСТИТЬ ВТ_РаботыПроекта
		|ИЗ
		|	РегистрСведений.ИНАГРО_УГПРРаботы КАК ИНАГРО_УГПРРаботы
		|ГДЕ
		|	ИНАГРО_УГПРРаботы.Проект = &Проект
		|	И ИНАГРО_УГПРРаботы.Версия = &Версия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВзаимосвязиПроекта.КлючСтрокиА) КАК КоличчествоВходов,
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ КАК КлючСтроки
		|ПОМЕСТИТЬ ВТ_РасчетВходов
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА КАК КлючСтроки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВзаимосвязиПроекта.КлючСтрокиБ) КАК КоличествоВыходов
		|ПОМЕСТИТЬ ВТ_РасчетОкончаний
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиА,
		|	ВТ_ВзаимосвязиПроекта.КлючСтрокиБ,
		|	ВТ_ВзаимосвязиПроекта.ВидРаботыА,
		|	ВТ_ВзаимосвязиПроекта.ВидРаботыБ,
		|	ВТ_ВзаимосвязиПроекта.Запаздывание,
		|	ВТ_ВзаимосвязиПроекта.ТипСвязи,
		|	ЕСТЬNULL(ВТ_РаботыПроекта.КодWBS, 0) КАК КодWBSА
		|ИЗ
		|	ВТ_ВзаимосвязиПроекта КАК ВТ_ВзаимосвязиПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботыПроекта КАК ВТ_РаботыПроекта
		|		ПО ВТ_ВзаимосвязиПроекта.КлючСтрокиА = ВТ_РаботыПроекта.КлючСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РаботыПроекта.КлючСтроки,
		|	ВТ_РаботыПроекта.КлючСвязи,
		|	ВТ_РаботыПроекта.ВидРаботы,
		|	ВТ_РаботыПроекта.КодWBS,
		|	ВТ_РаботыПроекта.ДлительностьДни,
		|	ЕСТЬNULL(ВТ_РасчетОкончаний.КоличествоВыходов, 0) КАК КоличествоВыходов,
		|	ЕСТЬNULL(ВТ_РасчетВходов.КоличчествоВходов, 0) КАК КоличествоВходов,
		|	ВТ_РаботыПроекта.ЭтоРабота
		|ИЗ
		|	ВТ_РаботыПроекта КАК ВТ_РаботыПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетОкончаний КАК ВТ_РасчетОкончаний
		|		ПО ВТ_РаботыПроекта.КлючСтроки = ВТ_РасчетОкончаний.КлючСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетВходов КАК ВТ_РасчетВходов
		|		ПО ВТ_РаботыПроекта.КлючСтроки = ВТ_РасчетВходов.КлючСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_РаботыПроекта.НомерВСтруктуре,
		|	ВТ_РаботыПроекта.КодWBS";

	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("Проект", Проект);

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	ВыборкаСвязей = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить();
	ВыборкаСвязей.Индексы.Добавить("КлючСтрокиА");
	ВыборкаСвязей.Индексы.Добавить("КлючСтрокиБ");

	Выборка  = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекущаяРабота = Работы.Добавить();
 		ЗаполнитьЗначенияСвойств(ТекущаяРабота, Выборка);
		
		Если Выборка.ЭтоРабота Тогда
			ЗаполнитьПредшественников(ТекущаяРабота, ВыборкаСвязей, ТаблицаСвязей);
		КонецЕсли;

	КонецЦикла;

	 РасчетПутиОтНачала(Работы, ТаблицаСвязей);
 	 РасчетПутиОтКонца(Работы, ТаблицаСвязей);
	 
	 Если ЗначениеЗаполнено(ДатаНачала) Тогда
	 	РасчетДатОтначала(Проект, Работы, ТаблицаСвязей, ДатаНачала, ДатаОкончания);
	 КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетПутиОтКонца(Работы, ТаблицаСвязей)

 	// выбираем стартовые работы и запускаем расчет
	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КоличествоВыходов, ЭтоРабота", 0, Истина));

	Для каждого СтартоваяРабота Из МассивСтрокРабот Цикл
		РасчетПутиРекурсивноОбратный(Работы, СтартоваяРабота, ТаблицаСвязей);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетПутиРекурсивноОбратный(Работы, ТекущаяРабота, ТаблицаСвязей)

	Если ТекущаяРабота.КоличествоВыходов <> 0 Тогда  // последние работы не пересчитываем

		МинимальноеЗначение = Неопределено;

		МассивПоследователей = МассивПоследователейПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
		
		Для каждого КлючПоследователя Из МассивПоследователей Цикл
			
			СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, КлючПоследователя);
			
			Если СтрокаРаботы <> Неопределено Тогда
					Если МинимальноеЗначение = Неопределено
					или  МинимальноеЗначение > СтрокаРаботы.ПВН - ТекущаяРабота.ДлительностьДни Тогда
					МинимальноеЗначение = СтрокаРаботы.ПВН - ТекущаяРабота.ДлительностьДни;
				КонецЕсли;

			КонецЕсли;
 			
		КонецЦикла;

		Если МинимальноеЗначение <> Неопределено  Тогда
			ТекущаяРабота.ПВН = МинимальноеЗначение;
			ТекущаяРабота.РезервВремени = ТекущаяРабота.ПВН -  ТекущаяРабота.РВН;
 			ТекущаяРабота.Критическая =	(ТекущаяРабота.РезервВремени = 0);
 		КонецЕсли;

	иначе

		ТекущаяРабота.ПВН = ТекущаяРабота.РВН;

	КонецЕсли;

	// РЕКУРСИЯ  - ПЕРЕБОР предшественников	

	МассивПредшественников = МассивПредшественниковПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);

 	Для каждого ЭлементПредшественник  из МассивПредшественников Цикл

 		СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, ЭлементПредшественник);
		
		Если СтрокаРаботы <> Неопределено Тогда
			РасчетПутиРекурсивноОбратный(Работы, СтрокаРаботы, ТаблицаСвязей);
		КонецЕсли;
 
	КонецЦикла;

 КонецФункции

&НаСервереБезКонтекста
Процедура РасчетПутиОтНачала(Работы, ТаблицаСвязей)

 	// выбираем стартовые работы и запускаем расчет
	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КоличествоВходов, ЭтоРабота", 0, Истина));

	Для каждого СтартоваяРабота Из МассивСтрокРабот Цикл
		РасчетПутиРекурсивно(Работы, СтартоваяРабота, ТаблицаСвязей);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетПутиРекурсивно(Работы, ТекущаяРабота, ТаблицаСвязей)
	
	// ПЕРЕБОР ПРЕДШЕСТВЕННИКОВ
	МассивПредшественников = МассивПредшественниковПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
	МаксимальнаяДлительность = 0;
	
	Для каждого ЭлементПредшественник Из МассивПредшественников Цикл
 		
		СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, ЭлементПредшественник);
		
		Если СтрокаРаботы <> Неопределено Тогда
			МаксимальнаяДлительность = Макс(СтрокаРаботы.РВН+СтрокаРаботы.ДлительностьДни, МаксимальнаяДлительность);
		КонецЕсли;
		
	КонецЦикла;  //Для каждого ЭлементПредшественник Из МассивПредшественников Цикл
	
	ТекущаяРабота.РВН = Макс(МаксимальнаяДлительность,  ТекущаяРабота.РВН);
	
	// РЕКУРСИЯ  - ПЕРЕБОР ПОСЛЕДОВАТЕЛЕЙ	
	
	МассивПоследователей = МассивПоследователейПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
	Для каждого КлючПоследователя Из МассивПоследователей Цикл
		
		СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, КлючПоследователя);
		
		Если СтрокаРаботы <> Неопределено Тогда
			РасчетПутиРекурсивно(Работы, СтрокаРаботы, ТаблицаСвязей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции  

&НаСервереБезКонтекста
Процедура РасчетДатОтначала(Проект, Работы, ТаблицаСвязей, ДатаНачала, ДатаОкончания)
	
	// выбираем стартовые работы и запускаем расчет
	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КоличествоВходов, ЭтоРабота", 0, Истина));
	
	Для каждого СтартоваяРабота Из МассивСтрокРабот Цикл
		
		СтартоваяРабота.НачалоПериода = ДатаНачала;
		
		Если СтартоваяРабота.ДлительностьДни = 0 Тогда
			СтартоваяРабота.КонецПериода = СтартоваяРабота.НачалоПериода;
		иначе			
			СтартоваяРабота.КонецПериода   =  ДатаОкончанияПоГрафику_Сервер(Проект, ДатаНачала, СтартоваяРабота.ДлительностьДни);
		КонецЕсли;
		
		РасчетДатРекурсивно(Проект, Работы, СтартоваяРабота, ТаблицаСвязей, ДатаОкончания);
		
	КонецЦикла;
 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетДатРекурсивно(Проект, Работы, ТекущаяРабота, ТаблицаСвязей, ДатаОкончания)
	
	// ПЕРЕБОР ПРЕДШЕСТВЕННИКОВ
	МассивПредшественников = МассивПредшественниковПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
	МаксНачалоПериода = Дата(1,1,1);
	
	Для каждого ЭлементПредшественник Из МассивПредшественников Цикл
 		
		СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, ЭлементПредшественник);
		
		Если СтрокаРаботы <> Неопределено Тогда
			
			Если СтрокаРаботы.ДлительностьДни=0  или ТекущаяРабота.ДлительностьДни=0 Тогда   // это веха
				МаксНачалоПериода = Макс(СтрокаРаботы.КонецПериода, МаксНачалоПериода);
			иначе
				// начало следующей работы это максимальное начало следующего за завершением дня
				МаксНачалоПериода = Макс( КонецДня(СтрокаРаботы.КонецПериода)+1, МаксНачалоПериода);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  //Для каждого ЭлементПредшественник Из МассивПредшественников Цикл

	Если МаксНачалоПериода <> Дата(1,1,1)  Тогда
		
		ТекущаяРабота.НачалоПериода = МаксНачалоПериода;
		
		Если ТекущаяРабота.ДлительностьДни = 0 Тогда  // это веха
			ТекущаяРабота.КонецПериода = ТекущаяРабота.НачалоПериода;
		иначе			
			ТекущаяРабота.КонецПериода   =  ДатаОкончанияПоГрафику_Сервер(Проект, ТекущаяРабота.НачалоПериода, ТекущаяРабота.ДлительностьДни);
		КонецЕсли;
		
		Если ТекущаяРабота.КоличествоВыходов=0 Тогда
			ДатаОкончания = ТекущаяРабота.КонецПериода;
		КонецЕсли;
		
	КонецЕсли;

	// РЕКУРСИЯ  - ПЕРЕБОР ПОСЛЕДОВАТЕЛЕЙ	  	
	МассивПоследователей = МассивПоследователейПоКлючу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки);
	
	Для каждого КлючПоследователя Из МассивПоследователей Цикл
		
		СтрокаРаботы = СтрокаРаботыПоКлючу(Работы, КлючПоследователя);
		
		Если СтрокаРаботы <> Неопределено Тогда
			РасчетДатРекурсивно(Проект, Работы, СтрокаРаботы, ТаблицаСвязей, ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции   

&НаСервереБезКонтекста
Функция СтрокаРаботыПоКлючу(Работы, КлючСтроки)
	Перем Рез;

	МассивСтрокРабот = Работы.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	Если МассивСтрокРабот.Количество() Тогда
		Рез = МассивСтрокРабот[0];
	КонецЕсли;

	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПредшественников(ТекущаяРабота, ВыборкаСвязей, ТаблицаСвязей)

	МассивСтрокСвязи = ВыборкаСвязей.НайтиСтроки(Новый Структура("КлючСтрокиБ", ТекущаяРабота.КлючСтроки));

	Если МассивСтрокСвязи.Количество() = 1 Тогда

		ТекущаяРабота.ПредшественникиWBS = МассивСтрокСвязи[0].КодWBSА;

		ДобавитьСвязьВТаблицу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки,  МассивСтрокСвязи[0].КлючСтрокиА);

 	иначе

		Для каждого ЭлементМассива Из МассивСтрокСвязи Цикл

			ТекущаяРабота.ПредшественникиWBS = ТекущаяРабота.ПредшественникиWBS + ?(ЗначениеЗаполнено(ТекущаяРабота.ПредшественникиWBS),";","")
				+ ЭлементМассива.КодWBSА ;

			ДобавитьСвязьВТаблицу(ТаблицаСвязей, ТекущаяРабота.КлючСтроки,  ЭлементМассива.КлючСтрокиА);

		КонецЦикла;

	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьСвязьВТаблицу(ТаблицаСвязей, КлючСтроки, КлючСтрокиПредшественник)

	ТекущаяСвязь = ТаблицаСвязей.Добавить();
	ТекущаяСвязь.КлючСтроки = КлючСтроки;
	ТекущаяСвязь.КлючСтрокиПредшественника = КлючСтрокиПредшественник;

КонецФункции

&НаСервереБезКонтекста
Функция МассивПредшественниковПоКлючу(ТаблицаСвязей, КлючСтроки)

	Рез = новый Массив;

	МассивСтрокРабот = ТаблицаСвязей.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));

	Для каждого ТекущаяРабота Из МассивСтрокРабот Цикл
		Рез.Добавить(ТекущаяРабота.КлючСтрокиПредшественника);
	КонецЦикла;

	Возврат Рез;

КонецФункции

&НаСервереБезКонтекста
Функция МассивПоследователейПоКлючу(ТаблицаСвязей, КлючСтроки)

	Рез = новый Массив;

	МассивСтрокРабот = ТаблицаСвязей.НайтиСтроки(Новый Структура("КлючСтрокиПредшественника", КлючСтроки));

	Для каждого ТекущаяРабота Из МассивСтрокРабот Цикл
		Рез.Добавить(ТекущаяРабота.КлючСтроки);
	КонецЦикла;

	Возврат Рез;

КонецФункции

&НаСервереБезКонтекста
Функция  ПроектПриИзмененииНаСервере(Проект)
	Возврат  Справочники.ИНАГРО_Версия.РабочаяВерсияПроекта(Проект) ;
КонецФункции

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Версия = ПроектПриИзмененииНаСервере(Проект);

	УстановитьОтборыСвязей();

КонецПроцедуры   

&НаКлиенте
Процедура ВариантПланированияПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаОкончанияПоГрафику_Сервер(Проект, НачалоПериода, КоличествоДней)

	ГрафикПроекта = ИНАГРО_ОбщегоНазначения.ПолучитьЗначениеРеквизита(Проект, "ИНАГРО_ГрафикРаботы");

	Возврат Документы.ИНАГРО_УГПР.ДатаОкончанияПоГрафику(ГрафикПроекта, НачалоПериода, КоличествоДней);

КонецФункции

&НаСервере
Процедура РасчетДат_Сервер()
	
 	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		РасчетДатОтначала(Проект, Работы, ТаблицаСвязей, ДатаНачала, ДатаОкончания);
	КонецЕсли;
 	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Состояние("Расчет графика", 33);
	РасчетДат_Сервер();
	Состояние("Расчет графика завершен", 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДиаграмма Тогда
		СформироватьДаграммуСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДиаграмму(Команда)
	СформироватьДаграммуСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьИнтервалДиаграммы(ДиаграммаГанта, Точка, Серия, ДатаНачала, ДатаОкончания, Ветка = Неопределено)
	
	Если ЗначениеЗаполнено(ДатаНачала) и ЗначениеЗаполнено(ДатаОкончания) Тогда
 		
		ЗначениеДиаграммы = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
		
		Если  Ветка = Неопределено Тогда
			ЗначениеДиаграммы.Текст =  ""+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаОкончания,"ДФ=dd.MM.yyyy");
		иначе
			ЗначениеДиаграммы.Текст =  ""+Ветка.ДлительностьДни+" дн";
		КонецЕсли;
		
		ЗначениеДиаграммы.Редактирование = Истина;  //!!!!
 		
		Интервал = ЗначениеДиаграммы.Добавить();
		Интервал.Начало = ДатаНачала;
		Интервал.Конец = ДатаОкончания;
		
		Если  Ветка <> Неопределено и  Ветка.Критическая Тогда
			Интервал.Цвет =  WebЦвета.Красный;
		Иначе	
			Интервал.Цвет =  WebЦвета.СинийСоСтальнымОттенком;
 		КонецЕсли;

	КонецЕсли;

КонецФункции

&НаСервере
Процедура Ганта_УстановкаШкалы()

	ШкалаВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
		
	//Для Каждого Элемент Из ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы Цикл
	//	Если Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц Тогда
	//		ЭлементМеток = Элемент;
	//	КонецЕсли;			
	//КонецЦикла;	
	//
	//Если ЭлементМеток = Неопределено Тогда
	//	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	//	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.Месяц;
	//КонецЕсли;	
	
	Если ШкалаВремени.Количество() > 0 Тогда
		ШкалаГодов = ШкалаВремени.Получить(0);
	иначе
		ШкалаГодов = ШкалаВремени.Добавить();
	КонецЕсли;
	
	ШкалаГодов.Единица = ТипЕдиницыШкалыВремени.Год;

	 Если ШкалаВремени.Количество() > 1 Тогда
		ШкалаМесяцы = ШкалаВремени.Получить(1);
	иначе
		ШкалаМесяцы = ШкалаВремени.Добавить();
	КонецЕсли;
	
	ШкалаМесяцы.Единица = ТипЕдиницыШкалыВремени.Месяц;

КонецПроцедуры

&НаСервере
Процедура СформироватьДаграммуСервер()
	
	ЦветФона =   ЦветаСтиля.ФонПодписьВерна;

	//ДиаграммаГанта = Элементы.ДиаграммаГанта;
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;

	Ганта_УстановкаШкалы();

	Серия = ДиаграммаГанта.Серии.Добавить();
	Серия.ШтриховкаМеждуИнтервалами = Истина;
	Серия.Цвет = Новый Цвет(0,0,0);
	Серия.ПриоритетЦвета = Ложь;
	Серия.Текст = "План";

	//основная точка Проект
	Точка = ДиаграммаГанта.УстановитьТочку(Проект);
	Точка.Текст = Проект;
	Точка.ЦветФона = ЦветФона;
	
	УстановитьИнтервалДиаграммы(ДиаграммаГанта, Точка, Серия, ДатаНачала, ДатаОкончания);

	ВывестиВеткуВДиаграмму_Рекурсивно();

	СоздатьСвязи(ДиаграммаГанта, Серия);
	
	ДиаграммаГанта.РазвернутьТочку(Точка, Истина);
	ДиаграммаГанта.Обновление = Истина;

КонецПроцедуры

&НаСервере
Процедура СоздатьСвязи(ДиаграммаГанта, Серия)

	ТекущаяТочка = Неопределено;
	
	Для Каждого Связь Из ТаблицаСвязей Цикл 
	
		Если ТекущаяТочка = Неопределено Или ТекущаяТочка.Значение <> Связь.КлючСтроки Тогда
			ТекущаяТочка = ДиаграммаГанта.УстановитьТочку(Связь.КлючСтроки);
		КонецЕсли;
		
		ТочкаНачала = ДиаграммаГанта.УстановитьТочку(Связь.КлючСтрокиПредшественника);
		
		Значение1 = ДиаграммаГанта.ПолучитьЗначение(ТочкаНачала, Серия);
		
		Для Каждого Интервал Из Значение1 Цикл
			ИнтервалНачала = Интервал;
			Прервать;
		КонецЦикла;
		
		Значение2 = ДиаграммаГанта.ПолучитьЗначение(ТекущаяТочка, Серия);
		
		Для Каждого Интервал Из Значение2 Цикл
			ИнтервалКонца = Интервал;
			//Прервать;
		КонецЦикла;
		
		Попытка
			
			НоваяСвязь = ИнтервалНачала.Добавить(ИнтервалКонца);
			
			НоваяСвязь.ТипСвязи =  ТипСвязиДиаграммыГанта.КонецНачало;
			
			Если ИнтервалНачала.Конец <= ИнтервалКонца.Начало Тогда
				НоваяСвязь.Цвет = WebЦвета.Синий;
			Иначе			
				НоваяСвязь.Цвет = WebЦвета.Красный;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВеткуВДиаграмму_Рекурсивно()
	
	Серия = ДиаграммаГанта.Серии[0];
		
	Для каждого Ветка Из Работы  Цикл
 		
		Если Ветка.КлючСвязи = "00000000-0000-0000-0000-000000000000" Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(Ветка.КлючСтроки, Проект);
		иначе
			Точка = ДиаграммаГанта.УстановитьТочку(Ветка.КлючСтроки, Ветка.КлючСвязи);
 		КонецЕсли;
		
		//Стр = тзТочкиДиаграммыГанта.Добавить();
		//Стр.Точка = Точка;
		//Стр.ВидРаботы = СтрокаРаботы.ВидРаботы;
		
		Точка.Текст = Ветка.ВидРаботы;
		Точка.Расшифровка = Ветка.ВидРаботы;
		Точка.ПриоритетЦвета = Истина;
				
		УстановитьИнтервалДиаграммы(ДиаграммаГанта, Точка, Серия, Ветка.НачалоПериода, Ветка.КонецПериода, Ветка);
		
		Если Ветка.ЭтоРабота Тогда
			
		иначе // WBS	
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

